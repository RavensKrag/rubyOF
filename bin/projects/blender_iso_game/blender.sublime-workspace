{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"retr",
				"rethrow"
			],
			[
				"shapeError",
				"shapeError_area"
			],
			[
				"thre",
				"threshold"
			],
			[
				"out",
				"outside"
			],
			[
				"round",
				"roundToEven"
			],
			[
				"targw",
				"targetWidth_um"
			],
			[
				"num",
				"numCellsX"
			],
			[
				"numg",
				"num_gens"
			],
			[
				"left",
				"leftpad"
			],
			[
				"population",
				"populationSize"
			],
			[
				"disp",
				"displacement"
			],
			[
				"tate",
				"total_error"
			],
			[
				"fitness",
				"fitnessValues"
			],
			[
				"gener",
				"generation_idx"
			],
			[
				"video",
				"videoPrefix"
			],
			[
				"popul",
				"population"
			],
			[
				"chid",
				"child_in"
			],
			[
				"child",
				"child"
			],
			[
				"popula",
				"populationSize"
			],
			[
				"chromose",
				"chromosomeSize"
			],
			[
				"crossover",
				"crossoverRate"
			],
			[
				"fitn",
				"fitness"
			],
			[
				"fitnes",
				"fitnessValues"
			],
			[
				"proje",
				"project_name"
			],
			[
				"outm",
				"outputMin"
			],
			[
				"leng",
				"planarian_length"
			],
			[
				"plan",
				"planarian_ratio"
			],
			[
				"early",
				"earlyStop"
			],
			[
				"border",
				"border_max"
			],
			[
				"planarian",
				"planarian_ratio"
			],
			[
				"planaria",
				"planarian_width"
			],
			[
				"plot_time",
				"plot_lengthOverTime"
			],
			[
				"tot",
				"total_ram"
			],
			[
				"CPUBAPX",
				"CPU_BAR_PX1"
			],
			[
				"MIDI",
				"MIDIPlaybackView"
			],
			[
				"osc_",
				"osc_playback"
			],
			[
				"oscilat",
				"OscilatorBank"
			],
			[
				"playrvi",
				"player_view"
			],
			[
				"hfi",
				"highest_finger_after"
			],
			[
				"hige",
				"highest_finger"
			],
			[
				"MIDIN",
				"FIRST_MIDI_NOTE"
			],
			[
				"time",
				"timestamp"
			],
			[
				"TUNINGST",
				"TUNING_STRUCT_HEADER"
			],
			[
				"Stun",
				"SynthTuning"
			],
			[
				"TUN",
				"TUNING_STRUCT_HEADER"
			],
			[
				"tuni",
				"TUNING_STRUCT_VER"
			],
			[
				"VER",
				"TUNING_STRUCT_VER"
			],
			[
				"size",
				"sizeof\tDeviot sizeof()"
			],
			[
				"colorpl",
				"COLOR_aPL"
			],
			[
				"INTM",
				"INT16_MIN"
			],
			[
				"m__",
				"m__last_button_timestamp"
			],
			[
				"INT",
				"INT16_MAX"
			],
			[
				"noteoff",
				"note_offsets"
			],
			[
				"tunings",
				"synth_tunings"
			],
			[
				"shift",
				"pitch_shift"
			],
			[
				"synthtu",
				"synth_tunings"
			],
			[
				"is",
				"isShifted"
			],
			[
				"highest",
				"highest_finger"
			],
			[
				"NUMP",
				"NUM_PITCHES"
			],
			[
				"getnot",
				"getNoteLabel"
			],
			[
				"Synth",
				"SynthTuning"
			],
			[
				"getp",
				"getPixelShiftedColor"
			],
			[
				"noteof",
				"note_offsets"
			],
			[
				"Globa",
				"GlobalMenu"
			],
			[
				"FIBERD",
				"FIBER_DO"
			],
			[
				"FIBER",
				"FIBER_DEAD"
			],
			[
				"pagesi",
				"page_size"
			],
			[
				"test",
				"test_data"
			],
			[
				"underfl",
				"underflow_counter"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"d4",
				"D4_hz"
			],
			[
				"brigh",
				"display_brightness"
			],
			[
				"flip_",
				"flip_x"
			],
			[
				"bac",
				"baseline_colors"
			],
			[
				"base",
				"baseline_color"
			],
			[
				"hi",
				"highest_finger"
			],
			[
				"violin",
				"violin_tuning_strings"
			],
			[
				"compo",
				"component"
			],
			[
				"comp",
				"components"
			],
			[
				"compone",
				"components"
			],
			[
				"font",
				"font_texture"
			],
			[
				"serial",
				"serialized"
			],
			[
				"fp",
				"filepath"
			],
			[
				"data",
				"data_dir"
			],
			[
				"update",
				"update_fiber"
			],
			[
				"local_",
				"local_channel_info"
			],
			[
				"yiel",
				"yielding_collect"
			],
			[
				"Stop",
				"StopIteration"
			],
			[
				"pipe",
				"pipeline"
			],
			[
				"window",
				"window_size"
			],
			[
				"save",
				"save_filepath"
			],
			[
				"yt",
				"yt_channel"
			],
			[
				"text_",
				"text_mesh"
			],
			[
				"attr",
				"attr_reader"
			],
			[
				"icn",
				"icon_pos"
			],
			[
				"scr",
				"scrollY"
			],
			[
				"require",
				"require_all"
			],
			[
				"call",
				"callback"
			],
			[
				"Fiber",
				"Fiber"
			],
			[
				"loca",
				"local_subscriptions"
			],
			[
				"image",
				"image_i"
			],
			[
				"zip",
				"zip_pair"
			],
			[
				"chann",
				"channel-name"
			],
			[
				"channel",
				"channel_name"
			],
			[
				"icon_",
				"icon_filepath"
			],
			[
				"outp",
				"output_path"
			],
			[
				"channe",
				"channel_name"
			],
			[
				"OFB",
				"OF_BUILD_VARIABLE_FILE"
			],
			[
				"root",
				"REPO_ROOT"
			],
			[
				"Fil",
				"File\tFile.open(\"..\") { |file| .. }"
			],
			[
				"exten",
				"ofx_extension_name"
			],
			[
				"repo",
				"REPO_ROOT"
			],
			[
				"expand",
				"expand_path"
			],
			[
				"onl",
				"only_so"
			],
			[
				"sketch",
				"sketch_dump"
			],
			[
				"dump",
				"dump_so"
			],
			[
				"cate",
				"category_dir"
			],
			[
				"exp",
				"expand_path"
			],
			[
				"trail",
				"trail_dt"
			],
			[
				"es",
				"exit_status"
			],
			[
				"have_",
				"have_library"
			],
			[
				"gstream",
				"gstreamer"
			],
			[
				"polib",
				"poco_libs_dir"
			],
			[
				"build_",
				"build_tess2"
			],
			[
				"depe",
				"dependencies"
			],
			[
				"ext",
				"extconf"
			],
			[
				"oF",
				"oF_project"
			],
			[
				"clb",
				"c_library"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/ravenskrag/Code/Source/datenwolf_codesamples/samples/OpenGL/x11argb_opengl/x11argb_opengl.c",
			"settings":
			{
				"buffer_size": 12827,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <X11/Xlib.h>\n#include <X11/Xutil.h>\n\nint main(int argc, char* argv[])\n{\n    Display* display = XOpenDisplay(NULL);\n\n    XVisualInfo vinfo;\n    XMatchVisualInfo(display, DefaultScreen(display), 32, TrueColor, &vinfo);\n\n    XSetWindowAttributes attr;\n    attr.colormap = XCreateColormap(display, DefaultRootWindow(display), vinfo.visual, AllocNone);\n    attr.border_pixel = 0;\n    attr.background_pixel = 0;\n\n    Window win = XCreateWindow(display, DefaultRootWindow(display), 0, 0, 300, 200, 0, vinfo.depth, InputOutput, vinfo.visual, CWColormap | CWBorderPixel | CWBackPixel, &attr);\n    XSelectInput(display, win, StructureNotifyMask);\n    GC gc = XCreateGC(display, win, 0, 0);\n\n    Atom wm_delete_window = XInternAtom(display, \"WM_DELETE_WINDOW\", 0);\n    XSetWMProtocols(display, win, &wm_delete_window, 1);\n\n    XMapWindow(display, win);\n\n    int keep_running = 1;\n    XEvent event;\n\n    while (keep_running) {\n        XNextEvent(display, &event);\n\n        switch(event.type) {\n            case ClientMessage:\n                if (event.xclient.message_type == XInternAtom(display, \"WM_PROTOCOLS\", 1) && (Atom)event.xclient.data.l[0] == XInternAtom(display, \"WM_DELETE_WINDOW\", 1))\n                    keep_running = 0;\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    XDestroyWindow(display, win);\n    XCloseDisplay(display);\n    return 0;\n}\n",
			"settings":
			{
				"buffer_size": 1396,
				"line_ending": "Unix",
				"name": "#include <X11/Xlib.h>"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_WindowX11.cpp",
			"settings":
			{
				"buffer_size": 51171,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_WindowX11.h",
			"settings":
			{
				"buffer_size": 7739,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/.clang-format",
			"settings":
			{
				"buffer_size": 7300,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemX11.cpp",
			"settings":
			{
				"buffer_size": 88321,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_System.cpp",
			"settings":
			{
				"buffer_size": 11340,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_Types.h",
			"settings":
			{
				"buffer_size": 18210,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_System.h",
			"settings":
			{
				"buffer_size": 13353,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_C-api.cpp",
			"settings":
			{
				"buffer_size": 29273,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_window.c",
			"settings":
			{
				"buffer_size": 72005,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 11946 files for \"GHOST_CreateWindow\"\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_C-api.h:\n  175   * \\return A handle to the new window ( == NULL if creation failed).\n  176   */\n  177: extern GHOST_WindowHandle GHOST_CreateWindow(GHOST_SystemHandle systemhandle,\n  178                                               const char *title,\n  179                                               GHOST_TInt32 left,\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_C-api.cpp:\n  152  }\n  153  \n  154: GHOST_WindowHandle GHOST_CreateWindow(GHOST_SystemHandle systemhandle,\n  155                                        const char *title,\n  156                                        GHOST_TInt32 left,\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/test/gears/GHOST_C-Test.c:\n  440    if (shSystem) {\n  441      /* Create the main window */\n  442:     sMainWindow = GHOST_CreateWindow(shSystem,\n  443                                       title1,\n  444                                       10,\n  ...\n  455  \n  456      /* Create a secondary window */\n  457:     sSecondaryWindow = GHOST_CreateWindow(shSystem,\n  458                                            title2,\n  459                                            340,\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/test/multitest/MultiTest.c:\n  318    GHOST_GLSettings glSettings = {0};\n  319  \n  320:   win = GHOST_CreateWindow(sys,\n  321                             \"MultiTest:Main\",\n  322                             40,\n  ...\n  575  \n  576    GHOST_GetMainDisplayDimensions(sys, &screensize[0], &screensize[1]);\n  577:   win = GHOST_CreateWindow(sys,\n  578                             \"MultiTest:Logger\",\n  579                             40,\n  ...\n  776    GHOST_WindowHandle win;\n  777  \n  778:   win = GHOST_CreateWindow(sys,\n  779                             \"MultiTest:Extra\",\n  780                             500,\n\n/home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_playanim.c:\n 1109    posy = (scr_h - posy - sizey);\n 1110  \n 1111:   g_WS.ghost_window = GHOST_CreateWindow(g_WS.ghost_system,\n 1112                                           title,\n 1113                                           posx,\n\n/home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_window.c:\n  604    }\n  605    else {\n  606:     ghostwin = GHOST_CreateWindow(g_system,\n  607                                    title,\n  608                                    win->posx,\n  ...\n  625  \n  626      /* Set window as drawable upon creation. Note this has already been\n  627:      * it has already been activated by GHOST_CreateWindow. */\n  628      wm_window_set_drawable(wm, win, false);\n  629  \n\n<untitled 405>:\n   11      glSettings=..., exclusive=false, is_dialog=false, parentWindow=0x0)\n   12      at /home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemX11.cpp:372\n   13: #3  0x0000000004238270 in GHOST_CreateWindow (systemhandle=0x7ffff1449880, title=0xd5d7522 \"Blender\", \n   14      left=40, top=1200, width=1720, height=920, state=GHOST_kWindowStateMaximized, \n   15      type=GHOST_kDrawingContextTypeOpenGL, glSettings=...)\n\n11 matches across 7 files\n\n\nSearching 11946 files for \"GHOST_ISystem\"\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/CMakeLists.txt:\n   38    intern/GHOST_DisplayManager.cpp\n   39    intern/GHOST_EventManager.cpp\n   40:   intern/GHOST_ISystem.cpp\n   41:   intern/GHOST_ISystemPaths.cpp\n   42    intern/GHOST_ModifierKeys.cpp\n   43    intern/GHOST_Path-api.cpp\n   ..\n   52    GHOST_IEvent.h\n   53    GHOST_IEventConsumer.h\n   54:   GHOST_ISystem.h\n   55:   GHOST_ISystemPaths.h\n   56    GHOST_ITimerTask.h\n   57    GHOST_IWindow.h\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_IContext.h:\n   31   *\n   32   * You can create a offscreen context (windowless) with the system's\n   33:  * GHOST_ISystem::createOffscreenContext method.\n   34:  * \\see GHOST_ISystem#createOffscreenContext\n   35   */\n   36  class GHOST_IContext {\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_IEventConsumer.h:\n   33   * they want to receive events. The system will call the processEvent() method\n   34   * for every installed event consumer to pass events.\n   35:  * \\see GHOST_ISystem#addEventConsumer\n   36   */\n   37  class GHOST_IEventConsumer {\n   ..\n   46    /**\n   47     * This method is called by the system when it has events to dispatch.\n   48:    * \\see GHOST_ISystem#dispatchEvents\n   49     * \\param   event   The event that can be handled or ignored.\n   50     * \\return  Indication as to whether the event was handled.\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_ISystem.h:\n   20  /** \\file\n   21   * \\ingroup GHOST\n   22:  * %Main interface file for C++ Api with declaration of GHOST_ISystem interface\n   23   * class.\n   24   * Contains the doxygen documentation main page.\n   ..\n   96   * - GHOST_IEvent.h\n   97   * - GHOST_IEventConsumer.h\n   98:  * - GHOST_ISystem.h\n   99   * - GHOST_ITimerTask.h\n  100   * - GHOST_IWindow.h\n  ...\n  117   */\n  118  \n  119: /** \\interface GHOST_ISystem\n  120   * Interface for classes that provide access to the operating system.\n  121   * There should be only one system class in an application.\n  ...\n  130   *     work in progress).\n  131   */\n  132: class GHOST_ISystem {\n  133   public:\n  134    /**\n  ...\n  148     * \\return A pointer to the system.\n  149     */\n  150:   static GHOST_ISystem *getSystem();\n  151  \n  152   protected:\n  ...\n  155     * Protected default constructor to force use of static createSystem member.\n  156     */\n  157:   GHOST_ISystem()\n  158    {\n  159    }\n  ...\n  163     * Protected default constructor to force use of static dispose member.\n  164     */\n  165:   virtual ~GHOST_ISystem()\n  166    {\n  167    }\n  ...\n  488  \n  489    /** The one and only system */\n  490:   static GHOST_ISystem *m_system;\n  491  \n  492  #ifdef WITH_CXX_GUARDEDALLOC\n  493:   MEM_CXX_CLASS_ALLOC_FUNCS(\"GHOST:GHOST_ISystem\")\n  494  #endif\n  495  };\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_ISystemPaths.h:\n   26  #include \"GHOST_Types.h\"\n   27  \n   28: class GHOST_ISystemPaths {\n   29   public:\n   30    /**\n   ..\n   44     * \\return A pointer to the system.\n   45     */\n   46:   static GHOST_ISystemPaths *get();\n   47  \n   48   protected:\n   ..\n   51     * Protected default constructor to force use of static createSystem member.\n   52     */\n   53:   GHOST_ISystemPaths()\n   54    {\n   55    }\n   ..\n   59     * Protected default constructor to force use of static dispose member.\n   60     */\n   61:   virtual ~GHOST_ISystemPaths()\n   62    {\n   63    }\n   ..\n   91   private:\n   92    /** The one and only system paths*/\n   93:   static GHOST_ISystemPaths *m_systemPaths;\n   94  \n   95  #ifdef WITH_CXX_GUARDEDALLOC\n   96:   MEM_CXX_CLASS_ALLOC_FUNCS(\"GHOST:GHOST_ISystemPaths\")\n   97  #endif\n   98  };\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_ITimerTask.h:\n   36   * Note that GHOST processes timers in the UI thread. You should ask GHOST\n   37   * process messages in order for the timer-callbacks to be called.\n   38:  * \\see GHOST_ISystem#installTimer\n   39   * \\see GHOST_TimerProcPtr\n   40   */\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_IWindow.h:\n   34   * Interface for GHOST windows.\n   35   *\n   36:  * You can create a window with the system's GHOST_ISystem::createWindow\n   37   * method.\n   38:  * \\see GHOST_ISystem#createWindow\n   39   *\n   40   * There are two coordinate systems:\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_C-api.cpp:\n   30  #include \"GHOST_IEvent.h\"\n   31  #include \"GHOST_IEventConsumer.h\"\n   32: #include \"GHOST_ISystem.h\"\n   33  #include \"intern/GHOST_Debug.h\"\n   34  #ifdef WITH_XR_OPENXR\n   ..\n   40  GHOST_SystemHandle GHOST_CreateSystem(void)\n   41  {\n   42:   GHOST_ISystem::createSystem();\n   43:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n   44  \n   45    return (GHOST_SystemHandle)system;\n   ..\n   48  void GHOST_SystemInitDebug(GHOST_SystemHandle systemhandle, int is_debug_enabled)\n   49  {\n   50:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n   51  \n   52    system->initDebug(is_debug_enabled);\n   ..\n   55  GHOST_TSuccess GHOST_DisposeSystem(GHOST_SystemHandle systemhandle)\n   56  {\n   57:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n   58  \n   59    return system->disposeSystem();\n   ..\n   68                            GHOST_DialogOptions dialog_options)\n   69  {\n   70:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n   71    system->showMessageBox(title, message, help_label, continue_label, link, dialog_options);\n   72  }\n   ..\n   86  GHOST_TUns64 GHOST_GetMilliSeconds(GHOST_SystemHandle systemhandle)\n   87  {\n   88:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n   89  \n   90    return system->getMilliSeconds();\n   ..\n   97                                           GHOST_TUserDataPtr userdata)\n   98  {\n   99:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  100  \n  101    return (GHOST_TimerTaskHandle)system->installTimer(delay, interval, timerproc, userdata);\n  ...\n  105                                   GHOST_TimerTaskHandle timertaskhandle)\n  106  {\n  107:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  108    GHOST_ITimerTask *timertask = (GHOST_ITimerTask *)timertaskhandle;\n  109  \n  ...\n  113  GHOST_TUns8 GHOST_GetNumDisplays(GHOST_SystemHandle systemhandle)\n  114  {\n  115:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  116  \n  117    return system->getNumDisplays();\n  ...\n  122                                      GHOST_TUns32 *height)\n  123  {\n  124:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  125  \n  126    system->getMainDisplayDimensions(*width, *height);\n  ...\n  131                                     GHOST_TUns32 *height)\n  132  {\n  133:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  134  \n  135    system->getAllDisplayDimensions(*width, *height);\n  ...\n  138  GHOST_ContextHandle GHOST_CreateOpenGLContext(GHOST_SystemHandle systemhandle)\n  139  {\n  140:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  141  \n  142    return (GHOST_ContextHandle)system->createOffscreenContext();\n  ...\n  146                                            GHOST_ContextHandle contexthandle)\n  147  {\n  148:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  149    GHOST_IContext *context = (GHOST_IContext *)contexthandle;\n  150  \n  ...\n  162                                        GHOST_GLSettings glSettings)\n  163  {\n  164:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  165  \n  166    return (GHOST_WindowHandle)system->createWindow(\n  ...\n  179                                              GHOST_GLSettings glSettings)\n  180  {\n  181:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  182  \n  183    return (GHOST_WindowHandle)system->createWindow(title,\n  ...\n  217                                     GHOST_WindowHandle windowhandle)\n  218  {\n  219:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  220    GHOST_IWindow *window = (GHOST_IWindow *)windowhandle;\n  221  \n  ...\n  225  int GHOST_ValidWindow(GHOST_SystemHandle systemhandle, GHOST_WindowHandle windowhandle)\n  226  {\n  227:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  228    GHOST_IWindow *window = (GHOST_IWindow *)windowhandle;\n  229  \n  ...\n  235                                           const int stereoVisual)\n  236  {\n  237:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  238    GHOST_IWindow *window = NULL;\n  239    bool bstereoVisual;\n  ...\n  251  GHOST_TSuccess GHOST_EndFullScreen(GHOST_SystemHandle systemhandle)\n  252  {\n  253:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  254  \n  255    return system->endFullScreen();\n  ...\n  258  int GHOST_GetFullScreen(GHOST_SystemHandle systemhandle)\n  259  {\n  260:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  261  \n  262    return (int)system->getFullScreen();\n  ...\n  265  int GHOST_ProcessEvents(GHOST_SystemHandle systemhandle, int waitForEvent)\n  266  {\n  267:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  268  \n  269    return (int)system->processEvents(waitForEvent ? true : false);\n  ...\n  272  void GHOST_DispatchEvents(GHOST_SystemHandle systemhandle)\n  273  {\n  274:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  275  \n  276    system->dispatchEvents();\n  ...\n  280                                        GHOST_EventConsumerHandle consumerhandle)\n  281  {\n  282:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  283  \n  284    return system->addEventConsumer((GHOST_CallbackEventConsumer *)consumerhandle);\n  ...\n  288                                           GHOST_EventConsumerHandle consumerhandle)\n  289  {\n  290:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  291  \n  292    return system->removeEventConsumer((GHOST_CallbackEventConsumer *)consumerhandle);\n  ...\n  362                                         GHOST_TInt32 *y)\n  363  {\n  364:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  365  \n  366    return system->getCursorPosition(*x, *y);\n  ...\n  371                                         GHOST_TInt32 y)\n  372  {\n  373:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  374  \n  375    return system->setCursorPosition(x, y);\n  ...\n  402                                           int *isDown)\n  403  {\n  404:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  405    GHOST_TSuccess result;\n  406    bool isdown = false;\n  ...\n  416                                      int *isDown)\n  417  {\n  418:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  419    GHOST_TSuccess result;\n  420    bool isdown = false;\n  ...\n  429  void GHOST_setNDOFDeadZone(float deadzone)\n  430  {\n  431:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n  432    system->setNDOFDeadZone(deadzone);\n  433  }\n  ...\n  713  void GHOST_SetTabletAPI(GHOST_SystemHandle systemhandle, GHOST_TTabletAPI api)\n  714  {\n  715:   GHOST_ISystem *system = (GHOST_ISystem *)systemhandle;\n  716    system->setTabletAPI(api);\n  717  }\n  ...\n  839  GHOST_TUns8 *GHOST_getClipboard(int selection)\n  840  {\n  841:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n  842    return system->getClipboard(selection);\n  843  }\n  ...\n  845  void GHOST_putClipboard(GHOST_TInt8 *buffer, int selection)\n  846  {\n  847:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n  848    system->putClipboard(buffer, selection);\n  849  }\n  ...\n  851  int GHOST_toggleConsole(int action)\n  852  {\n  853:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n  854    return system->toggleConsole(action);\n  855  }\n  ...\n  857  int GHOST_UseNativePixels(void)\n  858  {\n  859:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n  860    return system->useNativePixel();\n  861  }\n  ...\n  863  void GHOST_UseWindowFocus(int use_focus)\n  864  {\n  865:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n  866    return system->useWindowFocus(use_focus);\n  867  }\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_ISystem.cpp:\n   26   */\n   27  \n   28: #include \"GHOST_ISystem.h\"\n   29  \n   30  #if defined(WITH_HEADLESS)\n   ..\n   46  #endif\n   47  \n   48: GHOST_ISystem *GHOST_ISystem::m_system = NULL;\n   49  \n   50: GHOST_TSuccess GHOST_ISystem::createSystem()\n   51  {\n   52    GHOST_TSuccess success;\n   ..\n   87  }\n   88  \n   89: GHOST_TSuccess GHOST_ISystem::disposeSystem()\n   90  {\n   91    GHOST_TSuccess success = GHOST_kSuccess;\n   ..\n  100  }\n  101  \n  102: GHOST_ISystem *GHOST_ISystem::getSystem()\n  103  {\n  104    return m_system;\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_ISystemPaths.cpp:\n   28  #include <stdio.h> /* just for NULL */\n   29  \n   30: #include \"GHOST_ISystemPaths.h\"\n   31  \n   32  #ifdef WIN32\n   ..\n   40  #endif\n   41  \n   42: GHOST_ISystemPaths *GHOST_ISystemPaths::m_systemPaths = NULL;\n   43  \n   44: GHOST_TSuccess GHOST_ISystemPaths::create()\n   45  {\n   46    GHOST_TSuccess success;\n   ..\n   63  }\n   64  \n   65: GHOST_TSuccess GHOST_ISystemPaths::dispose()\n   66  {\n   67    GHOST_TSuccess success = GHOST_kSuccess;\n   ..\n   76  }\n   77  \n   78: GHOST_ISystemPaths *GHOST_ISystemPaths::get()\n   79  {\n   80    if (!m_systemPaths) {\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_Path-api.cpp:\n   24  #include <cstdio>\n   25  \n   26: #include \"GHOST_ISystemPaths.h\"\n   27  #include \"GHOST_Path-api.h\"\n   28  #include \"GHOST_Types.h\"\n   ..\n   31  GHOST_TSuccess GHOST_CreateSystemPaths(void)\n   32  {\n   33:   return GHOST_ISystemPaths::create();\n   34  }\n   35  \n   36  GHOST_TSuccess GHOST_DisposeSystemPaths(void)\n   37  {\n   38:   return GHOST_ISystemPaths::dispose();\n   39  }\n   40  \n   41  const GHOST_TUns8 *GHOST_getSystemDir(int version, const char *versionstr)\n   42  {\n   43:   GHOST_ISystemPaths *systemPaths = GHOST_ISystemPaths::get();\n   44    return systemPaths ? systemPaths->getSystemDir(version, versionstr) : NULL;\n   45  }\n   ..\n   47  const GHOST_TUns8 *GHOST_getUserDir(int version, const char *versionstr)\n   48  {\n   49:   GHOST_ISystemPaths *systemPaths = GHOST_ISystemPaths::get();\n   50    return systemPaths ? systemPaths->getUserDir(version, versionstr) : NULL; /* shouldn't be NULL */\n   51  }\n   ..\n   53  const GHOST_TUns8 *GHOST_getBinaryDir()\n   54  {\n   55:   GHOST_ISystemPaths *systemPaths = GHOST_ISystemPaths::get();\n   56    return systemPaths ? systemPaths->getBinaryDir() : NULL; /* shouldn't be NULL */\n   57  }\n   ..\n   59  void GHOST_addToSystemRecentFiles(const char *filename)\n   60  {\n   61:   GHOST_ISystemPaths *systemPaths = GHOST_ISystemPaths::get();\n   62    if (systemPaths) {\n   63      systemPaths->addToSystemRecentFiles(filename);\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_System.h:\n   25  #pragma once\n   26  \n   27: #include \"GHOST_ISystem.h\"\n   28  \n   29  #include \"GHOST_Buttons.h\"\n   ..\n   45  \n   46  /**\n   47:  * Implementation of platform independent functionality of the GHOST_ISystem\n   48   * interface.\n   49:  * GHOST_System is an abstract class because not all methods of GHOST_ISystem\n   50   * are implemented.\n   51:  * \\see GHOST_ISystem.\n   52   */\n   53: class GHOST_System : public GHOST_ISystem {\n   54   protected:\n   55    /**\n   ..\n  177  \n  178    /**\n  179:    * Inherited from GHOST_ISystem but left pure virtual\n  180     *\n  181     * virtual bool processEvents(bool waitForEvent) = 0;\n  ...\n  207  \n  208    /**\n  209:    * Inherited from GHOST_ISystem but left pure virtual\n  210     * <pre>\n  211     * GHOST_TSuccess getCursorPosition(GHOST_TInt32& x, GHOST_TInt32& y) const = 0;\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemCocoa.h:\n  243  \n  244    /**\n  245:    * \\see GHOST_ISystem\n  246     */\n  247    int toggleConsole(int action)\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemPaths.h:\n   24  #pragma once\n   25  \n   26: #include \"GHOST_ISystemPaths.h\"\n   27  \n   28: class GHOST_SystemPaths : public GHOST_ISystemPaths {\n   29   protected:\n   30    /**\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemPathsUnix.h:\n   31    /**\n   32     * Constructor\n   33:    * this class should only be instantiated by GHOST_ISystem.\n   34     */\n   35    GHOST_SystemPathsUnix();\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemX11.cpp:\n 2513  int GHOST_X11_ApplicationErrorHandler(Display *display, XErrorEvent *event)\n 2514  {\n 2515:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n 2516    if (!system->isDebugEnabled()) {\n 2517      return 0;\n ....\n 2539  int GHOST_X11_ApplicationIOErrorHandler(Display * /*display*/)\n 2540  {\n 2541:   GHOST_ISystem *system = GHOST_ISystem::getSystem();\n 2542    if (!system->isDebugEnabled()) {\n 2543      return 0;\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemX11.h:\n   78    /**\n   79     * Constructor\n   80:    * this class should only be instantiated by GHOST_ISystem.\n   81     */\n   82  \n   ..\n   91  \n   92    /**\n   93:    * \\section Interface Inherited from GHOST_ISystem\n   94     */\n   95  \n   ..\n  269  \n  270    /**\n  271:    * \\see GHOST_ISystem\n  272     */\n  273    int toggleConsole(int /*action*/)\n\n/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/test/gears/GHOST_Test.cpp:\n   48  #include \"GHOST_IEvent.h\"\n   49  #include \"GHOST_IEventConsumer.h\"\n   50: #include \"GHOST_ISystem.h\"\n   51  \n   52  #define LEFT_EYE 0\n   ..\n   60  static GLfloat view_rotx = 20.0, view_roty = 30.0, view_rotz = 0.0;\n   61  static GLfloat fAngle = 0.0;\n   62: static GHOST_ISystem *fSystem = 0;\n   63  \n   64  void StereoProjection(float left,\n   ..\n  398  class Application : public GHOST_IEventConsumer {\n  399   public:\n  400:   Application(GHOST_ISystem *system);\n  401    ~Application(void);\n  402    virtual bool processEvent(GHOST_IEvent *event);\n  403  \n  404:   GHOST_ISystem *m_system;\n  405    GHOST_IWindow *m_mainWindow;\n  406    GHOST_IWindow *m_secondaryWindow;\n  ...\n  413  };\n  414  \n  415: Application::Application(GHOST_ISystem *system)\n  416      : m_system(system),\n  417        m_mainWindow(0),\n  ...\n  705  \n  706    // Create the system\n  707:   GHOST_ISystem::createSystem();\n  708:   fSystem = GHOST_ISystem::getSystem();\n  709  \n  710    if (fSystem) {\n  ...\n  727  \n  728    // Dispose the system\n  729:   GHOST_ISystem::disposeSystem();\n  730  \n  731    return 0;\n\n147 matches across 18 files\n",
			"settings":
			{
				"buffer_size": 21815,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "#0  x11_visualinfo_from_glx (display=0x7ffff143a400, stereoVisual=false, needAlpha=false, \n    fbconfig=0x7ffff06c4450)\n    at /home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_WindowX11.cpp:131\n#1  0x0000000004246122 in GHOST_WindowX11::GHOST_WindowX11 (this=0x7ffff06c43c0, system=0x7ffff1449880, \n    display=0x7ffff143a400, title=..., left=40, top=1200, width=1720, height=920, \n    state=GHOST_kWindowStateMaximized, parentWindow=0x0, type=GHOST_kDrawingContextTypeOpenGL, \n    is_dialog=false, stereoVisual=false, exclusive=false, alphaBackground=false, is_debug=false)\n    at /home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_WindowX11.cpp:255\n#2  0x000000000423b8a4 in GHOST_SystemX11::createWindow (this=0x7ffff1449880, title=..., left=40, top=1200, \n    width=1720, height=920, state=GHOST_kWindowStateMaximized, type=GHOST_kDrawingContextTypeOpenGL, \n    glSettings=..., exclusive=false, is_dialog=false, parentWindow=0x0)\n    at /home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemX11.cpp:372\n#3  0x0000000004238270 in GHOST_CreateWindow (systemhandle=0x7ffff1449880, title=0xd5d7522 \"Blender\", \n    left=40, top=1200, width=1720, height=920, state=GHOST_kWindowStateMaximized, \n    type=GHOST_kDrawingContextTypeOpenGL, glSettings=...)\n    at /home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_C-api.cpp:165\n#4  0x00000000031394aa in wm_window_ghostwindow_add (wm=0x7ffff1722808, title=0xd5d7522 \"Blender\", \n    win=0x7ffff06cd888, is_dialog=false)\n    at /home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_window.c:613\n#5  0x0000000003139779 in wm_window_ghostwindow_ensure (wm=0x7ffff1722808, win=0x7ffff06cd888, \n    is_dialog=false)\n    at /home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_window.c:710\n#6  0x00000000031399eb in wm_window_ghostwindows_ensure (wm=0x7ffff1722808)\n    at /home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_window.c:789\n#7  0x00000000030fdf2d in WM_check (C=0x7ffff708eb88)\n    at /home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm.c:318\n#8  0x00000000031112dd in wm_homefile_read (C=0x7ffff708eb88, reports=0x0, use_factory_settings=false, \n    use_empty_data=false, use_data=true, use_userdef=true, filepath_startup_override=0x0, \n    app_template_override=0x0, r_is_factory_startup=0x7fffffffd98d)\n    at /home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_files.c:1050\n#9  0x000000000311a62f in WM_init (C=0x7ffff708eb88, argc=1, argv=0x7fffffffdaf8)\n    at /home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_init_exit.c:295\n#10 0x0000000002c49f2d in main (argc=1, argv=0x7fffffffdaf8)\n    at /home/ravenskrag/Code/Source/blender-git/blender/source/creator/creator.c:449\n",
			"settings":
			{
				"buffer_size": 2947,
				"line_ending": "Unix",
				"name": "#0  x11_visualinfo_from_glx (display=0x7ffff143a40"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_ISystem.cpp",
			"settings":
			{
				"buffer_size": 2795,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/cycles/render/colorspace.cpp",
			"settings":
			{
				"buffer_size": 12248,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/editors/interface/interface_widgets.c",
			"settings":
			{
				"buffer_size": 159591,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import bpy\nimport bgl\n\nfrom bpy.props import (StringProperty,\n                       BoolProperty,\n                       IntProperty,\n                       FloatProperty,\n                       EnumProperty,\n                       )\n\nclass RubyOF(bpy.types.RenderEngine):\n    # These three members are used by blender to set up the\n    # RenderEngine; define its internal name, visible name and capabilities.\n    bl_idname = \"RUBYOF\"\n    bl_label = \"RubyOF\"\n    bl_use_preview = True\n\n    # Init is called whenever a new render engine instance is created. Multiple\n    # instances may exist at the same time, for example for a viewport and final\n    # render.\n    def __init__(self):        \n        self.scene_data = None\n        self.draw_data = None\n\n    # When the render engine instance is destroy, this is called. Clean up any\n    # render engine data here, for example stopping running render threads.\n    def __del__(self):\n        pass\n\n    # This is the method called by Blender for both final renders (F12) and\n    # small preview for materials, world and lights.\n    def render(self, depsgraph):\n        scene = depsgraph.scene\n        scale = scene.render.resolution_percentage / 100.0\n        self.size_x = int(scene.render.resolution_x * scale)\n        self.size_y = int(scene.render.resolution_y * scale)\n\n        # Fill the render result with a flat color. The framebuffer is\n        # defined as a list of pixels, each pixel itself being a list of\n        # R,G,B,A values.\n        if self.is_preview:\n            color = [0.1, 0.2, 0.1, 1.0]\n        else:\n            color = [0.2, 0.1, 0.1, 1.0]\n\n        pixel_count = self.size_x * self.size_y\n        rect = [color] * pixel_count\n\n        # Here we write the pixel values to the RenderResult\n        result = self.begin_result(0, 0, self.size_x, self.size_y)\n        layer = result.layers[0].passes[\"Combined\"]\n        layer.rect = rect\n        self.end_result(result)\n\n    # For viewport renders, this method gets called once at the start and\n    # whenever the scene or 3D viewport changes. This method is where data\n    # should be read from Blender in the same thread. Typically a render\n    # thread will be started to do the work while keeping Blender responsive.\n    def view_update(self, context, depsgraph):\n        region = context.region\n        view3d = context.space_data\n        scene = depsgraph.scene\n\n        # Get viewport dimensions\n        dimensions = region.width, region.height\n\n        if not self.scene_data:\n            # First time initialization\n            self.scene_data = []\n            first_time = True\n\n            # Loop over all datablocks used in the scene.\n            for datablock in depsgraph.ids:\n                pass\n        else:\n            first_time = False\n\n            # Test which datablocks changed\n            for update in depsgraph.updates:\n                print(\"Datablock updated: \", update.id.name)\n\n            # Test if any material was added, removed or changed.\n            if depsgraph.id_type_updated('MATERIAL'):\n                print(\"Materials updated\")\n\n        # Loop over all object instances in the scene.\n        if first_time or depsgraph.id_type_updated('OBJECT'):\n            for instance in depsgraph.object_instances:\n                pass\n\n    # For viewport renders, this method is called whenever Blender redraws\n    # the 3D viewport. The renderer is expected to quickly draw the render\n    # with OpenGL, and not perform other expensive work.\n    # Blender will draw overlays for selection and editing on top of the\n    # rendered image automatically.\n    def view_draw(self, context, depsgraph):\n        region = context.region\n        scene = depsgraph.scene\n\n        # Get viewport dimensions\n        dimensions = region.width, region.height\n\n        # Bind shader that converts from scene linear to display space,\n        bgl.glEnable(bgl.GL_BLEND)\n        bgl.glBlendFunc(bgl.GL_ONE, bgl.GL_ONE_MINUS_SRC_ALPHA)\n        self.bind_display_space_shader(scene)\n\n        if not self.draw_data or self.draw_data.dimensions != dimensions:\n            self.draw_data = CustomDrawData(dimensions, context)\n\n        self.draw_data.draw()\n\n        self.unbind_display_space_shader()\n        bgl.glDisable(bgl.GL_BLEND)\n\n\nclass CustomDrawData:\n    def __init__(self, dimensions, context):\n        self.context = context\n        \n        # Generate dummy float image buffer\n        self.dimensions = dimensions\n        width, height = dimensions\n\n        pixels = [0.1, 0.2, 0.1, 1.0] * width * height\n        pixels = bgl.Buffer(bgl.GL_FLOAT, width * height * 4, pixels)\n\n        # Generate texture\n        self.texture = bgl.Buffer(bgl.GL_INT, 1)\n        bgl.glGenTextures(1, self.texture)\n        bgl.glActiveTexture(bgl.GL_TEXTURE0)\n        bgl.glBindTexture(bgl.GL_TEXTURE_2D, self.texture[0])\n        bgl.glTexImage2D(bgl.GL_TEXTURE_2D, 0, bgl.GL_RGBA16F, width, height, 0, bgl.GL_RGBA, bgl.GL_FLOAT, pixels)\n        bgl.glTexParameteri(bgl.GL_TEXTURE_2D, bgl.GL_TEXTURE_MIN_FILTER, bgl.GL_LINEAR)\n        bgl.glTexParameteri(bgl.GL_TEXTURE_2D, bgl.GL_TEXTURE_MAG_FILTER, bgl.GL_LINEAR)\n        bgl.glBindTexture(bgl.GL_TEXTURE_2D, 0)\n\n        # Bind shader that converts from scene linear to display space,\n        # use the scene's color management settings.\n        shader_program = bgl.Buffer(bgl.GL_INT, 1)\n        bgl.glGetIntegerv(bgl.GL_CURRENT_PROGRAM, shader_program)\n\n        # Generate vertex array\n        self.vertex_array = bgl.Buffer(bgl.GL_INT, 1)\n        bgl.glGenVertexArrays(1, self.vertex_array)\n        bgl.glBindVertexArray(self.vertex_array[0])\n\n        texturecoord_location = bgl.glGetAttribLocation(shader_program[0], \"texCoord\")\n        position_location = bgl.glGetAttribLocation(shader_program[0], \"pos\")\n\n        bgl.glEnableVertexAttribArray(texturecoord_location)\n        bgl.glEnableVertexAttribArray(position_location)\n\n        # Generate geometry buffers for drawing textured quad\n        position = [0.0, 0.0, width, 0.0, width, height, 0.0, height]\n        position = bgl.Buffer(bgl.GL_FLOAT, len(position), position)\n        texcoord = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]\n        texcoord = bgl.Buffer(bgl.GL_FLOAT, len(texcoord), texcoord)\n\n        self.vertex_buffer = bgl.Buffer(bgl.GL_INT, 2)\n\n        bgl.glGenBuffers(2, self.vertex_buffer)\n        bgl.glBindBuffer(bgl.GL_ARRAY_BUFFER, self.vertex_buffer[0])\n        bgl.glBufferData(bgl.GL_ARRAY_BUFFER, 32, position, bgl.GL_STATIC_DRAW)\n        bgl.glVertexAttribPointer(position_location, 2, bgl.GL_FLOAT, bgl.GL_FALSE, 0, None)\n\n        bgl.glBindBuffer(bgl.GL_ARRAY_BUFFER, self.vertex_buffer[1])\n        bgl.glBufferData(bgl.GL_ARRAY_BUFFER, 32, texcoord, bgl.GL_STATIC_DRAW)\n        bgl.glVertexAttribPointer(texturecoord_location, 2, bgl.GL_FLOAT, bgl.GL_FALSE, 0, None)\n\n        bgl.glBindBuffer(bgl.GL_ARRAY_BUFFER, 0)\n        bgl.glBindVertexArray(0)\n\n    def __del__(self):\n        bgl.glDeleteBuffers(2, self.vertex_buffer)\n        bgl.glDeleteVertexArrays(1, self.vertex_array)\n        bgl.glBindTexture(bgl.GL_TEXTURE_2D, 0)\n        bgl.glDeleteTextures(1, self.texture)\n\n    def draw(self):\n        a = self.context.scene.my_custom_props.alpha\n        bgl.glClearColor(0*a,0*a,0*a,a)\n        bgl.glClear(bgl.GL_COLOR_BUFFER_BIT|bgl.GL_DEPTH_BUFFER_BIT)\n#        bgl.glActiveTexture(bgl.GL_TEXTURE0)\n#        bgl.glBindTexture(bgl.GL_TEXTURE_2D, self.texture[0])\n#        bgl.glBindVertexArray(self.vertex_array[0])\n#        bgl.glDrawArrays(bgl.GL_TRIANGLE_FAN, 0, 4)\n#        bgl.glBindVertexArray(0)\n#        bgl.glBindTexture(bgl.GL_TEXTURE_2D, 0)\n\n\n\n\n\n\n#\n# Properties\n#\n\nclass RubyOF_Properties(bpy.types.PropertyGroup):\n    my_bool: BoolProperty(\n        name=\"Enable or Disable\",\n        description=\"A bool property\",\n        default = False\n        )\n        \n    my_float: FloatProperty(\n        name = \"Float Value\",\n        description = \"A float property\",\n        default = 23.7,\n        min = 0.01,\n        max = 30.0\n        )\n        \n    my_pointer: bpy.props.PointerProperty(type=bpy.types.Object)\n    \n    alpha: FloatProperty(\n        name = \"Alpha\",\n        description = \"Alpha transparency for the window\",\n        default = 0.25,\n        min = 0.0,\n        max = 1.0\n        )\n        \n    b_windowLink: BoolProperty(\n        name=\"window link\",\n        description=\"Automatically reposition and resize the RubyOF window to be directly under the Blender 3D view.\",\n        default = False\n        )\n    \n    camera: bpy.props.PointerProperty(\n        type=bpy.types.Camera,\n        name=\"camera\",\n        description=\"Camera to be used by the RubyOF game engine\")\n\n\n#\n# Panel for properties (under Render Properties tab)\n#\nclass RubyOF_PropertiesPanel(bpy.types.Panel):\n    COMPAT_ENGINES= {\"RUBYOF\"}\n    \n    bl_idname = \"RUBYOF_PT_HELLOWORLD\"\n    bl_label = \"Properties (custom renderer)\"\n    bl_region_type = 'WINDOW'\n    bl_context = \"render\"\n    bl_space_type = 'PROPERTIES'\n    \n    # poll allows panel to only be shown in certain contexts (ie, when the function returns true)\n    # Here, we check to make sure that the active render engine is in the list of compatible engines.\n    @classmethod\n    def poll(cls, context):\n        print(context.engine)\n        return (context.engine in cls.COMPAT_ENGINES)\n    \n    def draw(self, context):\n        # self.layout.label(text=\"Hello World\")\n        \n        # self.layout.prop(context.scene.my_custom_props, \"my_bool\")\n        # self.layout.prop(context.scene.my_custom_props, \"my_float\")\n        # self.layout.prop(context.scene.my_custom_props, \"my_pointer\")\n        \n        # self.layout.label(text=\"Real Data Below\")\n        self.layout.prop(context.scene.my_custom_props, \"alpha\")\n        self.layout.prop(context.scene.my_custom_props, \"b_windowLink\")\n        self.layout.prop(context.scene.my_custom_props, \"camera\")\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n# RenderEngines also need to tell UI Panels that they are compatible with.\n# We recommend to enable all panels marked as BLENDER_RENDER, and then\n# exclude any panels that are replaced by custom panels registered by the\n# render engine, or that are not supported.\ndef get_panels():\n    exclude_panels = {\n        'VIEWLAYER_PT_filter',\n        'VIEWLAYER_PT_layer_passes',\n    }\n    \n    panels = []\n    for panel in bpy.types.Panel.__subclasses__():\n        if hasattr(panel, 'COMPAT_ENGINES') and 'BLENDER_RENDER' in panel.COMPAT_ENGINES:\n            if panel.__name__ not in exclude_panels:\n                panels.append(panel)\n    \n    return panels\n\nclasses = (\n    RubyOF_Properties,\n    RubyOF_PropertiesPanel\n)\n\ndef register():\n    # Register the RenderEngine\n    bpy.utils.register_class(RubyOF)\n    \n    for panel in get_panels():\n        panel.COMPAT_ENGINES.add('RUBYOF')\n    \n    \n    \n    for c in classes:\n        bpy.utils.register_class(c)\n    \n    # Bind variable for properties\n    bpy.types.Scene.my_custom_props = bpy.props.PointerProperty(type=RubyOF_Properties)\n    \n\n\ndef unregister():\n    bpy.utils.unregister_class(RubyOF)\n    \n    for panel in get_panels():\n        if 'RUBYOF' in panel.COMPAT_ENGINES:\n            panel.COMPAT_ENGINES.remove('RUBYOF')\n    \n    for c in classes:\n        bpy.utils.unregister_class(c)\n    \n\n\nif __name__ == \"__main__\":\n    print(\"hello world\")\n    register()",
			"settings":
			{
				"buffer_size": 11317,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/blenkernel/intern/context.c",
			"settings":
			{
				"buffer_size": 33740,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/makesrna/intern/rna_space.c",
			"settings":
			{
				"buffer_size": 289194,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/makesrna/intern/rna_screen.c",
			"settings":
			{
				"buffer_size": 25158,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/release/scripts/startup/bl_ui/properties_render.py",
			"settings":
			{
				"buffer_size": 21644,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/blender/release/scripts/startup/bl_ui/properties_data_camera.py",
			"settings":
			{
				"buffer_size": 18101,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 381.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"syntax c",
				"Set Syntax: C"
			],
			[
				"ruby",
				"Set Syntax: Ruby"
			],
			[
				"matalb",
				"Set Syntax: MATLAB"
			],
			[
				"prefer",
				"Preferences: Settings"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"len",
				"Deviot: Line Endings"
			],
			[
				"bash",
				"Set Syntax: Bourne Again Shell (bash)"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"mata",
				"Set Syntax: MATLAB"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"remove pack",
				"Package Control: Remove Package"
			],
			[
				"gig",
				"Git GUI Clients: Gitg"
			],
			[
				"text",
				"Set Syntax: Plain Text"
			],
			[
				"theem",
				"UI: Select Theme"
			],
			[
				"m",
				"Monokai Pro: select theme"
			],
			[
				"mo",
				"Monokai Pro: select theme"
			],
			[
				"monk",
				"Monokai Pro: select theme"
			],
			[
				"package dis",
				"Package Control: Disable Package"
			],
			[
				"ori below",
				"Origami: Create Pane Below"
			],
			[
				"ori pan eri",
				"Origami: Create Pane on the Right"
			],
			[
				"ori dest",
				"Origami: Destroy Pane on the Left"
			],
			[
				"ori",
				"Origami: Destroy Pane Below"
			],
			[
				"ori de",
				"Origami: Destroy Current Pane"
			],
			[
				"origa pane le",
				"Origami: Create Pane on the Left"
			],
			[
				"rub",
				"SublimeREPL: Ruby"
			],
			[
				"gitg",
				"Git GUI Clients: Gitg"
			],
			[
				"g",
				"Git GUI Clients: Gitg"
			],
			[
				"view as",
				"SublimeHighlight: view as HTML"
			],
			[
				"convert to html",
				"SublimeHighlight: convert to HTML"
			],
			[
				"convert",
				"SublimeHighlight: convert to RTF"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"packge remove",
				"Package Control: Remove Package"
			],
			[
				"list ",
				"Package Control: List Packages"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"enable ",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"add repo",
				"Package Control: Add Repository"
			],
			[
				"packgae",
				"Package Control: List Packages"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"gitgui",
				"Git GUI Clients: Gitg"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"makefil",
				"Set Syntax: Makefile"
			],
			[
				"ging",
				"Git GUI Clients: Gitg"
			],
			[
				"yam",
				"Set Syntax: YAML"
			],
			[
				"pacage",
				"Package Control: Enable Package"
			],
			[
				"amke",
				"Set Syntax: Makefile"
			],
			[
				"makefile",
				"Set Syntax: Makefile"
			],
			[
				"c++",
				"Set Syntax: Objective-C++"
			],
			[
				"objec",
				"Set Syntax: Objective-C"
			],
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"makef",
				"Set Syntax: Makefile"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"irb",
				"SublimeREPL: Ruby IRB (deprecated)"
			],
			[
				"ruby ",
				"SublimeREPL: Ruby"
			],
			[
				"r oc",
				"SublimeREPL: Octave"
			],
			[
				"repl o",
				"SublimeREPL: Octave"
			],
			[
				"octav",
				"SublimeREPL: Octave"
			],
			[
				"repl ruby",
				"SublimeREPL: Ruby"
			],
			[
				"repl ru",
				"SublimeREPL: Ruby"
			],
			[
				"repl",
				"SublimeREPL: Octave"
			],
			[
				"repl rub",
				"SublimeREPL: Ruby"
			],
			[
				"repl j",
				"SublimeREPL: Clojure"
			],
			[
				"mal",
				"Set Syntax: MATLAB"
			],
			[
				"matl",
				"Set Syntax: MATLAB"
			],
			[
				"keyb",
				"Preferences: Key Bindings - User"
			],
			[
				"mat",
				"Set Syntax: MATLAB"
			],
			[
				"package en",
				"Package Control: Upgrade Package"
			],
			[
				"matlab",
				"Set Syntax: MATLAB"
			],
			[
				"repl oca",
				"SublimeREPL: Octave"
			],
			[
				"repl octa",
				"SublimeREPL: Octave"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"todo",
				"Show TODOs: Project and open files"
			],
			[
				"pla",
				"Set Syntax: Plain Text"
			],
			[
				"tod",
				"Show TODOs: Project and open files"
			],
			[
				"to",
				"Show TODOs: Project and open files"
			],
			[
				"",
				"About"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"log",
				"Git: Log Current File"
			],
			[
				"st",
				"Git: Status"
			],
			[
				"stat",
				"Git: Status"
			],
			[
				"pre",
				"Markdown Preview: preview in Browser"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pr",
				"Markdown Preview: preview in Browser"
			],
			[
				"previe",
				"Markdown Preview: preview in Browser"
			],
			[
				"snipp",
				"Snippet: if … end"
			],
			[
				"snip",
				"Snippet: YAML.load(file)"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"vie",
				"Markdown Preview: preview in Browser"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"reve",
				"File: Revert"
			],
			[
				"markdown",
				"Markdown Preview: preview in Sublime Text"
			],
			[
				"view",
				"Markdown Preview: preview in Browser"
			],
			[
				"prev",
				"Markdown Preview: preview in Browser"
			],
			[
				"smark",
				"Set Syntax: Markdown"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"bro",
				"Preferences: Browse Packages"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"fet",
				"Git: Fetch"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"syntax te",
				"Set Syntax: Textile"
			],
			[
				"lo",
				"Git: Log All"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"oto",
				"Show TODOs: Open files only"
			],
			[
				"show",
				"Show TODOs: Project and open files"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"pcaka",
				"Package Control: Install Package"
			],
			[
				"pcak",
				"Package Control: Discover Packages"
			],
			[
				"anno",
				"Git: Toggle Annotations"
			]
		],
		"width": 1017.0
	},
	"console":
	{
		"height": 259.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/home/ravenskrag/Downloads/context.c",
		"/home/ravenskrag/Code/Source/blender/intern/ghost/intern/GHOST_C-api.cpp",
		"/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemX11.h",
		"/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_C-api.h",
		"/home/ravenskrag/Code/Source/blender/intern/ghost/intern/GHOST_System.h",
		"/home/ravenskrag/Code/Source/blender/intern/ghost/GHOST_Types.h",
		"/home/ravenskrag/Code/Source/blender/intern/ghost/intern/GHOST_System.cpp",
		"/home/ravenskrag/Code/Source/blender/intern/ghost/intern/GHOST_SystemX11.cpp",
		"/home/ravenskrag/Code/Source/blender/intern/ghost/intern/GHOST_WindowX11.cpp",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200924c/matlabScript_ga.o3183276",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/edgeDetection.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp10_test_newShapeMetrics.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/ruby_exp10 _descriptiveModel.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/isTimeToSave.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200924c_vids2/matlabScript_ga.o3191873",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200924c_vids2/matlabScript_ga.o3191874",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200924c_vids2/matlabScript_ga.o3191875",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/plotImage.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp9_test_descriptiveModel.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200924b_vids/ruby_exp9_renderVids.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200914a/matlabScript_ga.o3150224",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200911_vids1/matlabScript_ga.o3146748",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/transcode.sh",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/plotSimulation.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200910_vids3/matlabScript_ga.o3146540",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200824_vids001/matlabScript_ga.o3136301",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200824_vids001/matlabScript_ga.o3136300",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200818ga_b1/matlabScript_ga.o3134797",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp9_plotChromosome.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp9_videoForChromosome.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp9_plotChromosomes.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200625a_randscan/baseline/runSimulation.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/runRubyScan",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200625a_randscan_original/ruby_exp8_parameterScan.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200625a_randscan_original/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200721ga_c/20200721ga_c/matlabScript_ga.o3035349",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200723ga_d/matlabScript_ga.o3036241",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/matlabScript",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp8_plotManyTrajectories.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/runMatlabGA",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200625a_randscan/20200625a0/matlabScript",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/ruby_exp8_parameterScan.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/matlabScript_ga",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/prototypes/prototype_geneticAlgo.m",
		"/home/ravenskrag/.config/sublime-merge/Packages/User/Preferences.sublime-settings",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200528a_randscan/ruby_exp8_parameterScan.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200526d_randscan_data/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200525f_randscan/ruby_scan_2992435.log",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/ruby_lib/utils.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200526d_randscan/20200526d36/matlabScript.20200526d36.o2992939",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200526a_randscan/20200526a59/matlabScript.20200526a59.o2992752",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/prepTakiUpload.sh",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/ruby_prepTakiUpload.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/test_fitness_metric.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200416a_various/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/planarianBoundingBox.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200422b_various/ruby_exp8_parameterScan.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/plotSpatialVar.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp8_plotSingleTrajectory.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/test_aabb_code.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200403b2_various/ruby_exp8_parameterScan.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200416a_various/ruby_exp8_parameterScan.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402b_various/20200402b7/matlabScript.20200402b7.o2966663",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200403b_various/planarianBoundingBox.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402b_various/20200402b0/planarianBoundingBox.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402b_various/20200402b7/planarianBoundingBox.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402b_various/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402c_various/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200311b_various/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402e_various/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402e_various/20200402e0/exp8_poles_morphogenCaps.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402e_various/ruby_exp8_parameterScan.rb",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200402d_various/patch_parameters.log.txt",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200311b_various/baseline/runSimulation.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200311b_various/20200311b0/exp8_poles_morphogenCaps.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200311b_various/20200311b0/matlabScript.20200311b0.o2942014",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200311b_various/20200311b16/exp8_poles_morphogenCaps.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/taki_mirror/20200311b_various/20200311b16/matlabScript.20200311b16.o2942030",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/exp2_ellipseToMidline.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/runSimulation.m",
		"/home/ravenskrag/Documents/Schedule and Todos/workFromHome_code/current/ruby_exp8_batchRenderGraph.rb",
		"/home/ravenskrag/Applications/MATLAB/R2018b/help/includes/shared/equationrenderer/release/images/apple-icons/apple-touch-icon-144x144.png",
		"/home/ravenskrag/.local/bin/matlab",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/OscilatorBank.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/utils.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/MIDIUSB/src/MIDIUSB_Defs.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/MIDIUSB/src/MIDIUSB.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/MIDIUSB/src/MIDIUSB.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/tuningOffsetSerialization.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthTuning.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/hexDump.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Audio_-_Adafruit_Fork/mixer.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthView_PlayerView.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/constants.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/note_constants.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthView_MIDIPlaybackView.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthView_SelectorView.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthView_TunerView.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthView_SelectorView.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthView_PlayerView.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/SynthView_TunerView.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/error.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/hexDump.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/error.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/pixelFont.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/tuningOffsetSerialization.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar03a-saveToSPI/sketch_mar03a-saveToSPI.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Audio_-_Adafruit_Fork/synth_waveform.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Audio_-_Adafruit_Fork/keywords.txt",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_ADXL343/Adafruit_ADXL343.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_SPIFlash/examples/flash_sector_dump/flash_sector_dump.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_SPIFlash/examples/flash_info/flash_info.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_SPIFlash/examples/flash_manipulator/flash_manipulator.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar13a-synthWithMenu_zzz/sketch_mar13a-synthWithMenu_part001.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar13a-synthWithMenu_zzz/sketch_mar13a-synthWithMenu_zzz.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/sketch_mar08a-synthWithMenu/sketch_mar08a-synthWithMenu.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoTrellis_M4_Library/Adafruit_NeoTrellisM4.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_SPIFlash/examples/flash_erase/flash_erase.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_SPIFlash/src/Adafruit_SPIFlash.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_SPIFlash/src/Adafruit_SPIFlash.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_SPIFlash/src/flash_devices.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoTrellis_M4_Library/examples/sixteen_step_sequencer/sampler.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoTrellis_M4_Library/examples/sixteen_step_sequencer/sampler.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoTrellis_M4_Library/examples/sixteen_step_sequencer/recorder.cpp",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoTrellis_M4_Library/examples/sixteen_step_sequencer/recorder.h",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoTrellis_M4_Library/examples/sixteen_step_sequencer/sixteen_step_sequencer.ino",
		"/home/ravenskrag/Code/Arduino/sketchbook/libraries/Adafruit_NeoTrellis_M4_Library/examples/sixteen_step_sequencer/controls.cpp"
	],
	"find":
	{
		"height": 104.0
	},
	"find_in_files":
	{
		"height": 264.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"GHOST_ISystem",
			"GHOST_CreateWindow",
			"'RubyOF'",
			"RUBYOF",
			"COMPAT_ENGINES",
			"'CUSTOM'",
			"\"CUSTOM\"",
			"custom",
			"pass",
			"BCONTEXT_",
			"sampl",
			"eevee",
			"\"render\"",
			"render",
			"bl_context",
			"_PT_",
			"CustomRenderEngine",
			"color",
			"fbconfig",
			"factory",
			"createwindow",
			"alphabackground",
			"beginFullScreen",
			"alpha",
			"beginFullScreen",
			"beginfull",
			"beginFullScreen",
			"createFullScreenWindow",
			"alphaBackground",
			"GHOST_glAlphaBackground",
			"GHOST_GLSettings",
			"GHOST_glAlphaBackground",
			"GHOST_WindowX11",
			"alphaBackground",
			"x11_visualinfo_from_glx",
			"alpha",
			"visual",
			"pict_format",
			"alpha",
			"fbconfigs",
			"info",
			"CWBorderPixel",
			"CWColormap",
			"pict_format",
			"0.2",
			"USE_GLX_CREATE_CONTEXT_ATTRIB",
			"isExtensionSupported",
			"StateHint",
			"visual",
			"pict_format",
			"alpha",
			"pict_format",
			"describe_fbconfig",
			"alpha",
			"numfbconfigs",
			"pict_format",
			"xrenderpi",
			"xrenderpic"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 17,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/ravenskrag/Code/Source/datenwolf_codesamples/samples/OpenGL/x11argb_opengl/x11argb_opengl.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12827,
						"regions":
						{
						},
						"selection":
						[
							[
								1410,
								1410
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 558.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1396,
						"regions":
						{
						},
						"selection":
						[
							[
								820,
								820
							]
						],
						"settings":
						{
							"auto_name": "#include <X11/Xlib.h>",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1394,
										1395
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										79,
										80
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1119.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_WindowX11.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51171,
						"regions":
						{
						},
						"selection":
						[
							[
								1231,
								1231
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 26.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_WindowX11.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7739,
						"regions":
						{
						},
						"selection":
						[
							[
								2591,
								2591
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2871,
										2872
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										2201,
										2202
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/.clang-format",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7300,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_SystemX11.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88321,
						"regions":
						{
						},
						"selection":
						[
							[
								10460,
								10460
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										10628,
										10629
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										9916,
										9917
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10661.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_System.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11340,
						"regions":
						{
						},
						"selection":
						[
							[
								9631,
								9631
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										9900,
										9901
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										9631,
										9632
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10568.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/GHOST_Types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18210,
						"regions":
						{
						},
						"selection":
						[
							[
								1257,
								1257
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_System.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13353,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_C-api.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29273,
						"regions":
						{
						},
						"selection":
						[
							[
								5551,
								5551
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5553,
										5554
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										5537,
										5538
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4296.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/windowmanager/intern/wm_window.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72005,
						"regions":
						{
						},
						"selection":
						[
							[
								17676,
								17676
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										18088,
										18089
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										17676,
										17677
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18721.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21815,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										245,
										263
									],
									[
										569,
										587
									],
									[
										929,
										947
									],
									[
										1145,
										1163
									],
									[
										1443,
										1461
									],
									[
										1664,
										1682
									],
									[
										1842,
										1860
									],
									[
										2136,
										2154
									],
									[
										2431,
										2449
									],
									[
										2700,
										2718
									],
									[
										3018,
										3036
									],
									[
										3496,
										3509
									],
									[
										3530,
										3543
									],
									[
										3698,
										3711
									],
									[
										3723,
										3736
									],
									[
										3974,
										3987
									],
									[
										4035,
										4048
									],
									[
										4362,
										4375
									],
									[
										4556,
										4569
									],
									[
										4910,
										4923
									],
									[
										5087,
										5100
									],
									[
										5209,
										5222
									],
									[
										5430,
										5443
									],
									[
										5555,
										5568
									],
									[
										5724,
										5737
									],
									[
										5880,
										5893
									],
									[
										5988,
										6001
									],
									[
										6099,
										6112
									],
									[
										6277,
										6290
									],
									[
										6407,
										6420
									],
									[
										6575,
										6588
									],
									[
										6736,
										6749
									],
									[
										6863,
										6876
									],
									[
										6984,
										6997
									],
									[
										7283,
										7296
									],
									[
										7536,
										7549
									],
									[
										7597,
										7610
									],
									[
										7856,
										7869
									],
									[
										8016,
										8029
									],
									[
										8056,
										8069
									],
									[
										8080,
										8093
									],
									[
										8273,
										8286
									],
									[
										8298,
										8311
									],
									[
										8481,
										8494
									],
									[
										8506,
										8519
									],
									[
										8678,
										8691
									],
									[
										8703,
										8716
									],
									[
										8940,
										8953
									],
									[
										8965,
										8978
									],
									[
										9147,
										9160
									],
									[
										9172,
										9185
									],
									[
										9412,
										9425
									],
									[
										9437,
										9450
									],
									[
										9648,
										9661
									],
									[
										9673,
										9686
									],
									[
										9842,
										9855
									],
									[
										9867,
										9880
									],
									[
										10053,
										10066
									],
									[
										10078,
										10091
									],
									[
										10285,
										10298
									],
									[
										10310,
										10323
									],
									[
										10527,
										10540
									],
									[
										10552,
										10565
									],
									[
										10756,
										10769
									],
									[
										10781,
										10794
									],
									[
										10981,
										10994
									],
									[
										11006,
										11019
									],
									[
										11207,
										11220
									],
									[
										11232,
										11245
									],
									[
										11453,
										11466
									],
									[
										11478,
										11491
									],
									[
										11676,
										11689
									],
									[
										11701,
										11714
									],
									[
										11898,
										11911
									],
									[
										11923,
										11936
									],
									[
										12090,
										12103
									],
									[
										12115,
										12128
									],
									[
										12305,
										12318
									],
									[
										12330,
										12343
									],
									[
										12531,
										12544
									],
									[
										12556,
										12569
									],
									[
										12740,
										12753
									],
									[
										12765,
										12778
									],
									[
										13006,
										13019
									],
									[
										13031,
										13044
									],
									[
										13248,
										13261
									],
									[
										13273,
										13286
									],
									[
										13448,
										13461
									],
									[
										13473,
										13486
									],
									[
										13645,
										13658
									],
									[
										13670,
										13683
									],
									[
										13842,
										13855
									],
									[
										13867,
										13880
									],
									[
										14033,
										14046
									],
									[
										14057,
										14070
									],
									[
										14248,
										14261
									],
									[
										14273,
										14286
									],
									[
										14426,
										14439
									],
									[
										14450,
										14463
									],
									[
										14627,
										14640
									],
									[
										14651,
										14664
									],
									[
										14805,
										14818
									],
									[
										14829,
										14842
									],
									[
										14976,
										14989
									],
									[
										15000,
										15013
									],
									[
										15151,
										15164
									],
									[
										15175,
										15188
									],
									[
										15388,
										15401
									],
									[
										15482,
										15495
									],
									[
										15497,
										15510
									],
									[
										15559,
										15572
									],
									[
										15676,
										15689
									],
									[
										15796,
										15809
									],
									[
										15811,
										15824
									],
									[
										16038,
										16051
									],
									[
										16123,
										16136
									],
									[
										16143,
										16156
									],
									[
										16215,
										16228
									],
									[
										16331,
										16344
									],
									[
										16450,
										16463
									],
									[
										16470,
										16483
									],
									[
										16676,
										16689
									],
									[
										16848,
										16861
									],
									[
										16973,
										16986
									],
									[
										17121,
										17134
									],
									[
										17155,
										17168
									],
									[
										17380,
										17393
									],
									[
										17414,
										17427
									],
									[
										17628,
										17641
									],
									[
										17662,
										17675
									],
									[
										17875,
										17888
									],
									[
										17909,
										17922
									],
									[
										18153,
										18166
									],
									[
										18307,
										18320
									],
									[
										18413,
										18426
									],
									[
										18469,
										18482
									],
									[
										18530,
										18543
									],
									[
										18632,
										18645
									],
									[
										18797,
										18810
									],
									[
										19070,
										19083
									],
									[
										19272,
										19285
									],
									[
										19342,
										19355
									],
									[
										19581,
										19594
									],
									[
										19835,
										19848
									],
									[
										19859,
										19872
									],
									[
										20044,
										20057
									],
									[
										20068,
										20081
									],
									[
										20339,
										20352
									],
									[
										20448,
										20461
									],
									[
										20527,
										20540
									],
									[
										20778,
										20791
									],
									[
										20960,
										20973
									],
									[
										21137,
										21150
									],
									[
										21264,
										21277
									],
									[
										21426,
										21439
									],
									[
										21563,
										21576
									],
									[
										21613,
										21626
									],
									[
										21727,
										21740
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								3279,
								3279
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										2407,
										2408
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"rainbowth.lispy": false,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2666.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2947,
						"regions":
						{
						},
						"selection":
						[
							[
								892,
								892
							]
						],
						"settings":
						{
							"auto_name": "#0  x11_visualinfo_from_glx (display=0x7ffff143a40",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/ghost/intern/GHOST_ISystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2795,
						"regions":
						{
						},
						"selection":
						[
							[
								1826,
								1826
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1827,
										1828
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1826,
										1827
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1981.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/intern/cycles/render/colorspace.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12248,
						"regions":
						{
						},
						"selection":
						[
							[
								2583,
								2583
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2620,
										2625
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1474,
										1479
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1860.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/editors/interface/interface_widgets.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 159591,
						"regions":
						{
						},
						"selection":
						[
							[
								11635,
								11635
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										11691,
										11692
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										11623,
										11624
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13441.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 17,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11317,
						"regions":
						{
						},
						"selection":
						[
							[
								2322,
								2322
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 1302.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/blenkernel/intern/context.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33740,
						"regions":
						{
						},
						"selection":
						[
							[
								23121,
								23121
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										23163,
										23164
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										22781,
										22782
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31452.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/makesrna/intern/rna_space.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 289194,
						"regions":
						{
						},
						"selection":
						[
							[
								13315,
								13315
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										13318,
										13319
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										13286,
										13287
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12480.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/source/blender/makesrna/intern/rna_screen.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25158,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/release/scripts/startup/bl_ui/properties_render.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21644,
						"regions":
						{
						},
						"selection":
						[
							[
								3936,
								3936
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/home/ravenskrag/Code/Source/blender-git/blender/release/scripts/startup/bl_ui/properties_data_camera.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18101,
						"regions":
						{
						},
						"selection":
						[
							[
								2496,
								2496
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1878.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 48.0
	},
	"input":
	{
		"height": 97.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.deviot":
	{
		"height": 232.0
	},
	"output.exec":
	{
		"height": 323.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 96.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "qbs debug",
	"project": "blender.sublime-project",
	"replace":
	{
		"height": 88.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"properties data camer",
				"blender/release/scripts/startup/bl_ui/properties_data_camera.py"
			],
			[
				"ghost isystem.cpp",
				"blender/intern/ghost/intern/GHOST_ISystem.cpp"
			],
			[
				"properties render",
				"blender/release/scripts/startup/bl_ui/properties_render.py"
			],
			[
				"rnascreen",
				"blender/source/blender/makesrna/intern/rna_screen.c"
			],
			[
				"rnaspace",
				"blender/source/blender/makesrna/intern/rna_space.c"
			],
			[
				"context.c",
				"blender/source/blender/blenkernel/intern/context.c"
			],
			[
				"mw window c",
				"blender/source/blender/windowmanager/intern/wm_window.c"
			],
			[
				"widget",
				"source/blender/editors/interface/interface_widgets.c"
			],
			[
				"colors",
				"intern/cycles/render/colorspace.cpp"
			],
			[
				"ghost c api .cpp",
				"intern/ghost/intern/GHOST_C-api.cpp"
			],
			[
				"ghost c ap",
				"intern/ghost/GHOST_C-api.h"
			],
			[
				"ghost systemh",
				"intern/ghost/intern/GHOST_System.h"
			],
			[
				"ghost type",
				"intern/ghost/GHOST_Types.h"
			],
			[
				"ghost system",
				"intern/ghost/intern/GHOST_System.cpp"
			],
			[
				"system.cpp",
				"~/Code/Source/blender/intern/ghost/intern/GHOST_System.cpp"
			],
			[
				"systm x11",
				"intern/ghost/intern/GHOST_SystemX11.cpp"
			],
			[
				"ghost win 11",
				"intern/ghost/intern/GHOST_WindowX11.cpp"
			],
			[
				"ghost x11 window",
				"intern/ghost/intern/GHOST_WindowX11.cpp"
			],
			[
				"initial",
				"initialCondition.m"
			],
			[
				"calcb",
				"calcBorder.m"
			],
			[
				"edge",
				"edgeDetection.m"
			],
			[
				"new sha",
				"exp10_test_newShapeMetrics.m"
			],
			[
				"ex10 de",
				"ruby_exp10_descriptiveModel.rb"
			],
			[
				"istime",
				"isTimeToSave.m"
			],
			[
				"run",
				"runSimulation.m"
			],
			[
				"plotima",
				"plotImage.m"
			],
			[
				"plotimage",
				"plotImage.m"
			],
			[
				"exp9_testde",
				"exp9_test_descriptiveModel.m"
			],
			[
				"plotsim",
				"plotSimulation.m"
			],
			[
				"exp9plo",
				"exp9_plotGA.m"
			],
			[
				"vidof",
				"exp9_videoForChromosome.m"
			],
			[
				"ga vi",
				"matlabScript_ga_videos"
			],
			[
				"ex9 rend",
				"ruby_exp9_renderVids.rb"
			],
			[
				"calf",
				"calcFitness.m"
			],
			[
				"exp9 cos",
				"exp9_configureSimulation.m"
			],
			[
				"ex9 con",
				"exp9_configureProject.m"
			],
			[
				"ex9 ga",
				"exp9_geneticAlgorithm.m"
			],
			[
				"ex9 runm",
				"ruby_exp9_runMatlabGA.rb"
			],
			[
				"matlg",
				"matlabScript_ga"
			],
			[
				"matl",
				"matlabScript"
			],
			[
				"plot",
				"plotSimulation.m"
			],
			[
				"trans",
				"transcode.sh"
			],
			[
				"plotga",
				"exp9_plotGA.m"
			],
			[
				"inital",
				"initialCondition.m"
			],
			[
				"ruby exp8",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"randscan",
				"exp8_plotRandScan.m"
			],
			[
				"ploct",
				"exp9_plotChromosome.m"
			],
			[
				"plotchrom",
				"exp9_plotChromosome.m"
			],
			[
				"videoforch",
				"exp9_videoForChromosome.m"
			],
			[
				"plotrand",
				"exp8_plotRandScan.m"
			],
			[
				"matlabscriptga",
				"matlabScript_ga"
			],
			[
				"matlabsc",
				"matlabScript"
			],
			[
				"plotscan",
				"exp8_plotRandScan.m"
			],
			[
				"exp8plotma",
				"exp8_plotManyTrajectories.m"
			],
			[
				"exp9_",
				"exp9_geneticAlgorithm.m"
			],
			[
				"exp9_test",
				"exp9_test_fitnessFunction.m"
			],
			[
				"selecsv",
				"selectSpatialVars.m"
			],
			[
				"planbb",
				"planarianBoundingBox.m"
			],
			[
				"calcf",
				"calcFitness.m"
			],
			[
				"runsim",
				"runSimulation.m"
			],
			[
				"ruby_exp9",
				"ruby_exp9_runMatlabGA.rb"
			],
			[
				"ruby_exp8",
				"ruby_exp8_copyScanFiles.rb"
			],
			[
				"exp8plot",
				"exp8_plotRandScan.m"
			],
			[
				"selectspa",
				"selectSpatialVars.m"
			],
			[
				"plotsimu",
				"plotSimulation.m"
			],
			[
				"matlcs",
				"matlabScript"
			],
			[
				"ruby_ex",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"matlab",
				"matlabScript_ga"
			],
			[
				"ruby_exp",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"ruby_",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"runmatg",
				"runMatlabGA"
			],
			[
				"planbound",
				"planarianBoundingBox.m"
			],
			[
				"runsm",
				"runSimulation.m"
			],
			[
				"morc",
				"exp8_poles_morphogenCaps.m"
			],
			[
				"istim",
				"isTimeToSave.m"
			],
			[
				"ruby sca",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"plotspa",
				"plotSpatialVar.m"
			],
			[
				"timetos",
				"isTimeToSave.m"
			],
			[
				"batchrend",
				"ruby_exp8_batchRenderGraph.rb"
			],
			[
				".rb",
				"ruby_exp8_batchRenderGraph.rb"
			],
			[
				"totak",
				"~/Documents/Schedule and Todos/workFromHome_code/localToTaki.sh"
			],
			[
				"adh",
				"adhesion2morph.m"
			],
			[
				"preptak",
				"~/Documents/Schedule and Todos/workFromHome_code/prepTakiUpload.sh"
			],
			[
				"prep",
				"ruby_prepTakiUpload.rb"
			],
			[
				"scan",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"testfim",
				"test_fitness_metric.m"
			],
			[
				"planb",
				"planarianBoundingBox.m"
			],
			[
				"initai",
				"initialCondition.m"
			],
			[
				"paras",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"omc",
				"exp8_poles_morphogenCaps.m"
			],
			[
				"boub",
				"planarianBoundingBox.m"
			],
			[
				"ploet",
				"exp8_plotSingleTrajectory.m"
			],
			[
				"testa",
				"test_aabb_code.m"
			],
			[
				"render ",
				"renderFromBake.m"
			],
			[
				"plotman",
				"exp8_plotManyTrajectories.m"
			],
			[
				"planar",
				"planarianBoundingBox.m"
			],
			[
				"plots",
				"plotSpatialVar.m"
			],
			[
				"exp",
				"exp8_poles_morphogenCaps.m"
			],
			[
				"rend",
				"exp8_renderTrajectories.m"
			],
			[
				"plotmant",
				"exp8_plotManyTrajectories.m"
			],
			[
				"pra",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"boundi",
				"planarianBoundingBox.m"
			],
			[
				"praamscan",
				"ruby_exp8_parameterScan.rb"
			],
			[
				"plotspat",
				"plotSpatialVar.m"
			],
			[
				"render",
				"exp8_renderTrajectories.m"
			],
			[
				"pl",
				"plotSimulation.m"
			],
			[
				"rrun",
				"ruby_exp8_batchRenderGraph.rb"
			],
			[
				"exp8_polesm",
				"exp8_poles_morphogenCaps.m"
			],
			[
				"noteco",
				"sketchbook/sketch_mar08a-synthWithMenu/note_constants.h"
			],
			[
				"zerodma",
				"sketchbook/libraries/Adafruit_DMA_neopixel_library/Adafruit_NeoPixel_ZeroDMA.cpp"
			],
			[
				"synth_pw",
				"sketchbook/libraries/Audio_-_Adafruit_Fork/synth_pwm.cpp"
			],
			[
				"waveform",
				"sketchbook/libraries/Audio_-_Adafruit_Fork/synth_waveform.cpp"
			],
			[
				"osci",
				"sketch_mar08a-synthWithMenu/OscilatorBank.h"
			],
			[
				"midiusbde",
				"sketchbook/libraries/MIDIUSB/src/MIDIUSB_Defs.h"
			],
			[
				"midiusb",
				"sketchbook/libraries/MIDIUSB/src/MIDIUSB.h"
			],
			[
				"notec",
				"sketch_mar08a-synthWithMenu/note_constants.h"
			],
			[
				"note",
				"sketchbook/sketch_mar08a-synthWithMenu/note_constants.h"
			],
			[
				"synthwave",
				"sketchbook/libraries/Audio_-_Adafruit_Fork/synth_waveform.cpp"
			],
			[
				"aud",
				"sketchbook/libraries/Audio_-_Adafruit_Fork/Audio.h"
			],
			[
				"hex",
				"sketch_mar08a-synthWithMenu/hexDump.cpp"
			],
			[
				"error",
				"sketch_mar08a-synthWithMenu/error.h"
			],
			[
				"tune",
				"sketchbook/sketch_mar08a-synthWithMenu/SynthView_TunerView.cpp"
			],
			[
				"hexdum",
				"sketchbook/sketch_mar08a-synthWithMenu/hexDump.h"
			],
			[
				"constants",
				"sketchbook/sketch_mar08a-synthWithMenu/constants.h"
			],
			[
				"synth white",
				"sketchbook/libraries/Audio_-_Adafruit_Fork/synth_whitenoise.h"
			],
			[
				"audio.h",
				"sketchbook/libraries/Audio_-_Adafruit_Fork/Audio.h"
			],
			[
				"tuofh",
				"sketchbook/sketch_mar08a-synthWithMenu/tuningOffset.h"
			],
			[
				"synth menu",
				"sketchbook/sketch_mar08a-synthWithMenu/sketch_mar08a-synthWithMenu.ino"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/2_Personal/Current/bash_config/bash_config.sublime-project"
			],
			[
				"bash",
				"~/Projects/2_Personal/Current/bash_config/bash_config.sublime-project"
			],
			[
				"sublime",
				"~/.config/sublime-text-3/Projects/Sublime3Config.sublime-project"
			],
			[
				"th",
				"/home/ravenskrag/Documents/Sublime/ThoughtTrace.sublime-project"
			],
			[
				"ete",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"e",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"et",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"gamn",
				"/home/ravenskrag/Documents/Projects/GameDesignNotes.sublime-project"
			],
			[
				"oni",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"on",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"321",
				"/home/ravenskrag/Documents/Projects/CS321_Project.sublime-project"
			],
			[
				"go",
				"/home/ravenskrag/Documents/Projects/Gosu.sublime-project"
			],
			[
				"42",
				"/home/ravenskrag/Documents/Projects/CS425_OgreProject.sublime-project"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 488.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wrap",
				"wrap"
			],
			[
				"keyboard",
				"keyboard_cb"
			],
			[
				"key",
				"keys"
			],
			[
				"setupopeng",
				"ofSetupOpenGL"
			],
			[
				"ofsetupop",
				"ofSetupOpenGL"
			]
		],
		"width": 492.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 569.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
