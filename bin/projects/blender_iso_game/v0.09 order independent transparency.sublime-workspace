{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"men",
				"mesh_entity"
			],
			[
				"defm",
				"default_material"
			],
			[
				"active",
				"active_object"
			],
			[
				"pack",
				"update_packed_entity_positions"
			],
			[
				"mesho",
				"mesh_obj"
			],
			[
				"sini",
				"shininess"
			],
			[
				"Blender",
				"BlenderLight"
			],
			[
				"batch",
				"batch"
			],
			[
				"matr",
				"material"
			],
			[
				"meshob",
				"mesh_objects"
			],
			[
				"nodes",
				"nodes"
			],
			[
				"rot",
				"rotate_vector"
			],
			[
				"Blendhr",
				"BlenderLight"
			],
			[
				"deps",
				"depsgraph"
			],
			[
				"ent",
				"entity_names"
			],
			[
				"datab",
				"datablock"
			],
			[
				"entit",
				"entity_list"
			],
			[
				"encode",
				"encode_transform"
			],
			[
				"generate",
				"generate_mesh"
			],
			[
				"enti",
				"entity_list"
			],
			[
				"Mesh",
				"BlenderMesh"
			],
			[
				"viewpo",
				"viewport_camera"
			],
			[
				"dep",
				"depsgraph"
			],
			[
				"relo",
				"reload_instancing_shaders"
			],
			[
				"FLAT",
				"FLOAT_MAX"
			],
			[
				"magni",
				"magnitude"
			],
			[
				"magnitude",
				"magnitude_normalized"
			],
			[
				"tras",
				"transforms"
			],
			[
				"fs",
				"frag_shader_path"
			],
			[
				"pos",
				"positions"
			],
			[
				"main",
				"max_instances"
			],
			[
				"view",
				"viewport_camera"
			],
			[
				"tims",
				"timestamps"
			],
			[
				"norm",
				"normal_data"
			],
			[
				"shm",
				"shm_dir"
			],
			[
				"fifo",
				"fifo_path"
			],
			[
				"queue",
				"outbound_queue"
			],
			[
				"index",
				"index_buffer"
			],
			[
				"specul",
				"specular_color"
			],
			[
				"setpo",
				"set_point_light"
			],
			[
				"attr",
				"attr_accessor"
			],
			[
				"or",
				"orientation"
			],
			[
				"diffuse",
				"diffuse_color"
			],
			[
				"point",
				"pointLight"
			],
			[
				"mat",
				"material2"
			],
			[
				"first",
				"first_update"
			],
			[
				"ofcam",
				"of_cam"
			],
			[
				"hit",
				"hit_wm_id"
			],
			[
				"parse",
				"parse_blender_data"
			],
			[
				"camera",
				"camera_settings_file"
			],
			[
				"jso",
				"json_obj"
			],
			[
				"Wait",
				"WaitReadable"
			],
			[
				"fr",
				"f_r"
			],
			[
				"midi",
				"midi_history"
			],
			[
				"noteo",
				"note_on"
			],
			[
				"delat",
				"deltatime"
			],
			[
				"setColor",
				"setColorPickerColor"
			],
			[
				"mfrac",
				"mFrameCounter_draw"
			],
			[
				"mplott",
				"mPloter_draw_time"
			],
			[
				"widt",
				"whole_iter_dt"
			],
			[
				"charm",
				"char_mapped_display"
			],
			[
				"CP",
				"CPP_Callbacks"
			],
			[
				"grid",
				"setGridCodepoint"
			],
			[
				"_grid",
				"_textGrid"
			],
			[
				"yi",
				"y_size"
			],
			[
				"x",
				"x_size"
			],
			[
				"profiler",
				"run_profiler"
			],
			[
				"new",
				"new_msg_count"
			],
			[
				"SPIKE",
				"RB_SPIKE_PROFILER"
			],
			[
				"spike",
				"spike_profiler"
			],
			[
				"sc",
				"stack_counter"
			],
			[
				"__",
				"__FILE__"
			],
			[
				"start",
				"start_time"
			],
			[
				"size",
				"sizeof\tDeviot sizeof()"
			],
			[
				"stack",
				"stack_pointer"
			],
			[
				"mesh",
				"meshes"
			],
			[
				"meshifl",
				"meshify_line_again"
			],
			[
				"meshif",
				"meshify_line_setup"
			],
			[
				"end",
				"endl"
			],
			[
				"meshifi",
				"meshify_line_setup"
			],
			[
				"from",
				"from_ruby"
			],
			[
				"charme",
				"char_mesh_dirty"
			],
			[
				"section",
				"section_count"
			],
			[
				"upda",
				"on_update"
			],
			[
				"update",
				"update_scheduler"
			],
			[
				"bars",
				"bar_segments"
			],
			[
				"colo",
				"colors"
			],
			[
				"ofPop",
				"ofPopMatrix"
			],
			[
				"ofPush",
				"ofPushMatrix"
			],
			[
				"define",
				"define_method"
			],
			[
				"prev",
				"previous_time"
			],
			[
				"fi",
				"frame_idx"
			],
			[
				"name",
				"section_name"
			],
			[
				"time",
				"time_used_this_frame"
			],
			[
				"time_",
				"time_used_this_frame"
			],
			[
				"need",
				"need_more_time"
			],
			[
				"tot",
				"total_time_per_frame"
			],
			[
				"updat",
				"update_steps"
			],
			[
				"spr",
				"sprite"
			],
			[
				"conta",
				"contain_vect"
			],
			[
				"fgor",
				"foreground"
			],
			[
				"color",
				"color_array"
			],
			[
				"colr",
				"color_array"
			],
			[
				"flush",
				"flushColors_fg"
			],
			[
				"bg_co",
				"bg_colors"
			],
			[
				"font",
				"fonts"
			],
			[
				"ofenbl",
				"ofEnableBlendMode__wrapper"
			],
			[
				"ofP",
				"ofPopMatrix"
			],
			[
				"bottm",
				"bottom_left"
			],
			[
				"fgc",
				"fg_color"
			],
			[
				"prints",
				"print_string"
			],
			[
				"each",
				"each_with_index"
			],
			[
				"yie",
				"yielder"
			],
			[
				"Enumera",
				"Enumerator"
			],
			[
				"getcolor",
				"getColor_bg"
			],
			[
				"colbg",
				"ColorHelper_bgOnly"
			],
			[
				"getcolo",
				"getColor_bg"
			],
			[
				"helpr",
				"ColorHelper_bgANDfg"
			],
			[
				"Colo",
				"ColorHelperHelper"
			],
			[
				"Ruby",
				"RubyOF"
			],
			[
				"defi",
				"define_method"
			],
			[
				"_colo",
				"_bgColorPixels"
			],
			[
				"_fg",
				"_fgColorPixels"
			],
			[
				"charw",
				"char_width_pxs"
			],
			[
				"origi",
				"uniform__origin"
			],
			[
				"gpu",
				"text_colors_gpu"
			],
			[
				"textc",
				"text_colors_cpu"
			],
			[
				"txc",
				"text_colors_cpu"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/ravenskrag/Code/Source/blender-git/build_linux_debug/bin/2.90/scripts/startup/bl_ui/properties_material.py",
			"settings":
			{
				"buffer_size": 8992,
				"line_ending": "Unix"
			}
		},
		{
			"file": "python/__init__.py",
			"settings":
			{
				"buffer_size": 39647,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n****\nQ: How do I detect that a new material was slotted on an object?\n****\n    Is this something that can be detected from Blender alone, or does it require coordination between Blender and RubyOF?\n    what happens when material is renamed? how do those changes propagate to RubyOF?\n        probably have to just create a whole new material, because you can only access materials by name, so if the name changes, then you have no other identifier.\n        entities can be GCed by querying the list of all entities, but how do I GC materials? I suppose I need the names of all active materials...\n    what if a material is renamed s.t. the new name is already a used material name?\n    make sure similar paths for renaming meshes work as expected\n        consider both mesh objects and mesh datablocks\n                ",
			"settings":
			{
				"buffer_size": 818,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n            # loop over all objects\n            for obj in bpy.data.objects:\n                obj_data = {\n                    'name': obj.name_full,\n                    'type': obj.type,\n                }\n                \n                obj_data['transform'] = self.pack_transform(obj)\n                obj_data['data'] = obj.data.name\n                \n                obj_export.append(obj_data)\n            \n            # # loop over all objects\n            # for instance in depsgraph.object_instances:\n            #     obj = instance.object\n                \n            #     obj_data = {\n            #         'name': obj.name_full,\n            #         'type': obj.type,\n            #     }\n                \n            #     obj_data['transform'] = self.pack_transform(obj)\n            #     obj_data['data'] = obj.data.name\n                \n            #     obj_export.append(obj_data)\n            ",
			"settings":
			{
				"buffer_size": 910,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "type(bpy.data.objects['Cube'].material_slots[0].material)\n=> <class 'bpy.types.Material'>",
			"settings":
			{
				"buffer_size": 89,
				"line_ending": "Unix",
				"name": "type(bpy.data.objects['Cube'].material_slots[0].ma"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"file": "lib/blender_sync.rb",
			"settings":
			{
				"buffer_size": 16677,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/dependency_graph.rb",
			"settings":
			{
				"buffer_size": 19824,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n      \n      mesh_name = entity.mesh.name\n      mat_name = material.name # how do I get this material association?\n      batch_key = []\n      \n      @batches ||= Array.new\n      # ^ associative array of sorts??\n      #   Don't want to use a Hash, because I need mutable keys\n      #   which is not going to play well with hash equality\n      #   unless I define a new type to serve as the key...\n      \n      @batches = [\n        [[mesh1, mat1], [e1, e2, e3, e4, e5]],\n        [[mesh2, mat1], [e6, e7, e8]], # different mesh, same material\n        [[mesh1, mat3], [e9]] # same mesh as first batch, but different mat\n      ]\n      \n      \n      # it's actually a tree structure, so let's convert into a tree\n      # where only leaves store data\n      # and each leaf is an array\n      # (which is kinda 'cheating,' but whatever)\n      \n      \n      # lisp style\n      @batches = [\n        ['mat1', [ ['mesh1',[1,2,3,4,5]]\n                   ['mesh2',[6,7,8]] ] ],\n        ['mat2', [ ['mesh1',[9]] ] ]\n      ]\n      \n      # (don't try pattern matching with assoc - it just makes things hairy)\n      \n      \n      @batches.assoc('mat1').last\n              .assoc('mesh1')\n      # => list of entities (aka, a Batch)\n      # and then I need a new type for Batch, aka a new class\n      # (I mean, I have an implementation already, I need to update that)\n      \n      \n      \n      \n      \n      \n      \n      # What happens if I change the name of a material?\n      # What happens if I change the name of a mesh?\n      # If I change the name a mesh to be the same as some other mesh, what will blender do? I think the second mesh's name has to change? But how? What does it change into?\n      # What happens if I delete a mesh?\n      # What happens if I delete a material?\n      # Is deletion the same as a rename?\n      # What happens to the packed transforms when one of the keys for the batch changes? Does all of the data in the batch have to be thrown away? Is it too much hassle to save it? Is it too slow to not save it?\n      \n      ",
			"settings":
			{
				"buffer_size": 2037,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/data/world_data.yaml",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/instancing_buffer.rb",
			"settings":
			{
				"buffer_size": 3206,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/c_extension/callbacks.cpp",
			"settings":
			{
				"buffer_size": 35972,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/c_extension/shaders/phong_instanced.vert",
			"settings":
			{
				"buffer_size": 5764,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": ".bundle/config",
			"settings":
			{
				"buffer_size": 144,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/c_extension/shaders/phong.frag",
			"settings":
			{
				"buffer_size": 10796,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/c_extension/ofxInstancingMaterial.cpp",
			"settings":
			{
				"buffer_size": 13096,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/c_extension/ofxInstancingMaterial.h",
			"settings":
			{
				"buffer_size": 8209,
				"line_ending": "Unix"
			}
		},
		{
			"file": "blender_iso_game.sublime-project",
			"settings":
			{
				"buffer_size": 266,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"file": "lib/entities/blender_light.rb",
			"settings":
			{
				"buffer_size": 3731,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/entities/blender_object.rb",
			"settings":
			{
				"buffer_size": 1942,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/entities/blender_mesh.rb",
			"settings":
			{
				"buffer_size": 7049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/entities/blender_material.rb",
			"settings":
			{
				"buffer_size": 161,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/entities/viewport_camera.rb",
			"settings":
			{
				"buffer_size": 7149,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"file": "lib/core.rb",
			"settings":
			{
				"buffer_size": 20234,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/GraphicsAdvanced.cpp",
			"settings":
			{
				"buffer_size": 25552,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Graphics.cpp",
			"settings":
			{
				"buffer_size": 8045,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/graphics.rb",
			"settings":
			{
				"buffer_size": 237,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF.rb",
			"settings":
			{
				"buffer_size": 10680,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/alphaMaskingShaderExample/src/ofApp.cpp",
			"settings":
			{
				"buffer_size": 4849,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 34891 files for \"ofEnableAlphaBlending\"\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/event_ordering/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxGuiGroup.cpp:\n  355  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  356  \tif(blendMode != OF_BLENDMODE_ALPHA){\n  357: \t\tofEnableAlphaBlending();\n  358  \t}\n  359  \tofColor c = ofGetStyle().color;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxInputField.cpp:\n  690  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  691  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  692: \t\tofEnableAlphaBlending();\n  693  \t}\n  694  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxLabel.cpp:\n   58  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   59  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   60: \t\tofEnableAlphaBlending();\n   61  \t}\n   62      ofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxPanel.cpp:\n   84  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   85  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   86: \t\tofEnableAlphaBlending();\n   87  \t}\n   88  \tofColor c = ofGetStyle().color;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxSlider.cpp:\n  281  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  282  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  283: \t\t\tofEnableAlphaBlending();\n  284  \t\t}\n  285  \t\tofSetColor(thisTextColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxToggle.cpp:\n  123  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  124  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  125: \t\tofEnableAlphaBlending();\n  126  \t}\n  127  \tofSetColor(thisTextColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/exampleParameterGroup/src/ofApp.cpp:\n   16  \n   17  \tfont.load( OF_TTF_SANS,9,true,true);\n   18: \tofEnableAlphaBlending();\n   19  }\n   20  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/ofxGuiElement.cpp:\n  635  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  636  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  637: \t\tofEnableAlphaBlending();\n  638  \t}\n  639  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiGroup.cpp:\n   41  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   42  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   43: \t\tofEnableAlphaBlending();\n   44  \t}\n   45  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiPanel.cpp:\n   63  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   64  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   65: \t\tofEnableAlphaBlending();\n   66  \t}\n   67  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiFunctionPlotter.cpp:\n  102  //\t\tglBlendEquation(GL_MIN);\n  103  //\t\tbackground_gradient.draw(borderWidth,borderWidth,getWidth()-2*borderWidth, getHeight()-2*borderWidth);\n  104: //\t\tofEnableAlphaBlending();\n  105  //\t}\n  106  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiGraphics.cpp:\n  118  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  119  \t\tif(blendMode != OF_BLENDMODE_ALPHA){\n  120: \t\t\tofEnableAlphaBlending();\n  121  \t\t}\n  122  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiInputField.cpp:\n  399  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  400  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  401: \t\tofEnableAlphaBlending();\n  402  \t}\n  403  \tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiLabel.cpp:\n  133  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  134  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  135: \t\tofEnableAlphaBlending();\n  136  \t}\n  137  \tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiRangeSlider.cpp:\n  195  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  196  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  197: \t\t\tofEnableAlphaBlending();\n  198  \t\t}\n  199  \t\tofSetColor(this->textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiSlider.cpp:\n  348  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  349  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  350: \t\t\tofEnableAlphaBlending();\n  351  \t\t}\n  352  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiToggle.cpp:\n  242  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  243  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  244: \t\t\tofEnableAlphaBlending();\n  245  \t\t}\n  246  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiValuePlotter.cpp:\n  121  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  122  \tif(blendMode != OF_BLENDMODE_ALPHA){\n  123: \t\tofEnableAlphaBlending();\n  124  \t}\n  125  \tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiZoomableGraphics.cpp:\n   86  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n   87  \t\tif(blendMode != OF_BLENDMODE_ALPHA){\n   88: \t\t\tofEnableAlphaBlending();\n   89  \t\t}\n   90  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/example-demo/bin/example-demo:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxOpenCv/src/ofxCvHaarFinder.cpp:\n  151  void ofxCvHaarFinder::draw( float x, float y ) {\n  152  \tofPushStyle();\n  153: \tofEnableAlphaBlending();\n  154  \tofSetColor( 255,0,200,100 );\n  155  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/apps/projectGenerator/commandLine/bin/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/3d/normalsExample/src/ofApp.cpp:\n   11      ofSetVerticalSync(true);\n   12      ofEnableLighting();\n   13:     ofEnableAlphaBlending();\n   14      ofEnableSmoothing();\n   15  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/3d/quaternionLatLongExample/src/ofApp.cpp:\n   13  \n   14  \tofSetFrameRate(30);\n   15: \tofEnableAlphaBlending();\n   16  \tofNoFill();\n   17  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/firmataExample/src/ofApp.cpp:\n  142  \tbgImage.draw(0,0);\n  143      \n  144:     ofEnableAlphaBlending();\n  145      ofSetColor(0, 0, 0, 127);\n  146      ofDrawRectangle(510, 15, 275, 150);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/alphaMaskingShaderExample/src/ofApp.cpp:\n    3  //--------------------------------------------------------------\n    4  void ofApp::setup(){\n    5:     ofEnableAlphaBlending();\n    6      \n    7      srcImg.load(\"A.jpg\");\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/areaLightExample/bin/areaLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/billboardExample/src/ofApp.cpp:\n   42  \tofDisableArbTex();\n   43  \ttexture.load(\"dot.png\");\n   44: \tofEnableAlphaBlending();\n   45  }\n   46  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/billboardRotationExample/src/ofApp.cpp:\n   78  //--------------------------------------------------------------\n   79  void ofApp::draw() {\n   80: \tofEnableAlphaBlending();\n   81  \tofSetColor(255);\n   82  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/fboTrailsExample/src/ofApp.cpp:\n   48  void ofApp::update(){\n   49  \n   50:     ofEnableAlphaBlending();\n   51  \n   52  \t//lets draw some graphics into our two fbos\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/geometryShaderExample/src/ofApp.cpp:\n    7  \tofBackground(50, 50, 50);\n    8  \tofSetVerticalSync(false);\n    9: \tofEnableAlphaBlending();\n   10  \n   11  \tshader.setGeometryInputType(GL_LINES);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/multiTextureShaderExample/src/ofApp.cpp:\n    5  //--------------------------------------------------------------\n    6  void ofApp::setup(){\n    7:     ofEnableAlphaBlending();\n    8      int camWidth \t\t= 320;\t// try to grab at this size. \n    9  \tint camHeight \t\t= 240;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/pointsAsTexturesExample/src/ofApp.cpp:\n   84  \t// check to see if the points are \n   85  \t// sizing to the right size\n   86: \tofEnableAlphaBlending();\n   87  \tcamera.begin();\n   88  \tfor (unsigned int i=0; i<points.size(); i++) {\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/shaderExample/src/ofApp.cpp:\n    5  \tofBackground(34, 34, 34);\n    6  \tofSetVerticalSync(false);\n    7: \tofEnableAlphaBlending();\n    8  \t\t\n    9  \t//we load a font and tell OF to make outlines so we can draw it as GL shapes rather than textures\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/singleLightExample/bin/singleLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/textureExample/src/ofApp.cpp:\n   67  \t// \tfor transparency to work:\n   68  \t\n   69: \tofEnableAlphaBlending();\n   70  \ttexColorAlpha.draw(250,200,w,h);\n   71  \tofDisableAlphaBlending();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/bin/vboMeshDrawInstancedExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/src/ofApp.cpp:\n  119  \tofDrawBitmapString(\"Use mouse to move camera.\\nPress 'f' to toggle fullscreen;\\nSPACEBAR to reload shader.\", 10, 20);\n  120  \t\n  121: \tofEnableAlphaBlending();\n  122  \t\n  123  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/colorExample/src/ofApp.cpp:\n    6  \tofBackground(0,0,0);\n    7      ofEnableSmoothing();\n    8:     ofEnableAlphaBlending();\n    9  \tofSetWindowTitle(\"color example\");\n   10      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/colorsExtendedExample/src/ofApp.cpp:\n  189      ofSetVerticalSync(true);\n  190      \n  191:     ofEnableAlphaBlending();\n  192      \n  193      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/graphicsExample/README.md:\n   10  \n   11  * different commands for setting the active color, such as ```ofSetColor()``` and ```ofSetHexColor()```. These commands set the color for subsequent drawing operations, including lines and fills.\n   12: * toggling transparency, with ```ofEnableAlphaBlending()``` and ```ofDisableAlphaBlending()```\n   13  * toggling of shape fills, with ```ofFill()``` and ```ofNoFill()```\n   14  * toggling the anti-aliasing of lines, with ```ofEnableAntiAliasing()``` and ```ofDisableAntiAliasing()```\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/graphicsExample/src/ofApp.cpp:\n   58  \tofDrawRectangle(400,350,100,100);\n   59  \t// alpha is usually turned off - for speed puposes.  let's turn it on!\n   60: \tofEnableAlphaBlending();\n   61  \tofSetColor(255,0,0,127);   // red, 50% transparent\n   62  \tofDrawRectangle(450,430,100,33);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/polygonExample/src/ofApp.cpp:\n  196  \t\n  197  \t// show a faint the non-curve version of the same polygon:\n  198: \tofEnableAlphaBlending();\n  199  \t\tofNoFill();\n  200  \t\tofSetColor(0,0,0,40);\n  ...\n  244  \t\n  245  \t\n  246: \tofEnableAlphaBlending();\n  247  \t\tofFill();\n  248  \t\tofSetColor(0,0,0,40);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/rectangleAlignmentAndScalingExample/src/ofApp.cpp:\n   22      \n   23      ofSetFrameRate(30);\n   24:     ofEnableAlphaBlending();\n   25  \n   26      isScaling = false;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gui/parameterGroupExample/src/ofApp.cpp:\n   17  \n   18  \tfont.load( OF_TTF_SANS,9,true,true);\n   19: \tofEnableAlphaBlending();\n   20  }\n   21  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/input_output/imageLoaderExample/src/ofApp.cpp:\n   33  \t\n   34  \tofSetColor(255);\n   35: \tofEnableAlphaBlending();\n   36  \tfloat wave = sin(ofGetElapsedTimef());\n   37  \ttransparency.draw(500 + (wave * 100), 20);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/input_output/xmlExample/src/ofApp.cpp:\n  112  \t//we make a black area on the left\n  113  \t//which we can print the xml text on\n  114: \tofEnableAlphaBlending();\n  115  \tofSetColor(0, 0, 0, 200);\n  116  \tofDrawRectangle(0, 0, 160, ofGetHeight());\n  ...\n  124  \n  125  \t//the message bars at the top and bottom of the app\n  126: \tofEnableAlphaBlending();\n  127  \tofSetColor(0, 0, 0, 200);\n  128  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/input_output/xmlSettingsExample/src/ofApp.cpp:\n  118  \t//we make a black area on the left\n  119  \t//which we can print the xml text on\n  120: \tofEnableAlphaBlending();\n  121  \tofSetColor(0, 0, 0, 200);\n  122  \tofDrawRectangle(0, 0, 160, ofGetHeight());\n  ...\n  132  \t//the message bars at the top and bottom of the app\n  133  \t//ofSetHexColor(0xDDDDDD);\n  134: \tofEnableAlphaBlending();\n  135  \tofSetColor(0, 0, 0, 200);\n  136  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dExample/src/ofApp.cpp:\n   84  \n   85  \tofEnableSmoothing();\n   86: \tofEnableAlphaBlending();\n   87  \tofSetCircleResolution(12);\n   88  \tofSetLineWidth(1.0);\n   ..\n  173  \tofPushMatrix();\n  174  \tofTranslate(centerX + radialNoiseDemoR,centerY,0);\n  175: \tofEnableAlphaBlending();\n  176  \tofEnableSmoothing();\n  177  \tofNoFill();\n  ...\n  226  \tfloat drawWiggleWidth = radialNoiseDemoR*TWO_PI;\n  227  \tofTranslate (radialNoiseDemoX + radialNoiseDemoR - drawWiggleWidth, radialNoiseDemoY-radialNoiseDemoR,0);\n  228: \tofEnableAlphaBlending();\n  229  \tofEnableSmoothing();\n  230  \tofNoFill();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dExample/src/ofxSimpleSlider.cpp:\n   68  void ofxSimpleSlider::draw(ofEventArgs& event){\n   69  \t\n   70: \tofEnableAlphaBlending();\n   71  \tofDisableSmoothing();\n   72  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofApp.cpp:\n  166  \tofPushMatrix();\n  167  \tofDisableSmoothing();\n  168: \tofEnableAlphaBlending();\n  169  \tofTranslate(x, y, 0); \n  170  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofxSimpleSlider.cpp:\n   68  void ofxSimpleSlider::draw(ofEventArgs& event){\n   69  \t\n   70: \tofEnableAlphaBlending();\n   71  \tofDisableSmoothing();\n   72  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noiseField2dExample/src/ofApp.cpp:\n   42  void ofApp::setup() {\n   43  \tofSetVerticalSync(true); // don't go too fast\n   44: \tofEnableAlphaBlending();\n   45  \t\n   46  \t// randomly allocate the points across the screen\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/periodicSignalsExample/src/ofApp.cpp:\n   24  \t\n   25  \tofSetVerticalSync(true);\n   26: \tofEnableAlphaBlending();\n   27  \tofSetColor(20);\n   28  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/periodicSignalsExample/src/ofxSimpleSlider.cpp:\n   69  \t\n   70  \tofPushStyle();\n   71: \tofEnableAlphaBlending();\n   72  \tofDisableSmoothing();\n   73  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/trigonometricMotionExample/src/ofApp.cpp:\n   32  \n   33  \tofEnableSmoothing();\n   34: \tofEnableAlphaBlending();\n   35  \tofSetVerticalSync(true);\n   36  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/sound/soundPlayerFFTExample/src/ofApp.cpp:\n   77  \n   78  \t\n   79: \tofEnableAlphaBlending();\n   80  \t\tofSetColor(255,255,255,100);\n   81  \t\tofDrawRectangle(100,ofGetHeight()-300,5*128,200);\n   ..\n   94  \t// finally draw the playing circle:\n   95  \n   96: \tofEnableAlphaBlending();\n   97  \t\tofSetColor(255,255,255,20);\n   98  \t\tofDrawCircle(px, py,50);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/video/asciiVideoExample/src/ofApp.cpp:\n   19      asciiCharacters =  string(\"  ..,,,'''``--_:;^^**\"\"=+<>iv%&xclrs)/){}I?!][1taeo7zjLunT#@JCwfy325Fp6mqSghVd4EgXPGZbYkOA8U$KHDBWNMR0Q\");\n   20  \t\n   21:     ofEnableAlphaBlending();\n   22  }\n   23  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.cpp:\n  658  \n  659  //----------------------------------------------------------\n  660: void ofEnableAlphaBlending(){\n  661  \tofEnableBlendMode(OF_BLENDMODE_ALPHA);\n  662  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.h:\n   44  /// For alpha (transparency), you must first enable transparent blending\n   45  /// (turned off by default for performance reasons) with\n   46: /// ofEnableAlphaBlending()\n   47  ///\n   48  /// ~~~~{.cpp}\n   49  /// void ofApp::draw(){\n   50: ///     ofEnableAlphaBlending();    // turn on alpha blending\n   51  ///     ofSetColor(255,0,0,127);    // red, 50% transparent\n   52  ///     ofDrawRectangle(20,20,100,100);\n   ..\n  825  /// ~~~~{.cpp}\n  826  /// void ofApp::draw(){\n  827: ///     ofEnableAlphaBlending();    // turn on alpha blending\n  828  ///     ofSetColor(255,0,0,127);    // red, 50% transparent\n  829  ///     ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n  ...\n  832  /// }\n  833  /// ~~~~\n  834: void ofEnableAlphaBlending();  // this just turns on and off opengl blending, the common mode\n  835  \n  836  /// \\brief Turn off alpha blending.\n  837  /// ~~~~{.cpp}\n  838  /// void ofApp::draw(){\n  839: ///     ofEnableAlphaBlending();    // turn on alpha blending\n  840  ///     ofSetColor(255,0,0,127);    // red, 50% transparent\n  841  ///     ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n  ...\n  845  /// ~~~~\n  846  ///\n  847: /// \\sa ofEnableAlphaBlending()\n  848  void ofDisableAlphaBlending();\n  849  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/projectGenerator-linux64/resources/app/app/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.10.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.11.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n90 matches across 67 files\n\n\nSearching 34891 files for \"glBlendFunc\"\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v1 - data transmission.blend:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v2 - cube world.blend:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v2 - cube world.blend1:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v3 - material test.blend:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v3 - material test.blend1:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test.blend1:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/python/__init__.py:\n  230          # Bind shader that converts from scene linear to display space,\n  231          bgl.glEnable(bgl.GL_BLEND)\n  232:         bgl.glBlendFunc(bgl.GL_ONE, bgl.GL_ONE_MINUS_SRC_ALPHA)\n  233          self.bind_display_space_shader(scene)\n  234          \n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/event_ordering/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiFunctionPlotter.cpp:\n   99  \tplot.draw();\n  100  //\tif(background_gradient.isAllocated()){\n  101: ////\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  102  //\t\tglBlendEquation(GL_MIN);\n  103  //\t\tbackground_gradient.draw(borderWidth,borderWidth,getWidth()-2*borderWidth, getHeight()-2*borderWidth);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/example-demo/bin/example-demo:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineGLFW.cpp:\n  189  \t\tglEnable(GL_BLEND);\n  190  \t\tglBlendEquation(GL_FUNC_ADD);\n  191: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  192  \t\tglDisable(GL_CULL_FACE);\n  193  \t\tglDisable(GL_DEPTH_TEST);\n  ...\n  247  \t\tglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, last_element_array_buffer);\n  248  \t\tglBlendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);\n  249: \t\tglBlendFuncSeparate(last_blend_src_rgb, last_blend_dst_rgb, last_blend_src_alpha, last_blend_dst_alpha);\n  250  \t\tif (last_enable_blend) glEnable(GL_BLEND); else glDisable(GL_BLEND);\n  251  \t\tif (last_enable_cull_face) glEnable(GL_CULL_FACE); else glDisable(GL_CULL_FACE);\n  ...\n  276  \t\tglPushAttrib(GL_ENABLE_BIT | GL_COLOR_BUFFER_BIT | GL_TRANSFORM_BIT);\n  277  \t\tglEnable(GL_BLEND);\n  278: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  279  \t\tglDisable(GL_CULL_FACE);\n  280  \t\tglDisable(GL_DEPTH_TEST);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineOpenGLES.cpp:\n  215  \t\tglEnable(GL_BLEND);\n  216  \t\tglBlendEquation(GL_FUNC_ADD);\n  217: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  218  \t\tglDisable(GL_CULL_FACE);\n  219  \t\tglDisable(GL_DEPTH_TEST);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/apps/projectGenerator/commandLine/bin/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/areaLightExample/bin/areaLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/glInfoExample/src/glewOutput.cpp:\n  123      glewInfoFunc(\"glBlendColor\", glBlendColor == NULL);\n  124      glewInfoFunc(\"glBlendEquation\", glBlendEquation == NULL);\n  125:     glewInfoFunc(\"glBlendFuncSeparate\", glBlendFuncSeparate == NULL);\n  126      glewInfoFunc(\"glFogCoordPointer\", glFogCoordPointer == NULL);\n  127      glewInfoFunc(\"glFogCoordd\", glFogCoordd == NULL);\n  ...\n  431      glewInfoFunc(\"glBlendEquationSeparatei\", glBlendEquationSeparatei == NULL);\n  432      glewInfoFunc(\"glBlendEquationi\", glBlendEquationi == NULL);\n  433:     glewInfoFunc(\"glBlendFuncSeparatei\", glBlendFuncSeparatei == NULL);\n  434:     glewInfoFunc(\"glBlendFunci\", glBlendFunci == NULL);\n  435      glewInfoFunc(\"glMinSampleShading\", glMinSampleShading == NULL);\n  436  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/singleLightExample/bin/singleLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/bin/vboMeshDrawInstancedExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp:\n 1028  \t\t\tglEnable(GL_BLEND);\n 1029  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1030: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1031  \t\t\tbreak;\n 1032  \n ....\n 1034  \t\t\tglEnable(GL_BLEND);\n 1035  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1036: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1037  \t\t\tbreak;\n 1038  \n ....\n 1040  \t\t\tglEnable(GL_BLEND);\n 1041  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1042: \t\t\tglBlendFunc(GL_DST_COLOR, GL_ONE_MINUS_SRC_ALPHA /* GL_ZERO or GL_ONE_MINUS_SRC_ALPHA */);\n 1043  \t\t\tbreak;\n 1044  \n ....\n 1046  \t\t\tglEnable(GL_BLEND);\n 1047  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1048: \t\t\tglBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ONE);\n 1049  \t\t\tbreak;\n 1050  \n ....\n 1052  \t\t\tglEnable(GL_BLEND);\n 1053  \t\t\tglBlendEquation(GL_FUNC_REVERSE_SUBTRACT);\n 1054: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1055  \t\t\tbreak;\n 1056  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLRenderer.cpp:\n 1215  \t//why do we need this?\n 1216  \tglEnable(GL_BLEND);\n 1217: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1218  }\n 1219  \n ....\n 1238  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1239  \t\t\t#endif\n 1240: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1241  \t\t\tbreak;\n 1242  \t\t}\n ....\n 1247  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1248  \t\t\t#endif\n 1249: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1250  \t\t\tbreak;\n 1251  \t\t}\n ....\n 1256  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1257  \t\t\t#endif\n 1258: \t\t\tglBlendFunc(GL_DST_COLOR, GL_ONE_MINUS_SRC_ALPHA /* GL_ZERO or GL_ONE_MINUS_SRC_ALPHA */);\n 1259  \t\t\tbreak;\n 1260  \t\t}\n ....\n 1265  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1266  \t\t\t#endif\n 1267: \t\t\tglBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ONE);\n 1268  \t\t\tbreak;\n 1269  \t\t}\n ....\n 1276  \t\t\tofLogWarning(\"ofGLRenderer\") << \"OF_BLENDMODE_SUBTRACT not currently supported on OpenGL ES\";\n 1277  \t\t#endif\n 1278: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1279  \t\t\tbreak;\n 1280  \t\t}\n ....\n 1646  \n 1647  \tglEnable(GL_BLEND);\n 1648: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1649  #ifndef TARGET_OPENGLES\n 1650  \t// this temporarily enables alpha testing,\n ....\n 1664  #endif\n 1665  \t// restore blendmode\n 1666: \tglBlendFunc(blend_src, blend_dst);\n 1667  \n 1668  \tif (hasModelView)\n ....\n 1690  \n 1691  \tglEnable(GL_BLEND);\n 1692: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1693  \n 1694  \tmutThis->bind(font.getFontTexture(),0);\n ....\n 1699  \t\tglDisable(GL_BLEND);\n 1700  \t}\n 1701: \tglBlendFunc(blend_src, blend_dst);\n 1702  }\n 1703  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/projectGenerator-linux64/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/projectGenerator-linux64/resources/app/app/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/vendor/apothecary/apothecary/build/tess2/Example/example.c:\n  236  \t\tglClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n  237  \t\tglEnable(GL_BLEND);\n  238: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  239  \t\tglDisable(GL_TEXTURE_2D);\n  240  \t\tglMatrixMode(GL_PROJECTION);\n  ...\n  245  \t\tglDisable(GL_DEPTH_TEST);\n  246  \t\tglEnable(GL_BLEND);\n  247: \t\tglBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);\n  248  \n  249  #ifdef USE_POOL\n\n/home/ravenskrag/Desktop/gem_structure/vendor/apothecary/apothecary/build/tess2_patched/Example/example.c:\n  236  \t\tglClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n  237  \t\tglEnable(GL_BLEND);\n  238: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  239  \t\tglDisable(GL_TEXTURE_2D);\n  240  \t\tglMatrixMode(GL_PROJECTION);\n  ...\n  245  \t\tglDisable(GL_DEPTH_TEST);\n  246  \t\tglEnable(GL_BLEND);\n  247: \t\tglBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);\n  248  \n  249  #ifdef USE_POOL\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/bundler/gems/chipmunk-996b920f7863/demo/chipmunk_demo.rb:\n  230  \t\tglEnable(GL_POINT_SMOOTH);\n  231  \t\tglEnable(GL_BLEND);\n  232: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  233  \t\tglHint(GL_LINE_SMOOTH_HINT, GL_DONT_CARE);\n  234  \t\tglHint(GL_POINT_SMOOTH_HINT, GL_DONT_CARE);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/bundler/gems/chipmunk-996b920f7863/vendor/chipmunk-6.1.3/Demo/ChipmunkDemo.c:\n  473  \t\n  474  \tglEnable(GL_BLEND);\n  475: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  476  }\n  477  \n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/misc/trislam.rb:\n  581    # Use antialiased lines\n  582    glEnable(GL_BLEND)\n  583:   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n  584    glEnable(GL_LINE_SMOOTH)\n  585    glHint(GL_LINE_SMOOTH_HINT, GL_NICEST)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson08.rb:\n   55      glDepthFunc GL_LEQUAL\n   56      glColor4f 1.0, 1.0, 1.0, 0.5\n   57:     glBlendFunc GL_SRC_ALPHA, GL_ONE\n   58      glHint GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST\n   59  \n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson09.rb:\n   57      glClearDepth 1.0\n   58      glHint GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST\n   59:     glBlendFunc GL_SRC_ALPHA, GL_ONE\n   60      glEnable GL_BLEND\n   61  \n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson19.rb:\n   85      glDisable GL_DEPTH_TEST\n   86      glEnable GL_BLEND\n   87:     glBlendFunc GL_SRC_ALPHA, GL_ONE\n   88      glHint GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST\n   89      glHint GL_POINT_SMOOTH_HINT, GL_NICEST\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson36.rb:\n  219    glEnable(GL_TEXTURE_2D) # Enable 2D Texture Mapping\n  220    glDisable(GL_DEPTH_TEST) # Disable Depth Testing\n  221:   glBlendFunc(GL_SRC_ALPHA,GL_ONE) # Set Blending Mode\n  222    glEnable(GL_BLEND) # Enable Blending\n  223    glBindTexture(GL_TEXTURE_2D,$blurTexture) # Bind To The Blur Texture\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/aapoly.rb:\n   50    glCullFace(GL_BACK)\n   51    glEnable(GL_CULL_FACE)\n   52:   glBlendFunc(GL_SRC_ALPHA_SATURATE, GL_ONE)\n   53    glClearColor(0.0, 0.0, 0.0, 0.0)\n   54  end\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/aargb.rb:\n   53    glEnable(GL_LINE_SMOOTH)\n   54    glEnable(GL_BLEND)\n   55:   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n   56    glHint(GL_LINE_SMOOTH_HINT, GL_DONT_CARE)\n   57    glLineWidth(1.5)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/alpha.rb:\n   50  def init\n   51    glEnable(GL_BLEND)\n   52:   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n   53    glShadeModel(GL_FLAT)\n   54    glClearColor(0.0, 0.0, 0.0, 0.0)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/alpha3D.rb:\n  102    glEnable(GL_BLEND)\n  103    glDepthMask(GL_FALSE)\n  104:   glBlendFunc(GL_SRC_ALPHA, GL_ONE)\n  105    glCallList($cubeList)\n  106    glDepthMask(GL_TRUE)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/fptr_struct.h:\n    6  GLvoid (APIENTRY * glArrayElement)(GLint);\n    7  GLvoid (APIENTRY * glBindTexture)(GLenum,GLuint);\n    8: GLvoid (APIENTRY * glBlendFunc)(GLenum,GLenum);\n    9  GLvoid (APIENTRY * glCallList)(GLuint);\n   10  GLvoid (APIENTRY * glClear)(GLbitfield);\n   ..\n  308  GLvoid (APIENTRY * glCompressedTexSubImage1D)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,GLvoid*);\n  309  GLvoid (APIENTRY * glGetCompressedTexImage)(GLenum,GLint,GLvoid*);\n  310: GLvoid (APIENTRY * glBlendFuncSeparate)(GLenum,GLenum,GLenum,GLenum);\n  311  GLvoid (APIENTRY * glFogCoordf)(GLfloat);\n  312  GLvoid (APIENTRY * glFogCoordd)(GLdouble);\n  ...\n  723  GLvoid (APIENTRY * glFogCoorddvEXT)(GLdouble *);\n  724  GLvoid (APIENTRY * glFogCoordPointerEXT)(GLenum,GLsizei,const GLvoid *);\n  725: GLvoid (APIENTRY * glBlendFuncSeparateEXT)(GLenum,GLenum,GLenum,GLenum);\n  726  GLvoid (APIENTRY * glActiveStencilFaceEXT)(GLenum);\n  727  GLvoid (APIENTRY * glDepthBoundsEXT)(GLclampd,GLclampd);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/gl-1.0-1.1.c:\n 3145    rb_define_method(klass, \"glEvalPoint2\", gl_EvalPoint2, 2);\n 3146    rb_define_method(klass, \"glAlphaFunc\", gl_AlphaFunc, 2);\n 3147:   rb_define_method(klass, \"glBlendFunc\", gl_BlendFunc, 2);\n 3148    rb_define_method(klass, \"glLogicOp\", gl_LogicOp, 1);\n 3149    rb_define_method(klass, \"glStencilFunc\", gl_StencilFunc, 3);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/gl-1.4.c:\n  299  void gl_init_functions_1_4(VALUE klass)\n  300  {\n  301: \trb_define_method(klass, \"glBlendFuncSeparate\", gl_BlendFuncSeparate, 4);\n  302  \trb_define_method(klass, \"glFogCoordf\", gl_FogCoordf, 1);\n  303  \trb_define_method(klass, \"glFogCoordfv\", gl_FogCoordfv, 1);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/gl-ext-ext.c:\n  783  \n  784  /* #173 - GL_EXT_blend_func_separate */\n  785: \trb_define_method(klass, \"glBlendFuncSeparateEXT\", gl_BlendFuncSeparateEXT, 4);\n  786  \n  787  /* #268 - GL_EXT_stencil_two_side */\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/GL/gl.h:\n  758  GLAPI void GLAPIENTRY glAlphaFunc( GLenum func, GLclampf ref );\n  759  \n  760: GLAPI void GLAPIENTRY glBlendFunc( GLenum sfactor, GLenum dfactor );\n  761  \n  762  GLAPI void GLAPIENTRY glLogicOp( GLenum opcode );\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/GL/glext.h:\n  365  #define GL_CONSTANT_ALPHA                 0x8003\n  366  #define GL_ONE_MINUS_CONSTANT_ALPHA       0x8004\n  367: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n  368  typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);\n  369  typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);\n  ...\n  413  typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);\n  414  #ifdef GL_GLEXT_PROTOTYPES\n  415: GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n  416  GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);\n  417  GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);\n  ...\n 1733  typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);\n 1734  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 1735: typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);\n 1736: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 1737  typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);\n 1738  typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);\n ....\n 1780  GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);\n 1781  GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 1782: GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);\n 1783: GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 1784  GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);\n 1785  GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);\n ....\n 3092  typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);\n 3093  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 3094: typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);\n 3095: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 3096  #ifdef GL_GLEXT_PROTOTYPES\n 3097  GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);\n 3098  GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 3099: GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);\n 3100: GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 3101  #endif\n 3102  #endif /* GL_ARB_draw_buffers_blend */\n ....\n 5176  #ifndef GL_AMD_draw_buffers_blend\n 5177  #define GL_AMD_draw_buffers_blend 1\n 5178: typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);\n 5179: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 5180  typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);\n 5181  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 5182  #ifdef GL_GLEXT_PROTOTYPES\n 5183: GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst);\n 5184: GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 5185  GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode);\n 5186  GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n ....\n 6207  #define GL_BLEND_DST_ALPHA_EXT            0x80CA\n 6208  #define GL_BLEND_SRC_ALPHA_EXT            0x80CB\n 6209: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 6210  #ifdef GL_GLEXT_PROTOTYPES\n 6211: GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 6212  #endif\n 6213  #endif /* GL_EXT_blend_func_separate */\n ....\n 8604  #ifndef GL_INGR_blend_func_separate\n 8605  #define GL_INGR_blend_func_separate 1\n 8606: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8607  #ifdef GL_GLEXT_PROTOTYPES\n 8608: GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8609  #endif\n 8610  #endif /* GL_INGR_blend_func_separate */\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/test/test_gl_10_11.rb:\n  279      assert_equal(0.5, glGetDoublev(GL_ALPHA_TEST_REF))\n  280  \n  281:     glBlendFunc(GL_CONSTANT_ALPHA, GL_ONE_MINUS_DST_COLOR)\n  282      assert_equal(GL_CONSTANT_ALPHA, glGetIntegerv(GL_BLEND_SRC))\n  283      assert_equal(GL_ONE_MINUS_DST_COLOR, glGetIntegerv(GL_BLEND_DST))\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/test/test_gl_14.rb:\n   79    end\n   80  \n   81:   def test_glblendfuncseparate\n   82:     glBlendFuncSeparate(GL_SRC_COLOR, GL_SRC_COLOR, GL_SRC_COLOR, GL_SRC_COLOR)\n   83      assert_equal(GL_SRC_COLOR, glGetIntegerv(GL_BLEND_SRC_RGB))\n   84      assert_equal(GL_SRC_COLOR, glGetIntegerv(GL_BLEND_SRC_ALPHA))\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/test/test_gl_ext_ext.rb:\n  257    def test_gl_ext_blend_func_separate\n  258      supported?(\"GL_EXT_blend_func_separate\")\n  259:     glBlendFuncSeparateEXT(GL_ZERO, GL_ONE, GL_ZERO, GL_ONE)\n  260      assert_equal(GL_ZERO, glGetIntegerv(GL_BLEND_SRC_RGB_EXT))\n  261      assert_equal(GL_ONE, glGetIntegerv(GL_BLEND_DST_RGB_EXT))\n  262      assert_equal(GL_ZERO, glGetIntegerv(GL_BLEND_SRC_ALPHA_EXT))\n  263      assert_equal(glGetIntegerv(GL_BLEND_DST_ALPHA_EXT), GL_ONE)\n  264:     glBlendFuncSeparateEXT(GL_ONE, GL_ZERO, GL_ONE, GL_ZERO)\n  265      assert_equal(GL_ONE, glGetIntegerv(GL_BLEND_SRC_RGB_EXT))\n  266      assert_equal(GL_ZERO, glGetIntegerv(GL_BLEND_DST_RGB_EXT))\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.10.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.11.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n/home/ravenskrag/Code/Source/blender-git/blender/source/blender/draw/intern/draw_manager_exec.c:\n  244          switch (test) {\n  245            case DRW_STATE_BLEND_ALPHA:\n  246:             glBlendFuncSeparate(GL_SRC_ALPHA,\n  247                                  GL_ONE_MINUS_SRC_ALPHA, /* RGB */\n  248                                  GL_ONE,\n  ...\n  251            case DRW_STATE_BLEND_BACKGROUND:\n  252              /* Special blend to add color under and multiply dst by alpha. */\n  253:             glBlendFuncSeparate(GL_ONE_MINUS_DST_ALPHA,\n  254                                  GL_SRC_ALPHA, /* RGB */\n  255                                  GL_ZERO,\n  ...\n  257              break;\n  258            case DRW_STATE_BLEND_ALPHA_PREMUL:\n  259:             glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);\n  260              break;\n  261            case DRW_STATE_BLEND_MUL:\n  262:             glBlendFunc(GL_DST_COLOR, GL_ZERO);\n  263              break;\n  264            case DRW_STATE_BLEND_OIT:\n  265:             glBlendFuncSeparate(GL_ONE,\n  266                                  GL_ONE, /* RGB */\n  267                                  GL_ZERO,\n  ...\n  270            case DRW_STATE_BLEND_ADD:\n  271              /* Do not let alpha accumulate but premult the source RGB by it. */\n  272:             glBlendFuncSeparate(GL_SRC_ALPHA,\n  273                                  GL_ONE, /* RGB */\n  274                                  GL_ZERO,\n  ...\n  277            case DRW_STATE_BLEND_ADD_FULL:\n  278              /* Let alpha accumulate. */\n  279:             glBlendFunc(GL_ONE, GL_ONE);\n  280              break;\n  281            case DRW_STATE_BLEND_SUB:\n  282:             glBlendFunc(GL_ONE, GL_ONE);\n  283              break;\n  284            case DRW_STATE_BLEND_CUSTOM:\n  285              /* Custom blend parameters using dual source blending.\n  286               * Can only be used with one Draw Buffer. */\n  287:             glBlendFunc(GL_ONE, GL_SRC1_COLOR);\n  288              break;\n  289            case DRW_STATE_LOGIC_INVERT:\n  290              /* Replace logic op by blend func to support floating point framebuffer. */\n  291:             glBlendFuncSeparate(GL_ONE_MINUS_DST_COLOR,\n  292                                  GL_ZERO, /* RGB */\n  293                                  GL_ZERO,\n  ...\n  307        else {\n  308          glDisable(GL_BLEND);\n  309:         glBlendFunc(GL_ONE, GL_ONE); /* Don't multiply incoming color by alpha. */\n  310        }\n  311      }\n  ...\n  455  \n  456    /* Reset blending function */\n  457:   glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);\n  458  }\n  459  \n\n/home/ravenskrag/Code/Source/blender-git/blender/source/blender/gpu/intern/gpu_state.c:\n   65  void GPU_blend_set_func(eGPUBlendFunction sfactor, eGPUBlendFunction dfactor)\n   66  {\n   67:   glBlendFunc(gpu_get_gl_blendfunction(sfactor), gpu_get_gl_blendfunction(dfactor));\n   68  }\n   69  \n   ..\n   73                                   eGPUBlendFunction dst_alpha)\n   74  {\n   75:   glBlendFuncSeparate(gpu_get_gl_blendfunction(src_rgb),\n   76                        gpu_get_gl_blendfunction(dst_rgb),\n   77                        gpu_get_gl_blendfunction(src_alpha),\n\n242 matches across 50 files\n\n\nSearching 34891 files for \"ofEnableAlphaBlending\"\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/dependency_graph.rb:\n  142    \n  143    def render_scene\n  144:     ofEnableAlphaBlending()\n  145      \n  146      # \n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/event_ordering/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxGuiGroup.cpp:\n  355  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  356  \tif(blendMode != OF_BLENDMODE_ALPHA){\n  357: \t\tofEnableAlphaBlending();\n  358  \t}\n  359  \tofColor c = ofGetStyle().color;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxInputField.cpp:\n  690  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  691  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  692: \t\tofEnableAlphaBlending();\n  693  \t}\n  694  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxLabel.cpp:\n   58  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   59  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   60: \t\tofEnableAlphaBlending();\n   61  \t}\n   62      ofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxPanel.cpp:\n   84  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   85  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   86: \t\tofEnableAlphaBlending();\n   87  \t}\n   88  \tofColor c = ofGetStyle().color;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxSlider.cpp:\n  281  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  282  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  283: \t\t\tofEnableAlphaBlending();\n  284  \t\t}\n  285  \t\tofSetColor(thisTextColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxToggle.cpp:\n  123  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  124  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  125: \t\tofEnableAlphaBlending();\n  126  \t}\n  127  \tofSetColor(thisTextColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/exampleParameterGroup/src/ofApp.cpp:\n   16  \n   17  \tfont.load( OF_TTF_SANS,9,true,true);\n   18: \tofEnableAlphaBlending();\n   19  }\n   20  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/ofxGuiElement.cpp:\n  635  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  636  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  637: \t\tofEnableAlphaBlending();\n  638  \t}\n  639  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiGroup.cpp:\n   41  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   42  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   43: \t\tofEnableAlphaBlending();\n   44  \t}\n   45  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiPanel.cpp:\n   63  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n   64  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n   65: \t\tofEnableAlphaBlending();\n   66  \t}\n   67  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiFunctionPlotter.cpp:\n  102  //\t\tglBlendEquation(GL_MIN);\n  103  //\t\tbackground_gradient.draw(borderWidth,borderWidth,getWidth()-2*borderWidth, getHeight()-2*borderWidth);\n  104: //\t\tofEnableAlphaBlending();\n  105  //\t}\n  106  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiGraphics.cpp:\n  118  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  119  \t\tif(blendMode != OF_BLENDMODE_ALPHA){\n  120: \t\t\tofEnableAlphaBlending();\n  121  \t\t}\n  122  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiInputField.cpp:\n  399  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  400  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  401: \t\tofEnableAlphaBlending();\n  402  \t}\n  403  \tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiLabel.cpp:\n  133  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  134  \tif(blendMode!=OF_BLENDMODE_ALPHA){\n  135: \t\tofEnableAlphaBlending();\n  136  \t}\n  137  \tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiRangeSlider.cpp:\n  195  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  196  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  197: \t\t\tofEnableAlphaBlending();\n  198  \t\t}\n  199  \t\tofSetColor(this->textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiSlider.cpp:\n  348  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  349  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  350: \t\t\tofEnableAlphaBlending();\n  351  \t\t}\n  352  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiToggle.cpp:\n  242  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n  243  \t\tif(blendMode!=OF_BLENDMODE_ALPHA){\n  244: \t\t\tofEnableAlphaBlending();\n  245  \t\t}\n  246  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiValuePlotter.cpp:\n  121  \tofBlendMode blendMode = ofGetStyle().blendingMode;\n  122  \tif(blendMode != OF_BLENDMODE_ALPHA){\n  123: \t\tofEnableAlphaBlending();\n  124  \t}\n  125  \tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiZoomableGraphics.cpp:\n   86  \t\tofBlendMode blendMode = ofGetStyle().blendingMode;\n   87  \t\tif(blendMode != OF_BLENDMODE_ALPHA){\n   88: \t\t\tofEnableAlphaBlending();\n   89  \t\t}\n   90  \t\tofSetColor(textColor);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/example-demo/bin/example-demo:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxOpenCv/src/ofxCvHaarFinder.cpp:\n  151  void ofxCvHaarFinder::draw( float x, float y ) {\n  152  \tofPushStyle();\n  153: \tofEnableAlphaBlending();\n  154  \tofSetColor( 255,0,200,100 );\n  155  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/apps/projectGenerator/commandLine/bin/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/3d/normalsExample/src/ofApp.cpp:\n   11      ofSetVerticalSync(true);\n   12      ofEnableLighting();\n   13:     ofEnableAlphaBlending();\n   14      ofEnableSmoothing();\n   15  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/3d/quaternionLatLongExample/src/ofApp.cpp:\n   13  \n   14  \tofSetFrameRate(30);\n   15: \tofEnableAlphaBlending();\n   16  \tofNoFill();\n   17  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/firmataExample/src/ofApp.cpp:\n  142  \tbgImage.draw(0,0);\n  143      \n  144:     ofEnableAlphaBlending();\n  145      ofSetColor(0, 0, 0, 127);\n  146      ofDrawRectangle(510, 15, 275, 150);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/alphaMaskingShaderExample/src/ofApp.cpp:\n    3  //--------------------------------------------------------------\n    4  void ofApp::setup(){\n    5:     ofEnableAlphaBlending();\n    6      \n    7      srcImg.load(\"A.jpg\");\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/areaLightExample/bin/areaLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/billboardExample/src/ofApp.cpp:\n   42  \tofDisableArbTex();\n   43  \ttexture.load(\"dot.png\");\n   44: \tofEnableAlphaBlending();\n   45  }\n   46  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/billboardRotationExample/src/ofApp.cpp:\n   78  //--------------------------------------------------------------\n   79  void ofApp::draw() {\n   80: \tofEnableAlphaBlending();\n   81  \tofSetColor(255);\n   82  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/fboTrailsExample/src/ofApp.cpp:\n   48  void ofApp::update(){\n   49  \n   50:     ofEnableAlphaBlending();\n   51  \n   52  \t//lets draw some graphics into our two fbos\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/geometryShaderExample/src/ofApp.cpp:\n    7  \tofBackground(50, 50, 50);\n    8  \tofSetVerticalSync(false);\n    9: \tofEnableAlphaBlending();\n   10  \n   11  \tshader.setGeometryInputType(GL_LINES);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/multiTextureShaderExample/src/ofApp.cpp:\n    5  //--------------------------------------------------------------\n    6  void ofApp::setup(){\n    7:     ofEnableAlphaBlending();\n    8      int camWidth \t\t= 320;\t// try to grab at this size. \n    9  \tint camHeight \t\t= 240;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/pointsAsTexturesExample/src/ofApp.cpp:\n   84  \t// check to see if the points are \n   85  \t// sizing to the right size\n   86: \tofEnableAlphaBlending();\n   87  \tcamera.begin();\n   88  \tfor (unsigned int i=0; i<points.size(); i++) {\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/shaderExample/src/ofApp.cpp:\n    5  \tofBackground(34, 34, 34);\n    6  \tofSetVerticalSync(false);\n    7: \tofEnableAlphaBlending();\n    8  \t\t\n    9  \t//we load a font and tell OF to make outlines so we can draw it as GL shapes rather than textures\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/singleLightExample/bin/singleLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/textureExample/src/ofApp.cpp:\n   67  \t// \tfor transparency to work:\n   68  \t\n   69: \tofEnableAlphaBlending();\n   70  \ttexColorAlpha.draw(250,200,w,h);\n   71  \tofDisableAlphaBlending();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/bin/vboMeshDrawInstancedExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/src/ofApp.cpp:\n  119  \tofDrawBitmapString(\"Use mouse to move camera.\\nPress 'f' to toggle fullscreen;\\nSPACEBAR to reload shader.\", 10, 20);\n  120  \t\n  121: \tofEnableAlphaBlending();\n  122  \t\n  123  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/colorExample/src/ofApp.cpp:\n    6  \tofBackground(0,0,0);\n    7      ofEnableSmoothing();\n    8:     ofEnableAlphaBlending();\n    9  \tofSetWindowTitle(\"color example\");\n   10      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/colorsExtendedExample/src/ofApp.cpp:\n  189      ofSetVerticalSync(true);\n  190      \n  191:     ofEnableAlphaBlending();\n  192      \n  193      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/graphicsExample/README.md:\n   10  \n   11  * different commands for setting the active color, such as ```ofSetColor()``` and ```ofSetHexColor()```. These commands set the color for subsequent drawing operations, including lines and fills.\n   12: * toggling transparency, with ```ofEnableAlphaBlending()``` and ```ofDisableAlphaBlending()```\n   13  * toggling of shape fills, with ```ofFill()``` and ```ofNoFill()```\n   14  * toggling the anti-aliasing of lines, with ```ofEnableAntiAliasing()``` and ```ofDisableAntiAliasing()```\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/graphicsExample/src/ofApp.cpp:\n   58  \tofDrawRectangle(400,350,100,100);\n   59  \t// alpha is usually turned off - for speed puposes.  let's turn it on!\n   60: \tofEnableAlphaBlending();\n   61  \tofSetColor(255,0,0,127);   // red, 50% transparent\n   62  \tofDrawRectangle(450,430,100,33);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/polygonExample/src/ofApp.cpp:\n  196  \t\n  197  \t// show a faint the non-curve version of the same polygon:\n  198: \tofEnableAlphaBlending();\n  199  \t\tofNoFill();\n  200  \t\tofSetColor(0,0,0,40);\n  ...\n  244  \t\n  245  \t\n  246: \tofEnableAlphaBlending();\n  247  \t\tofFill();\n  248  \t\tofSetColor(0,0,0,40);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/rectangleAlignmentAndScalingExample/src/ofApp.cpp:\n   22      \n   23      ofSetFrameRate(30);\n   24:     ofEnableAlphaBlending();\n   25  \n   26      isScaling = false;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gui/parameterGroupExample/src/ofApp.cpp:\n   17  \n   18  \tfont.load( OF_TTF_SANS,9,true,true);\n   19: \tofEnableAlphaBlending();\n   20  }\n   21  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/input_output/imageLoaderExample/src/ofApp.cpp:\n   33  \t\n   34  \tofSetColor(255);\n   35: \tofEnableAlphaBlending();\n   36  \tfloat wave = sin(ofGetElapsedTimef());\n   37  \ttransparency.draw(500 + (wave * 100), 20);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/input_output/xmlExample/src/ofApp.cpp:\n  112  \t//we make a black area on the left\n  113  \t//which we can print the xml text on\n  114: \tofEnableAlphaBlending();\n  115  \tofSetColor(0, 0, 0, 200);\n  116  \tofDrawRectangle(0, 0, 160, ofGetHeight());\n  ...\n  124  \n  125  \t//the message bars at the top and bottom of the app\n  126: \tofEnableAlphaBlending();\n  127  \tofSetColor(0, 0, 0, 200);\n  128  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/input_output/xmlSettingsExample/src/ofApp.cpp:\n  118  \t//we make a black area on the left\n  119  \t//which we can print the xml text on\n  120: \tofEnableAlphaBlending();\n  121  \tofSetColor(0, 0, 0, 200);\n  122  \tofDrawRectangle(0, 0, 160, ofGetHeight());\n  ...\n  132  \t//the message bars at the top and bottom of the app\n  133  \t//ofSetHexColor(0xDDDDDD);\n  134: \tofEnableAlphaBlending();\n  135  \tofSetColor(0, 0, 0, 200);\n  136  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dExample/src/ofApp.cpp:\n   84  \n   85  \tofEnableSmoothing();\n   86: \tofEnableAlphaBlending();\n   87  \tofSetCircleResolution(12);\n   88  \tofSetLineWidth(1.0);\n   ..\n  173  \tofPushMatrix();\n  174  \tofTranslate(centerX + radialNoiseDemoR,centerY,0);\n  175: \tofEnableAlphaBlending();\n  176  \tofEnableSmoothing();\n  177  \tofNoFill();\n  ...\n  226  \tfloat drawWiggleWidth = radialNoiseDemoR*TWO_PI;\n  227  \tofTranslate (radialNoiseDemoX + radialNoiseDemoR - drawWiggleWidth, radialNoiseDemoY-radialNoiseDemoR,0);\n  228: \tofEnableAlphaBlending();\n  229  \tofEnableSmoothing();\n  230  \tofNoFill();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dExample/src/ofxSimpleSlider.cpp:\n   68  void ofxSimpleSlider::draw(ofEventArgs& event){\n   69  \t\n   70: \tofEnableAlphaBlending();\n   71  \tofDisableSmoothing();\n   72  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofApp.cpp:\n  166  \tofPushMatrix();\n  167  \tofDisableSmoothing();\n  168: \tofEnableAlphaBlending();\n  169  \tofTranslate(x, y, 0); \n  170  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofxSimpleSlider.cpp:\n   68  void ofxSimpleSlider::draw(ofEventArgs& event){\n   69  \t\n   70: \tofEnableAlphaBlending();\n   71  \tofDisableSmoothing();\n   72  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noiseField2dExample/src/ofApp.cpp:\n   42  void ofApp::setup() {\n   43  \tofSetVerticalSync(true); // don't go too fast\n   44: \tofEnableAlphaBlending();\n   45  \t\n   46  \t// randomly allocate the points across the screen\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/periodicSignalsExample/src/ofApp.cpp:\n   24  \t\n   25  \tofSetVerticalSync(true);\n   26: \tofEnableAlphaBlending();\n   27  \tofSetColor(20);\n   28  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/periodicSignalsExample/src/ofxSimpleSlider.cpp:\n   69  \t\n   70  \tofPushStyle();\n   71: \tofEnableAlphaBlending();\n   72  \tofDisableSmoothing();\n   73  \tofPushMatrix();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/trigonometricMotionExample/src/ofApp.cpp:\n   32  \n   33  \tofEnableSmoothing();\n   34: \tofEnableAlphaBlending();\n   35  \tofSetVerticalSync(true);\n   36  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/sound/soundPlayerFFTExample/src/ofApp.cpp:\n   77  \n   78  \t\n   79: \tofEnableAlphaBlending();\n   80  \t\tofSetColor(255,255,255,100);\n   81  \t\tofDrawRectangle(100,ofGetHeight()-300,5*128,200);\n   ..\n   94  \t// finally draw the playing circle:\n   95  \n   96: \tofEnableAlphaBlending();\n   97  \t\tofSetColor(255,255,255,20);\n   98  \t\tofDrawCircle(px, py,50);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/video/asciiVideoExample/src/ofApp.cpp:\n   19      asciiCharacters =  string(\"  ..,,,'''``--_:;^^**\"\"=+<>iv%&xclrs)/){}I?!][1taeo7zjLunT#@JCwfy325Fp6mqSghVd4EgXPGZbYkOA8U$KHDBWNMR0Q\");\n   20  \t\n   21:     ofEnableAlphaBlending();\n   22  }\n   23  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.cpp:\n  658  \n  659  //----------------------------------------------------------\n  660: void ofEnableAlphaBlending(){\n  661  \tofEnableBlendMode(OF_BLENDMODE_ALPHA);\n  662  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.h:\n   44  /// For alpha (transparency), you must first enable transparent blending\n   45  /// (turned off by default for performance reasons) with\n   46: /// ofEnableAlphaBlending()\n   47  ///\n   48  /// ~~~~{.cpp}\n   49  /// void ofApp::draw(){\n   50: ///     ofEnableAlphaBlending();    // turn on alpha blending\n   51  ///     ofSetColor(255,0,0,127);    // red, 50% transparent\n   52  ///     ofDrawRectangle(20,20,100,100);\n   ..\n  825  /// ~~~~{.cpp}\n  826  /// void ofApp::draw(){\n  827: ///     ofEnableAlphaBlending();    // turn on alpha blending\n  828  ///     ofSetColor(255,0,0,127);    // red, 50% transparent\n  829  ///     ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n  ...\n  832  /// }\n  833  /// ~~~~\n  834: void ofEnableAlphaBlending();  // this just turns on and off opengl blending, the common mode\n  835  \n  836  /// \\brief Turn off alpha blending.\n  837  /// ~~~~{.cpp}\n  838  /// void ofApp::draw(){\n  839: ///     ofEnableAlphaBlending();    // turn on alpha blending\n  840  ///     ofSetColor(255,0,0,127);    // red, 50% transparent\n  841  ///     ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n  ...\n  845  /// ~~~~\n  846  ///\n  847: /// \\sa ofEnableAlphaBlending()\n  848  void ofDisableAlphaBlending();\n  849  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/projectGenerator-linux64/resources/app/app/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Graphics.cpp:\n  182  \t\t.define_method(\"ofDisableLighting\", &ofDisableLighting)\n  183  \t\t\n  184: \t\t.define_method(\"ofEnableAlphaBlending\",  &ofEnableAlphaBlending)\n  185  \t\t.define_method(\"ofDisableAlphaBlending\", &ofDisableAlphaBlending)\n  186  \t\t\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.10.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.11.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n93 matches across 69 files\n\n\nSearching 34891 files for \"glBlendFunc\"\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v1 - data transmission.blend:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v2 - cube world.blend:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v2 - cube world.blend1:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v3 - material test.blend:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test v3 - material test.blend1:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/external renderer test.blend1:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/python/__init__.py:\n  230          # Bind shader that converts from scene linear to display space,\n  231          bgl.glEnable(bgl.GL_BLEND)\n  232:         bgl.glBlendFunc(bgl.GL_ONE, bgl.GL_ONE_MINUS_SRC_ALPHA)\n  233          self.bind_display_space_shader(scene)\n  234          \n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/event_ordering/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiFunctionPlotter.cpp:\n   99  \tplot.draw();\n  100  //\tif(background_gradient.isAllocated()){\n  101: ////\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  102  //\t\tglBlendEquation(GL_MIN);\n  103  //\t\tbackground_gradient.draw(borderWidth,borderWidth,getWidth()-2*borderWidth, getHeight()-2*borderWidth);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/example-demo/bin/example-demo:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineGLFW.cpp:\n  189  \t\tglEnable(GL_BLEND);\n  190  \t\tglBlendEquation(GL_FUNC_ADD);\n  191: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  192  \t\tglDisable(GL_CULL_FACE);\n  193  \t\tglDisable(GL_DEPTH_TEST);\n  ...\n  247  \t\tglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, last_element_array_buffer);\n  248  \t\tglBlendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);\n  249: \t\tglBlendFuncSeparate(last_blend_src_rgb, last_blend_dst_rgb, last_blend_src_alpha, last_blend_dst_alpha);\n  250  \t\tif (last_enable_blend) glEnable(GL_BLEND); else glDisable(GL_BLEND);\n  251  \t\tif (last_enable_cull_face) glEnable(GL_CULL_FACE); else glDisable(GL_CULL_FACE);\n  ...\n  276  \t\tglPushAttrib(GL_ENABLE_BIT | GL_COLOR_BUFFER_BIT | GL_TRANSFORM_BIT);\n  277  \t\tglEnable(GL_BLEND);\n  278: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  279  \t\tglDisable(GL_CULL_FACE);\n  280  \t\tglDisable(GL_DEPTH_TEST);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineOpenGLES.cpp:\n  215  \t\tglEnable(GL_BLEND);\n  216  \t\tglBlendEquation(GL_FUNC_ADD);\n  217: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  218  \t\tglDisable(GL_CULL_FACE);\n  219  \t\tglDisable(GL_DEPTH_TEST);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/apps/projectGenerator/commandLine/bin/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/areaLightExample/bin/areaLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/glInfoExample/src/glewOutput.cpp:\n  123      glewInfoFunc(\"glBlendColor\", glBlendColor == NULL);\n  124      glewInfoFunc(\"glBlendEquation\", glBlendEquation == NULL);\n  125:     glewInfoFunc(\"glBlendFuncSeparate\", glBlendFuncSeparate == NULL);\n  126      glewInfoFunc(\"glFogCoordPointer\", glFogCoordPointer == NULL);\n  127      glewInfoFunc(\"glFogCoordd\", glFogCoordd == NULL);\n  ...\n  431      glewInfoFunc(\"glBlendEquationSeparatei\", glBlendEquationSeparatei == NULL);\n  432      glewInfoFunc(\"glBlendEquationi\", glBlendEquationi == NULL);\n  433:     glewInfoFunc(\"glBlendFuncSeparatei\", glBlendFuncSeparatei == NULL);\n  434:     glewInfoFunc(\"glBlendFunci\", glBlendFunci == NULL);\n  435      glewInfoFunc(\"glMinSampleShading\", glMinSampleShading == NULL);\n  436  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/singleLightExample/bin/singleLightExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/bin/vboMeshDrawInstancedExample:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp:\n 1028  \t\t\tglEnable(GL_BLEND);\n 1029  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1030: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1031  \t\t\tbreak;\n 1032  \n ....\n 1034  \t\t\tglEnable(GL_BLEND);\n 1035  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1036: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1037  \t\t\tbreak;\n 1038  \n ....\n 1040  \t\t\tglEnable(GL_BLEND);\n 1041  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1042: \t\t\tglBlendFunc(GL_DST_COLOR, GL_ONE_MINUS_SRC_ALPHA /* GL_ZERO or GL_ONE_MINUS_SRC_ALPHA */);\n 1043  \t\t\tbreak;\n 1044  \n ....\n 1046  \t\t\tglEnable(GL_BLEND);\n 1047  \t\t\tglBlendEquation(GL_FUNC_ADD);\n 1048: \t\t\tglBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ONE);\n 1049  \t\t\tbreak;\n 1050  \n ....\n 1052  \t\t\tglEnable(GL_BLEND);\n 1053  \t\t\tglBlendEquation(GL_FUNC_REVERSE_SUBTRACT);\n 1054: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1055  \t\t\tbreak;\n 1056  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLRenderer.cpp:\n 1215  \t//why do we need this?\n 1216  \tglEnable(GL_BLEND);\n 1217: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1218  }\n 1219  \n ....\n 1238  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1239  \t\t\t#endif\n 1240: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1241  \t\t\tbreak;\n 1242  \t\t}\n ....\n 1247  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1248  \t\t\t#endif\n 1249: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1250  \t\t\tbreak;\n 1251  \t\t}\n ....\n 1256  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1257  \t\t\t#endif\n 1258: \t\t\tglBlendFunc(GL_DST_COLOR, GL_ONE_MINUS_SRC_ALPHA /* GL_ZERO or GL_ONE_MINUS_SRC_ALPHA */);\n 1259  \t\t\tbreak;\n 1260  \t\t}\n ....\n 1265  \t\t\t\tglBlendEquation(GL_FUNC_ADD);\n 1266  \t\t\t#endif\n 1267: \t\t\tglBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ONE);\n 1268  \t\t\tbreak;\n 1269  \t\t}\n ....\n 1276  \t\t\tofLogWarning(\"ofGLRenderer\") << \"OF_BLENDMODE_SUBTRACT not currently supported on OpenGL ES\";\n 1277  \t\t#endif\n 1278: \t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n 1279  \t\t\tbreak;\n 1280  \t\t}\n ....\n 1646  \n 1647  \tglEnable(GL_BLEND);\n 1648: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1649  #ifndef TARGET_OPENGLES\n 1650  \t// this temporarily enables alpha testing,\n ....\n 1664  #endif\n 1665  \t// restore blendmode\n 1666: \tglBlendFunc(blend_src, blend_dst);\n 1667  \n 1668  \tif (hasModelView)\n ....\n 1690  \n 1691  \tglEnable(GL_BLEND);\n 1692: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n 1693  \n 1694  \tmutThis->bind(font.getFontTexture(),0);\n ....\n 1699  \t\tglDisable(GL_BLEND);\n 1700  \t}\n 1701: \tglBlendFunc(blend_src, blend_dst);\n 1702  }\n 1703  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/projectGenerator-linux64/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/projectGenerator-linux64/resources/app/app/projectGenerator:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/vendor/apothecary/apothecary/build/tess2/Example/example.c:\n  236  \t\tglClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n  237  \t\tglEnable(GL_BLEND);\n  238: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  239  \t\tglDisable(GL_TEXTURE_2D);\n  240  \t\tglMatrixMode(GL_PROJECTION);\n  ...\n  245  \t\tglDisable(GL_DEPTH_TEST);\n  246  \t\tglEnable(GL_BLEND);\n  247: \t\tglBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);\n  248  \n  249  #ifdef USE_POOL\n\n/home/ravenskrag/Desktop/gem_structure/vendor/apothecary/apothecary/build/tess2_patched/Example/example.c:\n  236  \t\tglClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n  237  \t\tglEnable(GL_BLEND);\n  238: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  239  \t\tglDisable(GL_TEXTURE_2D);\n  240  \t\tglMatrixMode(GL_PROJECTION);\n  ...\n  245  \t\tglDisable(GL_DEPTH_TEST);\n  246  \t\tglEnable(GL_BLEND);\n  247: \t\tglBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);\n  248  \n  249  #ifdef USE_POOL\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/bundler/gems/chipmunk-996b920f7863/demo/chipmunk_demo.rb:\n  230  \t\tglEnable(GL_POINT_SMOOTH);\n  231  \t\tglEnable(GL_BLEND);\n  232: \t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  233  \t\tglHint(GL_LINE_SMOOTH_HINT, GL_DONT_CARE);\n  234  \t\tglHint(GL_POINT_SMOOTH_HINT, GL_DONT_CARE);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/bundler/gems/chipmunk-996b920f7863/vendor/chipmunk-6.1.3/Demo/ChipmunkDemo.c:\n  473  \t\n  474  \tglEnable(GL_BLEND);\n  475: \tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  476  }\n  477  \n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/misc/trislam.rb:\n  581    # Use antialiased lines\n  582    glEnable(GL_BLEND)\n  583:   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n  584    glEnable(GL_LINE_SMOOTH)\n  585    glHint(GL_LINE_SMOOTH_HINT, GL_NICEST)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson08.rb:\n   55      glDepthFunc GL_LEQUAL\n   56      glColor4f 1.0, 1.0, 1.0, 0.5\n   57:     glBlendFunc GL_SRC_ALPHA, GL_ONE\n   58      glHint GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST\n   59  \n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson09.rb:\n   57      glClearDepth 1.0\n   58      glHint GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST\n   59:     glBlendFunc GL_SRC_ALPHA, GL_ONE\n   60      glEnable GL_BLEND\n   61  \n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson19.rb:\n   85      glDisable GL_DEPTH_TEST\n   86      glEnable GL_BLEND\n   87:     glBlendFunc GL_SRC_ALPHA, GL_ONE\n   88      glHint GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST\n   89      glHint GL_POINT_SMOOTH_HINT, GL_NICEST\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/NeHe/nehe_lesson36.rb:\n  219    glEnable(GL_TEXTURE_2D) # Enable 2D Texture Mapping\n  220    glDisable(GL_DEPTH_TEST) # Disable Depth Testing\n  221:   glBlendFunc(GL_SRC_ALPHA,GL_ONE) # Set Blending Mode\n  222    glEnable(GL_BLEND) # Enable Blending\n  223    glBindTexture(GL_TEXTURE_2D,$blurTexture) # Bind To The Blur Texture\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/aapoly.rb:\n   50    glCullFace(GL_BACK)\n   51    glEnable(GL_CULL_FACE)\n   52:   glBlendFunc(GL_SRC_ALPHA_SATURATE, GL_ONE)\n   53    glClearColor(0.0, 0.0, 0.0, 0.0)\n   54  end\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/aargb.rb:\n   53    glEnable(GL_LINE_SMOOTH)\n   54    glEnable(GL_BLEND)\n   55:   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n   56    glHint(GL_LINE_SMOOTH_HINT, GL_DONT_CARE)\n   57    glLineWidth(1.5)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/alpha.rb:\n   50  def init\n   51    glEnable(GL_BLEND)\n   52:   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n   53    glShadeModel(GL_FLAT)\n   54    glClearColor(0.0, 0.0, 0.0, 0.0)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/examples/RedBook/alpha3D.rb:\n  102    glEnable(GL_BLEND)\n  103    glDepthMask(GL_FALSE)\n  104:   glBlendFunc(GL_SRC_ALPHA, GL_ONE)\n  105    glCallList($cubeList)\n  106    glDepthMask(GL_TRUE)\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/fptr_struct.h:\n    6  GLvoid (APIENTRY * glArrayElement)(GLint);\n    7  GLvoid (APIENTRY * glBindTexture)(GLenum,GLuint);\n    8: GLvoid (APIENTRY * glBlendFunc)(GLenum,GLenum);\n    9  GLvoid (APIENTRY * glCallList)(GLuint);\n   10  GLvoid (APIENTRY * glClear)(GLbitfield);\n   ..\n  308  GLvoid (APIENTRY * glCompressedTexSubImage1D)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,GLvoid*);\n  309  GLvoid (APIENTRY * glGetCompressedTexImage)(GLenum,GLint,GLvoid*);\n  310: GLvoid (APIENTRY * glBlendFuncSeparate)(GLenum,GLenum,GLenum,GLenum);\n  311  GLvoid (APIENTRY * glFogCoordf)(GLfloat);\n  312  GLvoid (APIENTRY * glFogCoordd)(GLdouble);\n  ...\n  723  GLvoid (APIENTRY * glFogCoorddvEXT)(GLdouble *);\n  724  GLvoid (APIENTRY * glFogCoordPointerEXT)(GLenum,GLsizei,const GLvoid *);\n  725: GLvoid (APIENTRY * glBlendFuncSeparateEXT)(GLenum,GLenum,GLenum,GLenum);\n  726  GLvoid (APIENTRY * glActiveStencilFaceEXT)(GLenum);\n  727  GLvoid (APIENTRY * glDepthBoundsEXT)(GLclampd,GLclampd);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/gl-1.0-1.1.c:\n 3145    rb_define_method(klass, \"glEvalPoint2\", gl_EvalPoint2, 2);\n 3146    rb_define_method(klass, \"glAlphaFunc\", gl_AlphaFunc, 2);\n 3147:   rb_define_method(klass, \"glBlendFunc\", gl_BlendFunc, 2);\n 3148    rb_define_method(klass, \"glLogicOp\", gl_LogicOp, 1);\n 3149    rb_define_method(klass, \"glStencilFunc\", gl_StencilFunc, 3);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/gl-1.4.c:\n  299  void gl_init_functions_1_4(VALUE klass)\n  300  {\n  301: \trb_define_method(klass, \"glBlendFuncSeparate\", gl_BlendFuncSeparate, 4);\n  302  \trb_define_method(klass, \"glFogCoordf\", gl_FogCoordf, 1);\n  303  \trb_define_method(klass, \"glFogCoordfv\", gl_FogCoordfv, 1);\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/gl-ext-ext.c:\n  783  \n  784  /* #173 - GL_EXT_blend_func_separate */\n  785: \trb_define_method(klass, \"glBlendFuncSeparateEXT\", gl_BlendFuncSeparateEXT, 4);\n  786  \n  787  /* #268 - GL_EXT_stencil_two_side */\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/GL/gl.h:\n  758  GLAPI void GLAPIENTRY glAlphaFunc( GLenum func, GLclampf ref );\n  759  \n  760: GLAPI void GLAPIENTRY glBlendFunc( GLenum sfactor, GLenum dfactor );\n  761  \n  762  GLAPI void GLAPIENTRY glLogicOp( GLenum opcode );\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/ext/opengl/GL/glext.h:\n  365  #define GL_CONSTANT_ALPHA                 0x8003\n  366  #define GL_ONE_MINUS_CONSTANT_ALPHA       0x8004\n  367: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n  368  typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);\n  369  typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);\n  ...\n  413  typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);\n  414  #ifdef GL_GLEXT_PROTOTYPES\n  415: GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n  416  GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);\n  417  GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);\n  ...\n 1733  typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);\n 1734  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 1735: typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);\n 1736: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 1737  typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);\n 1738  typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);\n ....\n 1780  GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);\n 1781  GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 1782: GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);\n 1783: GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 1784  GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);\n 1785  GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);\n ....\n 3092  typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);\n 3093  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 3094: typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);\n 3095: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 3096  #ifdef GL_GLEXT_PROTOTYPES\n 3097  GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);\n 3098  GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 3099: GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);\n 3100: GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 3101  #endif\n 3102  #endif /* GL_ARB_draw_buffers_blend */\n ....\n 5176  #ifndef GL_AMD_draw_buffers_blend\n 5177  #define GL_AMD_draw_buffers_blend 1\n 5178: typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);\n 5179: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 5180  typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);\n 5181  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 5182  #ifdef GL_GLEXT_PROTOTYPES\n 5183: GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst);\n 5184: GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 5185  GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode);\n 5186  GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n ....\n 6207  #define GL_BLEND_DST_ALPHA_EXT            0x80CA\n 6208  #define GL_BLEND_SRC_ALPHA_EXT            0x80CB\n 6209: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 6210  #ifdef GL_GLEXT_PROTOTYPES\n 6211: GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 6212  #endif\n 6213  #endif /* GL_EXT_blend_func_separate */\n ....\n 8604  #ifndef GL_INGR_blend_func_separate\n 8605  #define GL_INGR_blend_func_separate 1\n 8606: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8607  #ifdef GL_GLEXT_PROTOTYPES\n 8608: GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8609  #endif\n 8610  #endif /* GL_INGR_blend_func_separate */\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/test/test_gl_10_11.rb:\n  279      assert_equal(0.5, glGetDoublev(GL_ALPHA_TEST_REF))\n  280  \n  281:     glBlendFunc(GL_CONSTANT_ALPHA, GL_ONE_MINUS_DST_COLOR)\n  282      assert_equal(GL_CONSTANT_ALPHA, glGetIntegerv(GL_BLEND_SRC))\n  283      assert_equal(GL_ONE_MINUS_DST_COLOR, glGetIntegerv(GL_BLEND_DST))\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/test/test_gl_14.rb:\n   79    end\n   80  \n   81:   def test_glblendfuncseparate\n   82:     glBlendFuncSeparate(GL_SRC_COLOR, GL_SRC_COLOR, GL_SRC_COLOR, GL_SRC_COLOR)\n   83      assert_equal(GL_SRC_COLOR, glGetIntegerv(GL_BLEND_SRC_RGB))\n   84      assert_equal(GL_SRC_COLOR, glGetIntegerv(GL_BLEND_SRC_ALPHA))\n\n/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/opengl-0.10.0/test/test_gl_ext_ext.rb:\n  257    def test_gl_ext_blend_func_separate\n  258      supported?(\"GL_EXT_blend_func_separate\")\n  259:     glBlendFuncSeparateEXT(GL_ZERO, GL_ONE, GL_ZERO, GL_ONE)\n  260      assert_equal(GL_ZERO, glGetIntegerv(GL_BLEND_SRC_RGB_EXT))\n  261      assert_equal(GL_ONE, glGetIntegerv(GL_BLEND_DST_RGB_EXT))\n  262      assert_equal(GL_ZERO, glGetIntegerv(GL_BLEND_SRC_ALPHA_EXT))\n  263      assert_equal(glGetIntegerv(GL_BLEND_DST_ALPHA_EXT), GL_ONE)\n  264:     glBlendFuncSeparateEXT(GL_ONE, GL_ZERO, GL_ONE, GL_ZERO)\n  265      assert_equal(GL_ONE, glGetIntegerv(GL_BLEND_SRC_RGB_EXT))\n  266      assert_equal(GL_ZERO, glGetIntegerv(GL_BLEND_DST_RGB_EXT))\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.10.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n/home/ravenskrag/Desktop/gem_structure/vendor/OpenFrameworks/of_v0.11.0_linux64gcc6_release.tar.gz:\n    File too large, skipping\n\n/home/ravenskrag/Code/Source/blender-git/blender/source/blender/draw/intern/draw_manager_exec.c:\n  244          switch (test) {\n  245            case DRW_STATE_BLEND_ALPHA:\n  246:             glBlendFuncSeparate(GL_SRC_ALPHA,\n  247                                  GL_ONE_MINUS_SRC_ALPHA, /* RGB */\n  248                                  GL_ONE,\n  ...\n  251            case DRW_STATE_BLEND_BACKGROUND:\n  252              /* Special blend to add color under and multiply dst by alpha. */\n  253:             glBlendFuncSeparate(GL_ONE_MINUS_DST_ALPHA,\n  254                                  GL_SRC_ALPHA, /* RGB */\n  255                                  GL_ZERO,\n  ...\n  257              break;\n  258            case DRW_STATE_BLEND_ALPHA_PREMUL:\n  259:             glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);\n  260              break;\n  261            case DRW_STATE_BLEND_MUL:\n  262:             glBlendFunc(GL_DST_COLOR, GL_ZERO);\n  263              break;\n  264            case DRW_STATE_BLEND_OIT:\n  265:             glBlendFuncSeparate(GL_ONE,\n  266                                  GL_ONE, /* RGB */\n  267                                  GL_ZERO,\n  ...\n  270            case DRW_STATE_BLEND_ADD:\n  271              /* Do not let alpha accumulate but premult the source RGB by it. */\n  272:             glBlendFuncSeparate(GL_SRC_ALPHA,\n  273                                  GL_ONE, /* RGB */\n  274                                  GL_ZERO,\n  ...\n  277            case DRW_STATE_BLEND_ADD_FULL:\n  278              /* Let alpha accumulate. */\n  279:             glBlendFunc(GL_ONE, GL_ONE);\n  280              break;\n  281            case DRW_STATE_BLEND_SUB:\n  282:             glBlendFunc(GL_ONE, GL_ONE);\n  283              break;\n  284            case DRW_STATE_BLEND_CUSTOM:\n  285              /* Custom blend parameters using dual source blending.\n  286               * Can only be used with one Draw Buffer. */\n  287:             glBlendFunc(GL_ONE, GL_SRC1_COLOR);\n  288              break;\n  289            case DRW_STATE_LOGIC_INVERT:\n  290              /* Replace logic op by blend func to support floating point framebuffer. */\n  291:             glBlendFuncSeparate(GL_ONE_MINUS_DST_COLOR,\n  292                                  GL_ZERO, /* RGB */\n  293                                  GL_ZERO,\n  ...\n  307        else {\n  308          glDisable(GL_BLEND);\n  309:         glBlendFunc(GL_ONE, GL_ONE); /* Don't multiply incoming color by alpha. */\n  310        }\n  311      }\n  ...\n  455  \n  456    /* Reset blending function */\n  457:   glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);\n  458  }\n  459  \n\n/home/ravenskrag/Code/Source/blender-git/blender/source/blender/gpu/intern/gpu_state.c:\n   65  void GPU_blend_set_func(eGPUBlendFunction sfactor, eGPUBlendFunction dfactor)\n   66  {\n   67:   glBlendFunc(gpu_get_gl_blendfunction(sfactor), gpu_get_gl_blendfunction(dfactor));\n   68  }\n   69  \n   ..\n   73                                   eGPUBlendFunction dst_alpha)\n   74  {\n   75:   glBlendFuncSeparate(gpu_get_gl_blendfunction(src_rgb),\n   76                        gpu_get_gl_blendfunction(dst_rgb),\n   77                        gpu_get_gl_blendfunction(src_alpha),\n\n242 matches across 50 files\n",
			"settings":
			{
				"buffer_size": 89169,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofApp.cpp",
			"settings":
			{
				"buffer_size": 8147,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/graphicsExample/README.md",
			"settings":
			{
				"buffer_size": 1378,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.cpp",
			"settings":
			{
				"buffer_size": 42941,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp",
			"settings":
			{
				"buffer_size": 88399,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n\n// ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.cpp\n\n//----------------------------------------------------------\nvoid ofEnableAlphaBlending(){\n\tofEnableBlendMode(OF_BLENDMODE_ALPHA);\n}\n\nvoid ofEnableBlendMode(ofBlendMode blendMode){\n\tofGetCurrentRenderer()->setBlendMode(blendMode);\n}\n\n\n\n\n// ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp\n\n//----------------------------------------------------------\nvoid ofGLProgrammableRenderer::setBlendMode(ofBlendMode blendMode){\n\tswitch (blendMode){\n\t\tcase OF_BLENDMODE_DISABLED:\n\t\t\tglDisable(GL_BLEND);\n\t\t\tbreak;\n\n\t\tcase OF_BLENDMODE_ALPHA:\n\t\t\tglEnable(GL_BLEND);\n\t\t\tglBlendEquation(GL_FUNC_ADD);\n\t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n\t\t\tbreak;\n\n\t\tcase OF_BLENDMODE_ADD:\n\t\t\tglEnable(GL_BLEND);\n\t\t\tglBlendEquation(GL_FUNC_ADD);\n\t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n\t\t\tbreak;\n\n\t\tcase OF_BLENDMODE_MULTIPLY:\n\t\t\tglEnable(GL_BLEND);\n\t\t\tglBlendEquation(GL_FUNC_ADD);\n\t\t\tglBlendFunc(GL_DST_COLOR, GL_ONE_MINUS_SRC_ALPHA /* GL_ZERO or GL_ONE_MINUS_SRC_ALPHA */);\n\t\t\tbreak;\n\n\t\tcase OF_BLENDMODE_SCREEN:\n\t\t\tglEnable(GL_BLEND);\n\t\t\tglBlendEquation(GL_FUNC_ADD);\n\t\t\tglBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ONE);\n\t\t\tbreak;\n\n\t\tcase OF_BLENDMODE_SUBTRACT:\n\t\t\tglEnable(GL_BLEND);\n\t\t\tglBlendEquation(GL_FUNC_REVERSE_SUBTRACT);\n\t\t\tglBlendFunc(GL_SRC_ALPHA, GL_ONE);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tcurrentStyle.blendingMode = blendMode;\n}\n\n",
			"settings":
			{
				"buffer_size": 1423,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/rubyOF.cpp",
			"settings":
			{
				"buffer_size": 7087,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Color.cpp",
			"settings":
			{
				"buffer_size": 7756,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/profiler.callgrind",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 750.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"glsl",
				"Set Syntax: GLSL"
			],
			[
				"sort",
				"SortBy: Alphabetically"
			],
			[
				"sor",
				"SortBy: Alphabetically"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"uniq",
				"Permute Lines: Unique"
			],
			[
				"lowe",
				"Convert Case: Lower Case"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"ruby",
				"Set Syntax: Ruby"
			],
			[
				"jso",
				"Set Syntax: JSON"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"low",
				"Convert Case: Lower Case"
			],
			[
				"upper ",
				"Convert Case: Upper Case"
			],
			[
				"disabl",
				"Package Control: Disable Package"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"expor",
				"Export to HTML: Show Export Menu"
			],
			[
				"enable pack",
				"Package Control: Enable Package"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"pagke li",
				"Package Control: List Packages"
			],
			[
				"packag list",
				"Package Control: List Packages"
			],
			[
				"package list",
				"Package Control: List Packages"
			],
			[
				"syntax glsl",
				"Set Syntax: GLSL"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"rub",
				"Set Syntax: Ruby"
			],
			[
				"synt rub",
				"Set Syntax: Ruby"
			],
			[
				"auto",
				"Toggle AutoSave: current file only"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"gig",
				"Git GUI Clients: Gitg"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"yaml",
				"Set Syntax: YAML"
			],
			[
				"krake",
				"Git GUI Clients: GitKraken"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"gitg",
				"Git GUI Clients: Gitg"
			],
			[
				"g",
				"Git GUI Clients: Gitg"
			],
			[
				"view as",
				"SublimeHighlight: view as HTML"
			],
			[
				"convert to html",
				"SublimeHighlight: convert to HTML"
			],
			[
				"convert",
				"SublimeHighlight: convert to RTF"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"packge remove",
				"Package Control: Remove Package"
			],
			[
				"list ",
				"Package Control: List Packages"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"enable ",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"add repo",
				"Package Control: Add Repository"
			],
			[
				"packgae",
				"Package Control: List Packages"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"gitgui",
				"Git GUI Clients: Gitg"
			],
			[
				"makefil",
				"Set Syntax: Makefile"
			],
			[
				"ging",
				"Git GUI Clients: Gitg"
			],
			[
				"yam",
				"Set Syntax: YAML"
			],
			[
				"pacage",
				"Package Control: Enable Package"
			],
			[
				"amke",
				"Set Syntax: Makefile"
			],
			[
				"makefile",
				"Set Syntax: Makefile"
			],
			[
				"objec",
				"Set Syntax: Objective-C"
			],
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"makef",
				"Set Syntax: Makefile"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"irb",
				"SublimeREPL: Ruby IRB (deprecated)"
			],
			[
				"ruby ",
				"SublimeREPL: Ruby"
			],
			[
				"r oc",
				"SublimeREPL: Octave"
			],
			[
				"repl o",
				"SublimeREPL: Octave"
			],
			[
				"octav",
				"SublimeREPL: Octave"
			],
			[
				"repl ruby",
				"SublimeREPL: Ruby"
			],
			[
				"repl ru",
				"SublimeREPL: Ruby"
			],
			[
				"repl",
				"SublimeREPL: Octave"
			],
			[
				"repl rub",
				"SublimeREPL: Ruby"
			],
			[
				"repl j",
				"SublimeREPL: Clojure"
			],
			[
				"mal",
				"Set Syntax: MATLAB"
			],
			[
				"matl",
				"Set Syntax: MATLAB"
			],
			[
				"keyb",
				"Preferences: Key Bindings - User"
			],
			[
				"mat",
				"Set Syntax: MATLAB"
			],
			[
				"package en",
				"Package Control: Upgrade Package"
			],
			[
				"package dis",
				"Package Control: Disable Package"
			],
			[
				"matlab",
				"Set Syntax: MATLAB"
			],
			[
				"repl oca",
				"SublimeREPL: Octave"
			],
			[
				"repl octa",
				"SublimeREPL: Octave"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"text",
				"Set Syntax: Plain Text"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"todo",
				"Show TODOs: Project and open files"
			],
			[
				"pla",
				"Set Syntax: Plain Text"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"tod",
				"Show TODOs: Project and open files"
			],
			[
				"to",
				"Show TODOs: Project and open files"
			],
			[
				"",
				"About"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"log",
				"Git: Log Current File"
			],
			[
				"st",
				"Git: Status"
			],
			[
				"stat",
				"Git: Status"
			],
			[
				"pre",
				"Markdown Preview: preview in Browser"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pr",
				"Markdown Preview: preview in Browser"
			],
			[
				"previe",
				"Markdown Preview: preview in Browser"
			],
			[
				"snipp",
				"Snippet: if … end"
			],
			[
				"snip",
				"Snippet: YAML.load(file)"
			],
			[
				"prefer",
				"Preferences: Settings - User"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"vie",
				"Markdown Preview: preview in Browser"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"reve",
				"File: Revert"
			],
			[
				"markdown",
				"Markdown Preview: preview in Sublime Text"
			],
			[
				"view",
				"Markdown Preview: preview in Browser"
			],
			[
				"prev",
				"Markdown Preview: preview in Browser"
			],
			[
				"smark",
				"Set Syntax: Markdown"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"bro",
				"Preferences: Browse Packages"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"fet",
				"Git: Fetch"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"syntax te",
				"Set Syntax: Textile"
			],
			[
				"lo",
				"Git: Log All"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"oto",
				"Show TODOs: Open files only"
			],
			[
				"show",
				"Show TODOs: Project and open files"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"pcaka",
				"Package Control: Install Package"
			],
			[
				"pcak",
				"Package Control: Discover Packages"
			]
		],
		"width": 1062.0
	},
	"console":
	{
		"height": 259.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/blendingExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/types/ofColor.cpp",
		"/home/ravenskrag/Code/Source/blender-git/build_linux_debug/bin/2.90/scripts/addons/archipack/presets/archipack_floor/herringbone_50x10.py",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/c_extension/app.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/python/properties/render_engine_properties.py",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/python/properties/material_properties.py",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/python/ui/RubyOF_properties.py",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/blender_iso_game.sublime-workspace",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxMidi/src/ofxMidiIn.h",
		"/home/ravenskrag/Code/Source/blender-git/build_linux_debug/bin/2.90/scripts/addons/space_view3d_stored_views/core.py",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxOpenCv/libs/opencv/include/opencv2/ts/cuda_perf.hpp",
		"/home/ravenskrag/Desktop/gem_structure/vendor/apothecary/glm/include/glm/gtx/string_cast.inl",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/glm_quat.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofNode.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofNode.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/data/blender_data.json",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/serialization/chipmunk/vec2.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/helpers.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/dependency_graph.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofTexture.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/blender_light.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/GraphicsAdvanced.cpp",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/computeShaderTextureExample/bin/data/computeShader.glsl",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/computeShaderTextureExample/src/ofApp.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/computeShaderTextureExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/computeShaderTextureExample/computeShaderTextureExample.qbs",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofBufferObject.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/multiTextureShaderExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/bin/data/shaders/instanced.frag",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/bin/data/shaders/instanced.vert",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/src/ofApp.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/vboMeshDrawInstancedExample.qbs",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/blender_object.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofVbo.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofVbo.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofVboMesh.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofVboMesh.cpp",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/glm_vec3.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/rubyOF.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/GraphicsAdvanced.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofPixels.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofPixels.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofTexture.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofMaterial.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofMaterial.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofShader.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofShader.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/shaders/phong.vert",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/shaders/phong.frag",
		"/home/ravenskrag/Desktop/New Folder (2)/writing/003 research papers/2020.10.31 using blender with external renderer/notes__defaultShader_noMaterialMeansNoLights.cpp",
		"/home/ravenskrag/Desktop/New Folder (2)/writing/003 research papers/2020.10.31 using blender with external renderer/notes__ofMaterial_bindingShaderAndSettingLightUniforms.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/bin/data/char_display_bg.vert",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/bin/data/char_display_bg.frag",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/bin/data/default.vert",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/bin/data/default_tex2DNoColor.frag",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/c_extension/callbacks.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/c_extension/ofxInstancingMaterial.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/c_extension/ofxInstancingMaterial.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi/lib/core.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/src/main.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/rubyOF.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Color.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Color.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/types/ofColor.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphicsConstants.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/data/char_display_bg.frag",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLRenderer.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofMesh.inl",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofLight.cpp",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/glm_vec2.rb",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/glm_vec4.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/image.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/image.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/c_extension/phong_instanced.vert",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/alphaMaskingShaderExample/bin/data/shaders_gles/alphamask.frag",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/alphaMaskingShaderExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/data/material_editor.frag",
		"/home/ravenskrag/Desktop/New Folder (2)/writing/003 research papers/2020.05.10 p3 a modern curses-like graphics interface/notes__ofTrueTypeFont_defaultShaderBinding.cpp",
		"/home/ravenskrag/Desktop/gem_structure/build/window_guard.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/data/world_data.yaml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/python/__init__.py",
		"/home/ravenskrag/Code/Source/blender-git/build_linux_debug/bin/2.90/scripts/startup/bl_ui/properties_data_light.py",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/controller_state_machine.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/areaLightExample/config.make",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/glm_bindings.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Graphics.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/singleLightExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/singleLightExample/src/ofApp.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/LocalDateTime.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAssimpModelLoader/libs/assimp/include/assimp/material.inl",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLRenderer.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/scheduler.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/of3dGraphics.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/of3dPrimitives.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/of3dPrimitives.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/of3dGraphics.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofMesh.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofLight.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofAppEGLWindow.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/of3dUtils.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/multiLightExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/data/viewport_camera.yaml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/ext/addons_app/testApp/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/Gemfile",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/Gemfile",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/boost/include/boost/container/allocator_traits.hpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/3d/normalsExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/color.rb",
		"/home/ravenskrag/Desktop/gem_structure/vendor/bundle/ruby/2.7.0/gems/rice-2.2.0/rice/Data_Type.ipp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/bin/data/window_geometry.yaml",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphicsBaseTypes.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofCamera.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxInfiniteCanvas/src/ofxInfiniteCanvas.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxInfiniteCanvas/src/ofxInfiniteCanvas.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofWindowSettings.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofAppRunner.cpp",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/glm_mat4.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/glm_bindings.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofAppGLFWWindow.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxiOS/src/utils/ofxiOSExtras.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofCamera.h"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 264.0,
		"where_history":
		[
			"",
			"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/",
			"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/**",
			"/home/ravenskrag/Desktop/gem_structure/bin/projects/blender_iso_game/lib/*",
			"",
			"/home/ravenskrag/Desktop/gem_structure/**/*",
			"/home/ravenskrag/Desktop/gem_structure/*",
			"/home/ravenskrag/Desktop/gem_structure/",
			"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF",
			"/home/ravenskrag/Desktop/gem_structure/",
			"/home/ravenskrag/Desktop/gem_structure/ext/",
			"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF",
			"/home/ravenskrag/Desktop/gem_structure/",
			"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF",
			"",
			"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF,/home/ravenskrag/Desktop/gem_structure/bin/projects/grapevine_midi",
			"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF",
			"",
			"*.rb",
			"",
			"/home/ravenskrag/Desktop/gem_structure/,*.cpp",
			"/home/ravenskrag/Desktop/gem_structure/",
			"/home/ravenskrag/Desktop/gem_structure/,*.rb",
			"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/",
			"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons",
			"",
			"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF",
			"/home/ravenskrag/Desktop/gem_structure,.*cpp",
			"/home/ravenskrag/Desktop/gem_structure,*.rb",
			"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks",
			"/home/ravenskrag/Desktop/gem_structure/bin/,*.rb",
			"/home/ravenskrag/Desktop/gem_structure/bin/**/*.rb",
			"/home/ravenskrag/Desktop/gem_structure/bin",
			"/home/ravenskrag/Desktop/gem_structure/run",
			"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ofEnableBlendMode__wrapper",
			"floatvector",
			"@default",
			"triple",
			"1.0",
			",",
			"f",
			"F",
			"f",
			"///",
			"///< ",
			" ///<",
			"///",
			"ofxinstanc",
			"mat_diffuse",
			"enablealpha",
			"glBlendFunc",
			"color",
			"enablealphablending",
			"ofEnableAlphaBlending",
			"blendmode",
			"glblendfunc",
			"glBlendFunc",
			"v_color",
			"BatchKey",
			"Lighting",
			"ofEnableAlphaBlending",
			"ofFloat",
			"floatcolor",
			"color",
			"__pack_material",
			"alpha",
			"deleted",
			"info: ",
			"info",
			"delete",
			"add",
			".add",
			"@depsgraph.delete",
			"@depsgraph.add",
			"@depsgraph.fetch_",
			".nil?",
			"@depsgraph.fetch_",
			"@depsgraph.find_",
			"find_",
			"puts \"generate",
			"generate mesh",
			"material_map",
			"data['material']",
			".delete",
			"delete",
			".delete",
			"data['material']",
			"@mesh_materials",
			"__pack_material",
			"test_material",
			"update_instanced_material_properties",
			"puts \"pos",
			"puts \"",
			"export_unique_datablocks",
			"__pack_material",
			"mat",
			"puts",
			"find_batch_with_index",
			"RenderBatch.new",
			"find_batch_with_index",
			"batch.new",
			"@state =",
			".draw",
			"obj.data",
			"dimensions",
			"export_unique_datablocks",
			"update.id.name",
			"send_update_data",
			"send_initial_data",
			"yaml",
			"__pack_light",
			"send_mesh_edit_update",
			"self.pack_light_data",
			"send_mesh_edit_update",
			".setup",
			"@depsgraph.",
			"viewporT_camera",
			"space_data",
			"h",
			"context.",
			"=",
			"ortho",
			"pack_transform",
			"self.fifo_write",
			"self.fifo",
			"self.shm_dir",
			"blendermesh.new",
			"@batches.",
			"@m1",
			"diffuse_color",
			"material",
			"find_batch_with_index",
			"renderbatch.new",
			"@depsgraph.find_datablock",
			"@depsgraph.",
			"@lights",
			"find_entity",
			"mesh_materials",
			"find_entity",
			"find_",
			"'mesh_data",
			"mesh_data",
			"pack_mesh_data",
			"pack_transform",
			"send_update_data",
			"material",
			"color",
			"diffuse_color",
			"is_sortablie",
			"RubyOF_Properties",
			"context_material",
			"Material_pt_viewport",
			"viewport display",
			"@mat",
			"@mat2",
			"@mat",
			"material.new",
			"material_PT",
			"viewport display",
			"material",
			"find_material_datablock",
			"\\"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"o",
			" "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 32,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/ravenskrag/Code/Source/blender-git/build_linux_debug/bin/2.90/scripts/startup/bl_ui/properties_material.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8992,
						"regions":
						{
						},
						"selection":
						[
							[
								6282,
								6282
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7100.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "python/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39647,
						"regions":
						{
						},
						"selection":
						[
							[
								27903,
								27903
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 27684.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 818,
						"regions":
						{
						},
						"selection":
						[
							[
								746,
								746
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 910,
						"regions":
						{
						},
						"selection":
						[
							[
								910,
								910
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 89,
						"regions":
						{
						},
						"selection":
						[
							[
								87,
								87
							]
						],
						"settings":
						{
							"auto_name": "type(bpy.data.objects['Cube'].material_slots[0].ma",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/blender_sync.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16677,
						"regions":
						{
						},
						"selection":
						[
							[
								9143,
								9143
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										9233,
										9236
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										7662,
										7664
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7751.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/dependency_graph.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19824,
						"regions":
						{
						},
						"selection":
						[
							[
								2935,
								2935
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2969,
										2972
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1916,
										1919
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3194.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2037,
						"regions":
						{
						},
						"selection":
						[
							[
								1356,
								1356
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "bin/data/world_data.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/instancing_buffer.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3206,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3202,
										3205
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1,
										6
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "ext/c_extension/callbacks.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35972,
						"regions":
						{
						},
						"selection":
						[
							[
								29321,
								29321
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 37325.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "ext/c_extension/shaders/phong_instanced.vert",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5764,
						"regions":
						{
						},
						"selection":
						[
							[
								5220,
								5220
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5762,
										5763
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2049,
										2050
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4496.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": ".bundle/config",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 144,
						"regions":
						{
						},
						"selection":
						[
							[
								144,
								144
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/zzz A File Icon zzz/aliases/XML (Config).sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "ext/c_extension/shaders/phong.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10796,
						"regions":
						{
						},
						"selection":
						[
							[
								10281,
								10281
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										10794,
										10795
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										8440,
										8441
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7784.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "ext/c_extension/ofxInstancingMaterial.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13096,
						"regions":
						{
						},
						"selection":
						[
							[
								3616,
								3616
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										2882,
										2883
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3039.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "ext/c_extension/ofxInstancingMaterial.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8209,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "blender_iso_game.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 266,
						"regions":
						{
						},
						"selection":
						[
							[
								263,
								263
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										262,
										263
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										15,
										16
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/zzz A File Icon zzz/aliases/JSON (Sublime).sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 18,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "lib/entities/blender_light.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3731,
						"regions":
						{
						},
						"selection":
						[
							[
								47,
								47
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3727,
										3730
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1,
										6
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "lib/entities/blender_object.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1942,
						"regions":
						{
						},
						"selection":
						[
							[
								665,
								665
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										821,
										824
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										509,
										512
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 186.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "lib/entities/blender_mesh.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7049,
						"regions":
						{
						},
						"selection":
						[
							[
								4207,
								4207
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4235,
										4238
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										4089,
										4092
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3069.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "lib/entities/blender_material.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 161,
						"regions":
						{
						},
						"selection":
						[
							[
								115,
								115
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										157,
										160
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										5
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "lib/entities/viewport_camera.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7149,
						"regions":
						{
						},
						"selection":
						[
							[
								5887,
								5887
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6867,
										6870
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										5641,
										5644
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6976.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 24,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "lib/core.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20234,
						"regions":
						{
						},
						"selection":
						[
							[
								9108,
								9108
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										9948,
										9951
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										9100,
										9103
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/GraphicsAdvanced.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25552,
						"regions":
						{
						},
						"selection":
						[
							[
								23825,
								23825
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										23841,
										23842
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										23803,
										23804
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26537.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Graphics.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8045,
						"regions":
						{
						},
						"selection":
						[
							[
								302,
								302
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										344,
										345
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										108,
										109
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/graphics.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 237,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										233,
										236
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										6
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10680,
						"regions":
						{
						},
						"selection":
						[
							[
								1210,
								1210
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1209,
										1210
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										1138,
										1139
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2232.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/gl/alphaMaskingShaderExample/src/ofApp.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4849,
						"regions":
						{
						},
						"selection":
						[
							[
								1524,
								1524
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1732,
										1733
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										1397,
										1398
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 558.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 31,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 89169,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										954,
										975
									],
									[
										1236,
										1257
									],
									[
										1481,
										1502
									],
									[
										1752,
										1773
									],
									[
										2033,
										2054
									],
									[
										2308,
										2329
									],
									[
										2557,
										2578
									],
									[
										2814,
										2835
									],
									[
										3081,
										3102
									],
									[
										3348,
										3369
									],
									[
										3673,
										3694
									],
									[
										3948,
										3969
									],
									[
										4243,
										4264
									],
									[
										4531,
										4552
									],
									[
										4828,
										4849
									],
									[
										5128,
										5149
									],
									[
										5422,
										5443
									],
									[
										5721,
										5742
									],
									[
										6025,
										6046
									],
									[
										6400,
										6421
									],
									[
										6793,
										6814
									],
									[
										7013,
										7034
									],
									[
										7228,
										7249
									],
									[
										7560,
										7581
									],
									[
										7924,
										7945
									],
									[
										8185,
										8206
									],
									[
										8395,
										8416
									],
									[
										8664,
										8685
									],
									[
										8967,
										8988
									],
									[
										9283,
										9304
									],
									[
										9563,
										9584
									],
									[
										9987,
										10008
									],
									[
										10489,
										10510
									],
									[
										10709,
										10730
									],
									[
										10962,
										10983
									],
									[
										11366,
										11387
									],
									[
										11854,
										11875
									],
									[
										12170,
										12191
									],
									[
										12279,
										12300
									],
									[
										12536,
										12557
									],
									[
										12769,
										12790
									],
									[
										12968,
										12989
									],
									[
										13294,
										13315
									],
									[
										13486,
										13507
									],
									[
										13764,
										13785
									],
									[
										13983,
										14004
									],
									[
										14198,
										14219
									],
									[
										14384,
										14405
									],
									[
										14643,
										14664
									],
									[
										14902,
										14923
									],
									[
										15152,
										15173
									],
									[
										15408,
										15429
									],
									[
										15686,
										15707
									],
									[
										15939,
										15960
									],
									[
										16158,
										16179
									],
									[
										16397,
										16418
									],
									[
										16600,
										16621
									],
									[
										16788,
										16809
									],
									[
										17156,
										17177
									],
									[
										17390,
										17411
									],
									[
										17728,
										17749
									],
									[
										17831,
										17852
									],
									[
										18073,
										18094
									],
									[
										18322,
										18343
									],
									[
										18530,
										18551
									],
									[
										18780,
										18801
									],
									[
										20466,
										20477
									],
									[
										21363,
										21374
									],
									[
										21855,
										21866
									],
									[
										22151,
										22162
									],
									[
										22547,
										22558
									],
									[
										22843,
										22854
									],
									[
										23476,
										23487
									],
									[
										23498,
										23509
									],
									[
										23851,
										23862
									],
									[
										23874,
										23885
									],
									[
										23930,
										23941
									],
									[
										23945,
										23956
									],
									[
										24516,
										24527
									],
									[
										24678,
										24689
									],
									[
										24824,
										24835
									],
									[
										25026,
										25037
									],
									[
										25195,
										25206
									],
									[
										25422,
										25433
									],
									[
										25564,
										25575
									],
									[
										25717,
										25728
									],
									[
										25854,
										25865
									],
									[
										26047,
										26058
									],
									[
										26256,
										26267
									],
									[
										26369,
										26380
									],
									[
										26559,
										26570
									],
									[
										26678,
										26689
									],
									[
										26839,
										26850
									],
									[
										27336,
										27347
									],
									[
										27539,
										27550
									],
									[
										27825,
										27836
									],
									[
										28028,
										28039
									],
									[
										28306,
										28317
									],
									[
										28650,
										28661
									],
									[
										28898,
										28909
									],
									[
										29230,
										29241
									],
									[
										29546,
										29557
									],
									[
										29807,
										29818
									],
									[
										30194,
										30205
									],
									[
										30553,
										30564
									],
									[
										30831,
										30842
									],
									[
										31122,
										31133
									],
									[
										31426,
										31437
									],
									[
										31764,
										31775
									],
									[
										32099,
										32110
									],
									[
										32417,
										32428
									],
									[
										32871,
										32882
									],
									[
										33229,
										33240
									],
									[
										33606,
										33617
									],
									[
										33924,
										33935
									],
									[
										34289,
										34300
									],
									[
										34821,
										34832
									],
									[
										35422,
										35433
									],
									[
										35512,
										35523
									],
									[
										36029,
										36040
									],
									[
										36107,
										36118
									],
									[
										36632,
										36643
									],
									[
										36725,
										36736
									],
									[
										37070,
										37081
									],
									[
										37151,
										37162
									],
									[
										37437,
										37448
									],
									[
										37536,
										37547
									],
									[
										37923,
										37934
									],
									[
										38010,
										38021
									],
									[
										38459,
										38470
									],
									[
										38630,
										38641
									],
									[
										38924,
										38935
									],
									[
										39096,
										39107
									],
									[
										39452,
										39463
									],
									[
										39799,
										39810
									],
									[
										39830,
										39841
									],
									[
										40267,
										40278
									],
									[
										40617,
										40628
									],
									[
										41266,
										41277
									],
									[
										41580,
										41591
									],
									[
										41838,
										41849
									],
									[
										41971,
										41982
									],
									[
										42095,
										42106
									],
									[
										42383,
										42394
									],
									[
										42642,
										42653
									],
									[
										42759,
										42770
									],
									[
										43017,
										43028
									],
									[
										43239,
										43250
									],
									[
										43466,
										43477
									],
									[
										43631,
										43642
									],
									[
										43931,
										43942
									],
									[
										44124,
										44135
									],
									[
										44657,
										44678
									],
									[
										45486,
										45507
									],
									[
										45768,
										45789
									],
									[
										46013,
										46034
									],
									[
										46284,
										46305
									],
									[
										46565,
										46586
									],
									[
										46840,
										46861
									],
									[
										47089,
										47110
									],
									[
										47346,
										47367
									],
									[
										47613,
										47634
									],
									[
										47880,
										47901
									],
									[
										48205,
										48226
									],
									[
										48480,
										48501
									],
									[
										48775,
										48796
									],
									[
										49063,
										49084
									],
									[
										49360,
										49381
									],
									[
										49660,
										49681
									],
									[
										49954,
										49975
									],
									[
										50253,
										50274
									],
									[
										50557,
										50578
									],
									[
										50932,
										50953
									],
									[
										51325,
										51346
									],
									[
										51545,
										51566
									],
									[
										51760,
										51781
									],
									[
										52092,
										52113
									],
									[
										52456,
										52477
									],
									[
										52717,
										52738
									],
									[
										52927,
										52948
									],
									[
										53196,
										53217
									],
									[
										53499,
										53520
									],
									[
										53815,
										53836
									],
									[
										54095,
										54116
									],
									[
										54519,
										54540
									],
									[
										55021,
										55042
									],
									[
										55241,
										55262
									],
									[
										55494,
										55515
									],
									[
										55898,
										55919
									],
									[
										56386,
										56407
									],
									[
										56702,
										56723
									],
									[
										56811,
										56832
									],
									[
										57068,
										57089
									],
									[
										57301,
										57322
									],
									[
										57500,
										57521
									],
									[
										57826,
										57847
									],
									[
										58018,
										58039
									],
									[
										58296,
										58317
									],
									[
										58515,
										58536
									],
									[
										58730,
										58751
									],
									[
										58916,
										58937
									],
									[
										59175,
										59196
									],
									[
										59434,
										59455
									],
									[
										59684,
										59705
									],
									[
										59940,
										59961
									],
									[
										60218,
										60239
									],
									[
										60471,
										60492
									],
									[
										60690,
										60711
									],
									[
										60929,
										60950
									],
									[
										61132,
										61153
									],
									[
										61320,
										61341
									],
									[
										61688,
										61709
									],
									[
										61922,
										61943
									],
									[
										62260,
										62281
									],
									[
										62363,
										62384
									],
									[
										62605,
										62626
									],
									[
										62854,
										62875
									],
									[
										63062,
										63083
									],
									[
										63312,
										63333
									],
									[
										63680,
										63701
									],
									[
										63706,
										63727
									],
									[
										65297,
										65308
									],
									[
										66194,
										66205
									],
									[
										66686,
										66697
									],
									[
										66982,
										66993
									],
									[
										67378,
										67389
									],
									[
										67674,
										67685
									],
									[
										68307,
										68318
									],
									[
										68329,
										68340
									],
									[
										68682,
										68693
									],
									[
										68705,
										68716
									],
									[
										68761,
										68772
									],
									[
										68776,
										68787
									],
									[
										69347,
										69358
									],
									[
										69509,
										69520
									],
									[
										69655,
										69666
									],
									[
										69857,
										69868
									],
									[
										70026,
										70037
									],
									[
										70253,
										70264
									],
									[
										70395,
										70406
									],
									[
										70548,
										70559
									],
									[
										70685,
										70696
									],
									[
										70878,
										70889
									],
									[
										71087,
										71098
									],
									[
										71200,
										71211
									],
									[
										71390,
										71401
									],
									[
										71509,
										71520
									],
									[
										71670,
										71681
									],
									[
										72167,
										72178
									],
									[
										72370,
										72381
									],
									[
										72656,
										72667
									],
									[
										72859,
										72870
									],
									[
										73137,
										73148
									],
									[
										73481,
										73492
									],
									[
										73729,
										73740
									],
									[
										74061,
										74072
									],
									[
										74377,
										74388
									],
									[
										74638,
										74649
									],
									[
										75025,
										75036
									],
									[
										75384,
										75395
									],
									[
										75662,
										75673
									],
									[
										75953,
										75964
									],
									[
										76257,
										76268
									],
									[
										76595,
										76606
									],
									[
										76930,
										76941
									],
									[
										77248,
										77259
									],
									[
										77702,
										77713
									],
									[
										78060,
										78071
									],
									[
										78437,
										78448
									],
									[
										78755,
										78766
									],
									[
										79120,
										79131
									],
									[
										79652,
										79663
									],
									[
										80253,
										80264
									],
									[
										80343,
										80354
									],
									[
										80860,
										80871
									],
									[
										80938,
										80949
									],
									[
										81463,
										81474
									],
									[
										81556,
										81567
									],
									[
										81901,
										81912
									],
									[
										81982,
										81993
									],
									[
										82268,
										82279
									],
									[
										82367,
										82378
									],
									[
										82754,
										82765
									],
									[
										82841,
										82852
									],
									[
										83290,
										83301
									],
									[
										83461,
										83472
									],
									[
										83755,
										83766
									],
									[
										83927,
										83938
									],
									[
										84283,
										84294
									],
									[
										84630,
										84641
									],
									[
										84661,
										84672
									],
									[
										85098,
										85109
									],
									[
										85448,
										85459
									],
									[
										86097,
										86108
									],
									[
										86411,
										86422
									],
									[
										86669,
										86680
									],
									[
										86802,
										86813
									],
									[
										86926,
										86937
									],
									[
										87214,
										87225
									],
									[
										87473,
										87484
									],
									[
										87590,
										87601
									],
									[
										87848,
										87859
									],
									[
										88070,
										88081
									],
									[
										88297,
										88308
									],
									[
										88462,
										88473
									],
									[
										88762,
										88773
									],
									[
										88955,
										88966
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								69179,
								69179
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										70311,
										70312
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 4,
							"rainbowth.lispy": false,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 59210.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofApp.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8147,
						"regions":
						{
						},
						"selection":
						[
							[
								5579,
								5579
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5580,
										5581
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										5579,
										5580
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4620.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/graphicsExample/README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1378,
						"regions":
						{
						},
						"selection":
						[
							[
								1186,
								1186
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better Markdown/MultiMarkdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42941,
						"regions":
						{
						},
						"selection":
						[
							[
								19141,
								19141
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 19531.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88399,
						"regions":
						{
						},
						"selection":
						[
							[
								37896,
								37896
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										37895,
										37896
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										37809,
										37810
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 36333.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 36,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1423,
						"regions":
						{
						},
						"selection":
						[
							[
								304,
								304
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/rubyOF.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7087,
						"regions":
						{
						},
						"selection":
						[
							[
								1873,
								1873
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1876,
										1877
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										1869,
										1870
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1272.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Color.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7756,
						"regions":
						{
						},
						"selection":
						[
							[
								5336,
								5336
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										7752,
										7753
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5952.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "/home/ravenskrag/Desktop/gem_structure/profiler.callgrind",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 48.0
	},
	"input":
	{
		"height": 67.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.deviot":
	{
		"height": 236.0
	},
	"output.exec":
	{
		"height": 323.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 96.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "qbs debug",
	"project": "blender_iso_game.sublime-project",
	"replace":
	{
		"height": 88.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ofcolor",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/types/ofColor.cpp"
			],
			[
				"ruby.cpp",
				"gem_structure/ext/rubyOF/rubyOF.cpp"
			],
			[
				"graphics.cpp",
				"gem_structure/ext/rubyOF/Graphics.cpp"
			],
			[
				"viewport camer",
				"gem_structure/bin/projects/blender_iso_game/lib/entities/viewport_camera.rb"
			],
			[
				"graphics ad",
				"gem_structure/ext/rubyOF/GraphicsAdvanced.cpp"
			],
			[
				"properties material",
				"scripts/startup/bl_ui/properties_material.py"
			],
			[
				"iso game / .yaml",
				"gem_structure/bin/projects/blender_iso_game/bin/data/world_data.yaml"
			],
			[
				"light.rb",
				"gem_structure/bin/projects/blender_iso_game/lib/entities/blender_light.rb"
			],
			[
				"ofxmidiin.h",
				"gem_structure/ext/openFrameworks/addons/ofxMidi/src/ofxMidiIn.h"
			],
			[
				"iso game core rb",
				"gem_structure/bin/projects/blender_iso_game/lib/core.rb"
			],
			[
				"core",
				"scripts/addons/space_view3d_stored_views/core.py"
			],
			[
				"callbac cpp",
				"gem_structure/bin/projects/blender_iso_game/ext/c_extension/callbacks.cpp"
			],
			[
				"instb b",
				"gem_structure/bin/projects/blender_iso_game/lib/instancing_buffer.rb"
			],
			[
				"dep gra",
				"gem_structure/bin/projects/blender_iso_game/lib/dependency_graph.rb"
			],
			[
				"blendr sync",
				"gem_structure/bin/projects/blender_iso_game/lib/blender_sync.rb"
			],
			[
				"iso game python ini",
				"gem_structure/bin/projects/blender_iso_game/python/__init__.py"
			],
			[
				"phong frag",
				"gem_structure/bin/projects/blender_iso_game/ext/c_extension/shaders/phong.frag"
			],
			[
				"ofx insta",
				"gem_structure/bin/projects/blender_iso_game/ext/c_extension/ofxInstancingMaterial.cpp"
			],
			[
				"iso game core",
				"gem_structure/bin/projects/blender_iso_game/lib/core.rb"
			],
			[
				"ofpixels",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofPixels.cpp"
			],
			[
				"color",
				"gem_structure/lib/rubyOF/color.rb"
			],
			[
				"string cast",
				"gem_structure/vendor/apothecary/glm/include/glm/gtx/string_cast.inl"
			],
			[
				"quaternion",
				"gem_structure/vendor/apothecary/glm/include/glm/gtc/quaternion.hpp"
			],
			[
				"quat.h",
				"gem_structure/vendor/apothecary/glm/include/glm/detail/type_quat.hpp"
			],
			[
				"quat.",
				"gem_structure/ext/openFrameworks/libs/glm/include/glm/detail/type_quat.inl"
			],
			[
				"glm bind",
				"gem_structure/ext/rubyOF/glm_bindings.cpp"
			],
			[
				"rubyofcpp",
				"gem_structure/ext/rubyOF/rubyOF.cpp"
			],
			[
				"glm quat",
				"gem_structure/lib/rubyOF/glm_quat.rb"
			],
			[
				"dep",
				"gem_structure/bin/projects/blender_iso_game/lib/dependency_graph.rb"
			],
			[
				"blender data",
				"gem_structure/bin/projects/blender_iso_game/bin/data/blender_data.json"
			],
			[
				"blenderdata",
				"gem_structure/bin/projects/blender_iso_game/bin/data/blender_data.json"
			],
			[
				"window",
				"gem_structure/bin/projects/blender_iso_game/lib/window.rb"
			],
			[
				"ofnode",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofNode.cpp"
			],
			[
				"depgr",
				"gem_structure/bin/projects/blender_iso_game/lib/dependency_graph.rb"
			],
			[
				"graphics.c",
				"gem_structure/ext/rubyOF/Graphics.cpp"
			],
			[
				"world da",
				"gem_structure/bin/projects/blender_iso_game/bin/data/world_data.yaml"
			],
			[
				"livecode",
				"gem_structure/bin/projects/blender_iso_game/lib/live_code.rb"
			],
			[
				"graphi",
				"gem_structure/ext/rubyOF/GraphicsAdvanced.cpp"
			],
			[
				"rubyof.rb",
				"gem_structure/lib/rubyOF.rb"
			],
			[
				"graphicsadv",
				"gem_structure/ext/rubyOF/GraphicsAdvanced.cpp"
			],
			[
				"ofshade",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofShader.cpp"
			],
			[
				"glpro",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp"
			],
			[
				"ofxinsta",
				"gem_structure/bin/projects/blender_iso_game/ext/c_extension/ofxInstancingMaterial.cpp"
			],
			[
				"callback",
				"gem_structure/bin/projects/blender_iso_game/ext/c_extension/callbacks.cpp"
			],
			[
				"oftexture",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofTexture.cpp"
			],
			[
				"midi core",
				"gem_structure/bin/projects/grapevine_midi/lib/core.rb"
			],
			[
				"vec3rb",
				"gem_structure/lib/rubyOF/glm_vec3.rb"
			],
			[
				"color.cpp",
				"gem_structure/ext/rubyOF/Color.cpp"
			],
			[
				"compute example",
				"gem_structure/ext/openFrameworks/examples/gl/computeShaderTextureExample/computeShaderTextureExample.qbs"
			],
			[
				"fbuffer",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofBufferObject.cpp"
			],
			[
				"glmvec3",
				"gem_structure/lib/rubyOF/glm_vec3.rb"
			],
			[
				"texture.h",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofTexture.h"
			],
			[
				"ofbuferob",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofBufferObject.cpp"
			],
			[
				"ofbasemateril",
				"gem_structure/ext/openFrameworks/addons/ofxAssimpModelLoader/libs/assimp/include/assimp/material.inl"
			],
			[
				"callbac",
				"gem_structure/bin/projects/blender_iso_game/ext/c_extension/callbacks.cpp"
			],
			[
				"ofmat",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofMaterial.cpp"
			],
			[
				"ofmesh",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofMesh.inl"
			],
			[
				"ruby.rb",
				"gem_structure/lib/rubyOF.rb"
			],
			[
				"ofvbomesh",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofVboMesh.cpp"
			],
			[
				"graphs",
				"gem_structure/ext/rubyOF/GraphicsAdvanced.cpp"
			],
			[
				"ofshader",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofShader.cpp"
			],
			[
				"oflight",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofLight.cpp"
			],
			[
				"glrenderer",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLRenderer.cpp"
			],
			[
				"ofmateria",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofMaterial.cpp"
			],
			[
				"vbomeshdrawinst",
				"gem_structure/ext/openFrameworks/examples/gl/vboMeshDrawInstancedExample/vboMeshDrawInstancedExample.qbs"
			],
			[
				"scedul",
				"gem_structure/bin/projects/blender_iso_game/lib/scheduler.rb"
			],
			[
				"ofglrender",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLRenderer.cpp"
			],
			[
				"gl renderer",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp"
			],
			[
				"blender window",
				"gem_structure/bin/projects/blender_iso_game/lib/window.rb"
			],
			[
				"ofmateral",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofMaterial.cpp"
			],
			[
				"blender ofapp",
				"gem_structure/bin/projects/blender_iso_game/ext/addons_app/testApp/src/ofApp.cpp"
			],
			[
				"blender gemfile",
				"gem_structure/bin/projects/blender_iso_game/Gemfile"
			],
			[
				"gem ",
				"gem_structure/Gemfile"
			],
			[
				"ofmaterial",
				"gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofMaterial.cpp"
			],
			[
				"rubyof.cpp",
				"gem_structure/ext/rubyOF/rubyOF.cpp"
			],
			[
				"rubyof",
				"gem_structure/lib/rubyOF.rb"
			],
			[
				"programmable",
				"ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp"
			],
			[
				"windowg",
				"build/window_guard.rb"
			],
			[
				"camera ya",
				"bin/projects/blender_iso_game/bin/data/viewport_camera.yaml"
			],
			[
				"glmbi",
				"ext/rubyOF/glm_bindings.cpp"
			],
			[
				"graph adv",
				"ext/rubyOF/GraphicsAdvanced.cpp"
			],
			[
				"graphc",
				"ext/rubyOF/Graphics.cpp"
			],
			[
				"init p",
				"bin/projects/blender_iso_game/python/__init__.py"
			],
			[
				"matrix trans",
				"vendor/apothecary/glm/include/glm/ext/matrix_transform.hpp"
			],
			[
				"glm matrix oper",
				"vendor/apothecary/glm/include/glm/gtx/matrix_operation.hpp"
			],
			[
				"matrix flo 4x4",
				"vendor/apothecary/glm/include/glm/ext/matrix_float4x4.hpp"
			],
			[
				"glm mat4 type",
				"vendor/apothecary/glm/include/glm/detail/type_mat4x4.hpp"
			],
			[
				"vec3",
				"lib/rubyOF/glm_vec3.rb"
			],
			[
				"glmbin",
				"ext/rubyOF/glm_bindings.cpp"
			],
			[
				"type mat4x4",
				"vendor/apothecary/glm/include/glm/detail/type_mat4x4.hpp"
			],
			[
				"mat double 4x4",
				"vendor/apothecary/glm/include/glm/ext/matrix_double4x4.hpp"
			],
			[
				"glm mat4x4 ",
				"vendor/apothecary/glm/include/glm/mat4x4.hpp"
			],
			[
				"ofgraphi",
				"ext/openFrameworks/libs/openFrameworks/graphics/ofGraphics.h"
			],
			[
				"renderer",
				"ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp"
			],
			[
				"ofapprunner",
				"ext/openFrameworks/libs/openFrameworks/app/ofAppRunner.cpp"
			],
			[
				"ofcamera",
				"ext/openFrameworks/libs/openFrameworks/3d/ofCamera.cpp"
			],
			[
				"glprogramm",
				"ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp"
			],
			[
				"glfwwindow",
				"ext/openFrameworks/libs/openFrameworks/app/ofAppGLFWWindow.cpp"
			],
			[
				"quaternio",
				"vendor/apothecary/glm/include/glm/gtc/quaternion.hpp"
			],
			[
				"ofxinfinit",
				"ext/openFrameworks/addons/ofxInfiniteCanvas/src/ofxInfiniteCanvas.cpp"
			],
			[
				"monkey ",
				"lib/rubyOF/monkey_patches/chipmunk/vec2.rb"
			],
			[
				"windo geom",
				"bin/projects/blender_iso_game/bin/data/window_geometry.yaml"
			],
			[
				"rake",
				"Rakefile"
			],
			[
				"glm mat4",
				"vendor/apothecary/glm/include/glm/mat4x4.hpp"
			],
			[
				"common",
				"common.rb"
			],
			[
				"rake helper",
				"rake/helper_functions.rb"
			],
			[
				"camera yaml",
				"bin/projects/blender_iso_game/bin/data/viewport_camera.yaml"
			],
			[
				".yaml",
				"bin/projects/blender_iso_game/bin/data/viewport_camera.yaml"
			],
			[
				"helper",
				"bin/projects/blender_iso_game/lib/helpers.rb"
			],
			[
				"help",
				"rake/helper_functions.rb"
			],
			[
				"graphics advance",
				"ext/rubyOF/GraphicsAdvanced.cpp"
			],
			[
				"rice data_type",
				"vendor/bundle/ruby/2.7.0/gems/rice-2.2.0/rice/Data_Type.cpp"
			],
			[
				"window geom",
				"bin/projects/blender_iso_game/bin/data/window_geometry.yaml"
			],
			[
				"imguiini",
				"bin/projects/blender_iso_game/imgui.ini"
			],
			[
				"versio",
				"lib/rubyOF/version.rb"
			],
			[
				"vec4",
				"lib/rubyOF/glm_vec4.rb"
			],
			[
				"launch",
				"ext/rubyOF/launcher.cpp"
			],
			[
				"vec3.rb",
				"lib/rubyOF/glm_vec3.rb"
			],
			[
				"ofmesh.h",
				"ext/openFrameworks/libs/openFrameworks/3d/ofMesh.h"
			],
			[
				"mesh",
				"ext/rubyOF/Mesh.cpp"
			],
			[
				"free",
				"lib/rubyOF/freezable.rb"
			],
			[
				"glm vec3",
				"lib/rubyOF/glm_vec3.rb"
			],
			[
				"rubyofrb",
				"lib/rubyOF.rb"
			],
			[
				"point",
				"lib/rubyOF/point.rb"
			],
			[
				"ofquater",
				"ext/openFrameworks/libs/openFrameworks/math/ofQuaternion.h"
			],
			[
				"graphicsconst",
				"ext/openFrameworks/libs/openFrameworks/graphics/ofGraphicsConstants.h"
			],
			[
				"ricesymbol",
				"vendor/bundle/ruby/2.7.0/gems/rice-2.2.0/rice/Symbol.cpp"
			],
			[
				"live code",
				"bin/projects/blender_iso_game/lib/live_code.rb"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Experiments/oF_Test/oF_Test.sublime-project"
			],
			[
				"th",
				"/home/ravenskrag/Documents/Sublime/ThoughtTrace.sublime-project"
			],
			[
				"ete",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"e",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"et",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"gamn",
				"/home/ravenskrag/Documents/Projects/GameDesignNotes.sublime-project"
			],
			[
				"oni",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"on",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"321",
				"/home/ravenskrag/Documents/Projects/CS321_Project.sublime-project"
			],
			[
				"go",
				"/home/ravenskrag/Documents/Projects/Gosu.sublime-project"
			],
			[
				"42",
				"/home/ravenskrag/Documents/Projects/CS425_OgreProject.sublime-project"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 488.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wrap",
				"wrap"
			],
			[
				"keyboard",
				"keyboard_cb"
			],
			[
				"key",
				"keys"
			],
			[
				"setupopeng",
				"ofSetupOpenGL"
			],
			[
				"ofsetupop",
				"ofSetupOpenGL"
			]
		],
		"width": 492.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 421.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
