{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"space",
				"space_history"
			],
			[
				"format",
				"format_number"
			],
			[
				"ui",
				"ui_input"
			],
			[
				"del",
				"delay"
			],
			[
				"fcon",
				"framecount"
			],
			[
				"fps",
				"frames_per_turn"
			],
			[
				"inpu",
				"input_handler"
			],
			[
				"ke",
				"key_pressed"
			],
			[
				"inst",
				"instance_variable_get"
			],
			[
				"reload",
				"reload_successful"
			],
			[
				"res",
				"reload_successful"
			],
			[
				"mainv",
				"main_view"
			],
			[
				"main",
				"main_code"
			],
			[
				"lib",
				"lib_dir"
			],
			[
				"STOU",
				"STDOUT_TERM"
			],
			[
				"STD",
				"STDERR"
			],
			[
				"std",
				"stdout"
			],
			[
				"pst",
				"push_state"
			],
			[
				"step",
				"step_forward"
			],
			[
				"live",
				"live_code"
			],
			[
				"erro",
				"error_log_printer"
			],
			[
				"user",
				"user_input"
			],
			[
				"execu",
				"execution_state"
			],
			[
				"return",
				"returned_to_present"
			],
			[
				"upd",
				"update_state"
			],
			[
				"histo",
				"history_available"
			],
			[
				"replay",
				"replaying"
			],
			[
				"time",
				"timeline"
			],
			[
				"alt",
				"alternate_timeline"
			],
			[
				"maint",
				"main_timeline"
			],
			[
				"chang",
				"change_the_past"
			],
			[
				"exe",
				"execution_state"
			],
			[
				"suf",
				"successful_reload"
			],
			[
				"liv",
				"live_code"
			],
			[
				"compo",
				"component"
			],
			[
				"comp",
				"components"
			],
			[
				"compone",
				"components"
			],
			[
				"font",
				"font_texture"
			],
			[
				"serial",
				"serialized"
			],
			[
				"fp",
				"filepath"
			],
			[
				"data",
				"data_dir"
			],
			[
				"update",
				"update_fiber"
			],
			[
				"local_",
				"local_channel_info"
			],
			[
				"yiel",
				"yielding_collect"
			],
			[
				"Stop",
				"StopIteration"
			],
			[
				"pipe",
				"pipeline"
			],
			[
				"window",
				"window_size"
			],
			[
				"save",
				"save_filepath"
			],
			[
				"yt",
				"yt_channel"
			],
			[
				"text_",
				"text_mesh"
			],
			[
				"attr",
				"attr_reader"
			],
			[
				"icn",
				"icon_pos"
			],
			[
				"scr",
				"scrollY"
			],
			[
				"require",
				"require_all"
			],
			[
				"call",
				"callback"
			],
			[
				"Fiber",
				"Fiber"
			],
			[
				"loca",
				"local_subscriptions"
			],
			[
				"image",
				"image_i"
			],
			[
				"zip",
				"zip_pair"
			],
			[
				"chann",
				"channel-name"
			],
			[
				"channel",
				"channel_name"
			],
			[
				"icon_",
				"icon_filepath"
			],
			[
				"outp",
				"output_path"
			],
			[
				"channe",
				"channel_name"
			],
			[
				"OFB",
				"OF_BUILD_VARIABLE_FILE"
			],
			[
				"root",
				"REPO_ROOT"
			],
			[
				"Fil",
				"File\tFile.open(\"..\") { |file| .. }"
			],
			[
				"exten",
				"ofx_extension_name"
			],
			[
				"repo",
				"REPO_ROOT"
			],
			[
				"expand",
				"expand_path"
			],
			[
				"onl",
				"only_so"
			],
			[
				"sketch",
				"sketch_dump"
			],
			[
				"dump",
				"dump_so"
			],
			[
				"cate",
				"category_dir"
			],
			[
				"exp",
				"expand_path"
			],
			[
				"trail",
				"trail_dt"
			],
			[
				"es",
				"exit_status"
			],
			[
				"have_",
				"have_library"
			],
			[
				"gstream",
				"gstreamer"
			],
			[
				"polib",
				"poco_libs_dir"
			],
			[
				"build_",
				"build_tess2"
			],
			[
				"depe",
				"dependencies"
			],
			[
				"ext",
				"extconf"
			],
			[
				"oF",
				"oF_project"
			],
			[
				"clb",
				"c_library"
			],
			[
				"work",
				"work_dir"
			],
			[
				"temp",
				"temp_ext"
			],
			[
				"mk",
				"mySketch"
			],
			[
				"make",
				"Makefile"
			],
			[
				"bu",
				"build"
			],
			[
				"bur",
				"build_library"
			],
			[
				"clib",
				"clean_library"
			],
			[
				"ce",
				"1.coerce"
			],
			[
				"visua",
				"visualizations"
			],
			[
				"test_",
				"test_package"
			],
			[
				"prev",
				"prev_tick"
			],
			[
				"poss",
				"possible_targets"
			],
			[
				"const",
				"constraint_target"
			],
			[
				"rec",
				"resources"
			],
			[
				"Hash",
				"HashWrapper"
			],
			[
				"remo",
				"removal_flag"
			],
			[
				"con",
				"constraint"
			],
			[
				"paramet",
				"parameterization"
			],
			[
				"visu",
				"visualization"
			],
			[
				"vis",
				"visualization"
			],
			[
				"necessary",
				"necessary_pairs"
			],
			[
				"cont",
				"constraint_type"
			],
			[
				"nece",
				"necessary_pairs"
			],
			[
				"entit",
				"entities"
			],
			[
				"inti",
				"initialize"
			],
			[
				"ent",
				"entities"
			],
			[
				"segment",
				"segment_query"
			],
			[
				"query",
				"query_data"
			],
			[
				"origi",
				"original_color"
			],
			[
				"active",
				"active_cascade"
			],
			[
				"var",
				"var_name"
			],
			[
				"projec",
				"project_directory"
			],
			[
				"other",
				"other_stuff"
			],
			[
				"unpa",
				"unpack_with_class_name"
			],
			[
				"compon",
				"component"
			],
			[
				"qu",
				"query_components"
			],
			[
				"styl",
				"style_components"
			],
			[
				"names",
				"named_styles"
			],
			[
				"full",
				"full_path"
			],
			[
				"sc",
				"style_component"
			],
			[
				"primary",
				"primary_style"
			],
			[
				"casc",
				"cascade_list"
			],
			[
				"enti",
				"entity_id"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "env GDK_SCALE=2 GDK_DPI_SCALE=0.5 /opt/sublime_merge/sublime_merge %F",
			"settings":
			{
				"buffer_size": 69,
				"line_ending": "Unix",
				"name": "env GDK_SCALE=2 GDK_DPI_SCALE=0.5 /opt/sublime_mer"
			}
		},
		{
			"contents": "\n\n# prereq: #serialize, @history\nmodule MIX_Foo\n  # serialize data and store in @history\n  def save\n    \n  end\n\n  # roll back one step\n  def step_back\n    \n  end\n\n  # roll forward one step\n  def step_forward\n    \n  end\n\n  # (may be able to just use #deep_dup)\n  # Copy \n  # + treat history inner cache with copy-on-write semantics (w\n  # (when objects are equivalent, they point to the same memory)\n  def dup_with_history\n    \n  end\nend\n\n\n\n# ---\n# history containers don't necessary need to have a common parent class: could just use an array if you really wanted to - as long as you don't care about caching schemes\n  # not going to enforce a type check on this, so having a common root type may be unnecessary\n\nclass SpreadHistory\n  def initialize(inner)\n    @inner = inner\n\n    @store = Array.new # serialized objects (YAML or similar)\n    @cache = Hash.new  # live objects (real Ruby objects)\n  end\nend\n\nclass ClusteredHistory\n  def initialize(inner)\n    @inner = inner\n\n    @store = Array.new # serialized objects (YAML or similar)\n    @cache = Hash.new  # live objects (real Ruby objects)\n  end\nend\n\n# ---------\n\n",
			"settings":
			{
				"buffer_size": 1119,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\nrequire 'singleton'\nrequire 'weakref'\n\nmodule RubyOF\n\nclass ResourceManager\n  include Singleton\n  # access using RubyOF::ResourceManager.instance\n  # src: https://ieftimov.com/singleton-pattern\n  \n  def initialize\n    @stack = Array.new\n  end\n  \n  def push_state\n    @stack << StackFrame.new\n  end\n  \n  def pop_state\n    @stack.pop\n  end\n  \n  def stack_frame(&block)\n    push_state\n    block.call\n    pop_state\n  end\n  \n  \n  def load(*args)\n    @stack.last.load(*args)\n  end\n  \n  def unload(*args)\n    @stack.last.unload(*args)\n  end\n  \n  \n  class StackFrame\n    def initialize\n      @storage = Hash.new\n    end\n    \n    # load resource. return cached copy if already loaded\n    def load(data_obj)\n      # Store references using WeakRef, so that when the resource manager holds the last reference to a resource, the resource can be freed.\n      # src: https://endofline.wordpress.com/2011/01/09/getting-to-know-the-ruby-standard-library-weakref/\n      \n      # puts \"ResourceManager#load\"\n      case data_obj\n      when RubyOF::TrueTypeFontSettings\n        # puts \"-----> loading font\"\n        # use TrueTypeFontSettings to load TrueTypeFont\n        @storage[:fonts] ||= Hash.new\n        \n        \n        stored = @storage[:fonts][data_obj]\n        if( stored.nil? || # never loaded\n          (stored.is_a?(WeakRef) && !stored.weakref_alive?) # got unloaded\n        )\n          font = RubyOF::TrueTypeFont.new\n          font.load(data_obj)\n          @storage[:fonts][data_obj] = WeakRef.new(font)\n        end\n        \n        # return the underlying object, not the WeakRef wrapper\n        return @storage[:fonts][data_obj].__getobj__\n      end\n    end\n    \n    # remove resource from the cache\n    def unload()\n      \n    end\n    \n    \n    private \n    \n    \n    def foo(type, data_obj, &block)\n      @storage[type] ||= Hash.new\n      stored = @storage[type][data_obj]\n      if needs_init?(stored)\n        value = block.call\n        @storage[type][data_obj] = WeakRef.new(value)\n      end\n      \n      # return the underlying object, not the WeakRef wrapper\n      return @storage[type][data_obj].__getobj__\n    end\n    \n    def needs_init?(x)\n      return x.nil? || # never loaded\n            (x.is_a?(WeakRef) && !x.weakref_alive?) # got unloaded\n    end\n  end\nend\n\n\nend\n\n# ---\n\n\n# style 1\nRubyOF::ResourceManager.instance.push_state\n  value = RubyOF::TrueTypeFontSettings\n  \n  font = \n    RubyOF::TrueTypeFont.dsl_load do |x|\n      # TakaoPGothic\n      # ^ not installed on Ubunut any more, idk why\n      # try the package \"fonts-takao\" or \"ttf-takao\" as mentioned here:\n      # https://launchpad.net/takao-fonts\n      x.path = \"Noto Sans CJK JP Regular\" # comes with Ubuntu\n      x.size = 20\n      x.add_alphabet :Latin\n      x.add_alphabet :Japanese\n    end\n  # /home/ravenskrag/Desktop/gem_structure/lib/rubyOF/true_type_font.rb\n  # font = RubyOF::ResourceManager.instance.load font_settings\nRubyOF::ResourceManager.instance.pop_state\n\n\n\n# style 2\nRubyOF::ResourceManager.instance.stack_frame do\n  font = \n    RubyOF::TrueTypeFont.dsl_load do |x|\n      # TakaoPGothic\n      # ^ not installed on Ubunut any more, idk why\n      # try the package \"fonts-takao\" or \"ttf-takao\" as mentioned here:\n      # https://launchpad.net/takao-fonts\n      x.path = \"Noto Sans CJK JP Regular\" # comes with Ubuntu\n      x.size = 20\n      x.add_alphabet :Latin\n      x.add_alphabet :Japanese\n    end\n  # /home/ravenskrag/Desktop/gem_structure/lib/rubyOF/true_type_font.rb\n  # font = RubyOF::ResourceManager.instance.load font_settings\nend",
			"settings":
			{
				"buffer_size": 3527,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"file": "Feature_List.txt",
			"settings":
			{
				"buffer_size": 516,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "Feature List"
			}
		},
		{
			"file": "docs/readme.txt",
			"settings":
			{
				"buffer_size": 620,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "docs/update_control_flow.rb",
			"settings":
			{
				"buffer_size": 680,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"contents": "\n\n\n\n\ntwo main use cases for correcting code using live loading\n+ fixing fatal errors (throws error, program crashes)\n+ correcting incorrect behavior (wrong output, but no crash)\n\n\nfixing exeception\n----\nrun code\nfind bug -> execution ends on error\nroll back in time\nfix the bug\ngenerate new states up to the point where execution halted\ncontinue on your way\n\n\nfixing non-fatal error\n----\nrun code\nfind \"bug\" -> output is not what you want (but no crash)\nroll back in time\ngenerate new states up to the point where execution halted\nuse onion skinning effect to search for a bifurcation in the state\n\t(comparing new timeline with the original timeline)\nwhen you find the desired new state, collapse timelines\ncontinue on your way",
			"settings":
			{
				"buffer_size": 727,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "TODO: button event codes should be made more discoverable, especially through REPL / other computational means.\n\n\tCan I put all of the codes in a module? Then I could query that module.\n\tIf it's nested under RubyOF I can further query the module to get to that.\n\t\n\tBut when I call use the constants in the code, this can cause bloat...\n\n\n\nSolution\n-----\ndefined MAIN_OBJ constant in main.rb file for the livecode2 project, which saves a reference to the toplevel object. All toplevel constants are bound to the class of that object.\n\n\nMAIN_OBJ.class.constants.grep /OF_/\n => [:OF_KEY_ESC, :OF_KEY_TAB, :OF_KEY_RETURN, :OF_KEY_DEL, :OF_KEY_SHIFT, :OF_KEY_BACKSPACE, :OF_KEY_SUPER, :OF_KEY_CONTROL, :OF_KEY_ALT, :OF_KEY_RIGHT_SHIFT, :OF_KEY_COMMAND, :OF_KEY_LEFT_SHIFT, :OF_KEY_LEFT_ALT, :OF_KEY_LEFT_CONTROL, :OF_KEY_RIGHT_CONTROL, :OF_KEY_RIGHT_SUPER, :OF_KEY_F1, :OF_KEY_LEFT_COMMAND, :OF_KEY_RIGHT_ALT, :OF_KEY_LEFT_SUPER, :OF_KEY_F2, :OF_KEY_F3, :OF_KEY_RIGHT_COMMAND, :OF_KEY_F5, :OF_KEY_F6, :OF_KEY_F7, :OF_KEY_F8, :OF_KEY_F4, :OF_KEY_F10, :OF_KEY_F11, :OF_KEY_F12, :OF_KEY_RIGHT, :OF_KEY_PAGE_UP, :OF_KEY_PAGE_DOWN, :OF_KEY_HOME, :OF_KEY_LEFT, :OF_KEY_UP, :OF_KEY_DOWN, :OF_KEY_F9, :OF_MOUSE_BUTTON_4, :OF_MOUSE_BUTTON_5, :OF_KEY_END, :OF_MOUSE_BUTTON_1, :OF_MOUSE_BUTTON_2, :OF_MOUSE_BUTTON_3, :OF_MOUSE_BUTTON_RIGHT, :OF_MOUSE_BUTTON_6, :OF_MOUSE_BUTTON_7, :OF_MOUSE_BUTTON_LAST, :OF_MOUSE_BUTTON_MIDDLE, :OF_MOUSE_BUTTON_8, :OF_KEY_INSERT, :OF_MOUSE_BUTTON_LEFT] \n",
			"settings":
			{
				"buffer_size": 1473,
				"line_ending": "Unix",
				"name": "TODO: button event codes should be made more disco"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/.gitignore",
			"settings":
			{
				"buffer_size": 2552,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/button_event_codes.rb",
			"settings":
			{
				"buffer_size": 2340,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/window.rb",
			"settings":
			{
				"buffer_size": 1357,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/build/window_guard.rb",
			"settings":
			{
				"buffer_size": 922,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ravenskrag/Desktop/gem_structure/bin/main.rb",
			"settings":
			{
				"buffer_size": 1815,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/main.rb",
			"settings":
			{
				"buffer_size": 1661,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/c_extension/app.h",
			"settings":
			{
				"buffer_size": 1945,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/c_extension/app.cpp",
			"settings":
			{
				"buffer_size": 17139,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"contents": "FIXME: run into a case where History#update tries to act on a wrapped object that is nil (don't know why - it runs fine for a while)\n\thapppens around turn 20\n\tmay be a result of pause / resume?\n\t\n\t\n\t\n\tYEAH - in the serializaiton of the core state, it's likely that nils are being put into the history queue after the main code completes. If these nils are loaded back up, that would explain this issue.\n\t\n\t^ need to find proof of this\n\t\n\t\n\t\n\tyup. if you try to access an element past the end of the array in Ruby, you just get a nil, which seems to be what is happening here",
			"settings":
			{
				"buffer_size": 574,
				"line_ending": "Unix",
				"name": "FIXME: run into a case where History#update tries"
			}
		},
		{
			"contents": "three things get saved by history in the main controller\n\t@core_space\n\t@input_history\n\t@main_code\n\n@main_code and @input_history can look the same in the logs because they both use LiveCode (History wraps LiveCode which wraps the actual object)\n\nbut @main_code triggers extra code as it gets serialized\n\n@main_code \n\nsee example log below\n(read chunks between \"on update START\" lines)\n\n\n\n\n\nstarting new session: 2019-06-09 23:35:59 -0400\n\nLoading c-extension for core...\nLoading c-extension for project...\nloading Ruby dependencies using Bundler...\n---- inside gemfile\nGEM_ROOT = /home/ravenskrag/Desktop/gem_structure\n--------------------\nLoad Ruby code that defines RubyOF...\nRubyOF: loading ruby code\nLoad up the project-specific Ruby code for the window...\nruby: Window#initialize\nc++: set up module: RubyOF\nc++: constructor - launcher\n-- creating GLFW window\n-- configuring GLFW window\n-- creating openFrameworks app\nc++: constructor - window\nc++: Launcher::show()\n[ error ] ofImage: loadImage(): couldn't load image from \"\"ofxbraitsch/ofxdatgui/icon-radio-on.png\"\"\n[ error ] ofImage: loadImage(): couldn't load image from \"\"ofxbraitsch/ofxdatgui/icon-radio-off.png\"\"\n[ error ] ofImage: loadImage(): couldn't load image from \"\"ofxbraitsch/ofxdatgui/icon-group-open.png\"\"\n[ error ] ofImage: loadImage(): couldn't load image from \"\"ofxbraitsch/ofxdatgui/icon-group-closed.png\"\"\n[ error ] ofImage: loadImage(): couldn't load image from \"\"ofxbraitsch/ofxdatgui/picker-rainbow.png\"\"\nofxSmartFont :: new font added : Verdana.ttf @ pt size 6\nruby: Window#setup\nsaving.. Model::CoreSpace\n\"data size: 1\"\ninit input control\nsaving.. LiveCode\n\"data size: 1\"\nsaving.. LiveCode\n    saving, in body\n\"data size: 1\"\nloading font\nloading font\nsetup complete\nlive loading [GEM_ROOT]/bin/projects/livecode2/lib/UI_InputController.rb\nfile loaded\nlive loading [GEM_ROOT]/bin/projects/livecode2/lib/view_visualize_controller.rb\nfile loaded\nloading font\nloading font\n[notice ] 16\n[notice ] 3686\n[:mouse_in, 0, 0]\n[:mouse_out, 697, 380]\n[:mouse_in, 697, 380]\n[notice ] 32\npause / play\non update START\nlive loading [GEM_ROOT]/bin/projects/livecode2/lib/model_raw_input.rb\nfile loaded\nHistory#update => 1 LiveCode\nsaving.. LiveCode\n\"data size: 2\"\n<<---------\nlive loading [GEM_ROOT]/bin/projects/livecode2/lib/Core_InputController.rb\nfile loaded\nlive loading [GEM_ROOT]/bin/projects/livecode2/lib/model_main_code.rb\nfile loaded\nturn 1\n1\n42\n1000\n1010\n1 => executing\nHistory#update => 1 LiveCode\nsaving.. LiveCode\n    saving, in body\n\"data size: 2\"\n<<---------\nHistory#update => 1 Model::CoreSpace\nsaving.. Model::CoreSpace\n\"data size: 2\"\n<<---------\nHistory\non update START\nHistory#update => 2 LiveCode\nsaving.. LiveCode\n\"data size: 3\"\n<<---------\nturn 2\n1\n2 => executing\nHistory#update => 2 LiveCode\nsaving.. LiveCode\n    saving, in body\n\"data size: 3\"\n<<---------\nHistory#update => 2 Model::CoreSpace\nsaving.. Model::CoreSpace\n\"data size: 3\"\n<<---------\nHistory\non update START\nHistory#update => 3 LiveCode\nsaving.. LiveCode\n\"data size: 4\"\n<<---------\nturn 3\n1\n3 => executing\nHistory#update => 3 LiveCode\nsaving.. LiveCode\n    saving, in body\n\"data size: 4\"\n<<---------\nHistory#update => 3 Model::CoreSpace\nsaving.. Model::CoreSpace\n\"data size: 4\"\n<<---------\nHistory\non update START\nHistory#update => 4 LiveCode\nsaving.. LiveCode\n\"data size: 5\"\n<<---------\nturn 4\n1\n4 => executing\nHistory#update => 4 LiveCode\nsaving.. LiveCode\n    saving, in body\n\"data size: 5\"\n<<---------\nHistory#update => 4 Model::CoreSpace\nsaving.. Model::CoreSpace\n\"data size: 5\"\n<<---------\nHistory",
			"settings":
			{
				"buffer_size": 3553,
				"line_ending": "Unix",
				"name": "three things get saved by history in the main cont"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"contents": "\nhistory = [1,2,3,4,5,6,7]\n\n\n# reset timeline : History#reset\nhistory = history[0..3] # keep on the front, removing some elements at the end\nhistory.slice!((3+1)..-1) # same as above, but more compact - slice off the end\n\n\n# don't take all points, just some (for onion skin)\n# (take the first of every group of 3, aka every third element)\nhistory.each_slice(3).map{|x| x.first}\n\n\n\n# need to figure out how much of the array-style interface to expose\n# but notice that #each_slice is actually provided by the Enumerator\n# (actually, it goes deeper - it's provided by Enumerable)\n# which means you can get that functionality by just returning an Enumerator,\n# which might be better than exposing the whole array / pair of arrays\n# that maintain the history (data array, and cache)\n# \n# (want a system that is read only from the outside, with the notable exception of the #reset)",
			"settings":
			{
				"buffer_size": 876,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 11355 files for \"FIXME\"\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/ext/addons_app/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/controller_state_machine.rb:\n  258      @i += 1\n  259      \n  260:     # FIXME: make sure all classes return self on update, otherwise the pipeline will not work as expected\n  261      \n  262      # input_queue -> @input_history -> @core_input\n  ...\n  279      \n  280      \n  281:     # FIXME: need a way to generate new state from old user input, after code is changed (go back in time and change the past code, but keep the same inputs - interpret them differently)\n  282        # will do this once I have mulitple timelines that can be edited\n  283      \n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/main.rb:\n   78  \n   79  \n   80: # FIXME: clean this up a bit more\n   81  # need to dup the IO file descriptor thing so that I can restore it\n   82  # (IO#reopen is a weird method)\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/UI_InputController.rb:\n   33      \n   34      \n   35:     # # FIXME: allow for manual step, mulit-step, and continuous execution modes\n   36      # step_mode = :mulitstep\n   37      # frames_per_turn = 10\n   ..\n   44      #     framecount = 0\n   45          \n   46:     #     # FIXME: update this loop logic - it's not quite right\n   47      #     # (also not sure if I can use Fiber at all - because the turn counter uses Fiber, this would create a situation with nested fibers)\n   48      #     loop do\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/view_visualize_controller.rb:\n  126                       position: start + CP::Vec2.new(em*(col2_x+1)-3, 0))\n  127        \n  128:       # FIXME: better method to get the full 'length' of the controller i\n  129:       # FIXME: change numbers to smaller proportional font so they sit over the 'x' marks, even with 2 or 3 digit numbers\n  130          # (those numbers should be centered on the column, so you need to start using not only different fonts, but properties of fonts / text)\n  131        length = @controller.instance_variable_get(:@branch_i)\n  ...\n  139        \n  140        \n  141:       # FIXME: Use compressed format for non-active timelines\n  142          # stack 3 symbols: O, X, _\n  143          # one symbol for each type of collection (code, space, input)\n  ...\n  160          \n  161          \n  162:       # FIXME: put '_' in columns where there is no data, rather than just leaving it blank \n  163          vars[sym].length.times do |j|\n  164            screen_print(font: font, color: @colors[0],\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/window.rb:\n  193      \n  194      \n  195:     # FIXME: don't want to update input history all the time though - if execution is paused then only parse direct UI inputs\n  196      \n  197:     # FIXME: need two modes - (1) step forward in a controlled manner, frame by frame and (2) run the simulation forward as fast as possible\n  198      \n  199      \n  200:     # FIXME: remove input history from the main controller, and into this controller\n  201        # wait, but how does that work when you step back in time???\n  202        # maybe this controller specifies how new inputs enter the queue, but then the other controller explains how inputs are processed? that makes sense\n  ...\n  214      # @timeline_controller.draw(self)\n  215      # @main_code.inner.draw(self)\n  216:     # FIXME: figure out how to let @main_code draw to the screen\n  217    end\n  218    \n\n/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/bin/testApp_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/libs/imgui/src/imgui.cpp:\n 1239  \n 1240  // Pass data_size==0 for zero-terminated strings\n 1241: // FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.\n 1242  ImU32 ImHash(const void* data, int data_size, ImU32 seed)\n 1243  {\n ....\n 1357          if (c == 0)\n 1358              break;\n 1359:         if (c < 0x10000)    // FIXME: Losing characters that don't fit in 2 bytes\n 1360              *buf_out++ = (ImWchar)c;\n 1361      }\n ....\n 1723  }\n 1724  \n 1725: // FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)\n 1726  void ImGuiStorage::SetInt(ImGuiID key, int val)\n 1727  {\n ....\n 1884      va_copy(args_copy, args);\n 1885  \n 1886:     int len = ImFormatStringV(NULL, 0, fmt, args);         // FIXME-OPT: could do a first pass write attempt, likely successful on first pass.\n 1887      if (len <= 0)\n 1888      {\n ....\n 1964  {\n 1965      // Set cursor position and a few other things so that SetScrollHere() and Columns() can work when seeking cursor.\n 1966:     // FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue.\n 1967      // The clipper should probably have a 4th step to display the last item in a regular manner.\n 1968      ImGui::SetCursorPosY(pos_y);\n ....\n 1976  // Use case A: Begin() called from constructor with items_height<0, then called again from Sync() in StepNo 1\n 1977  // Use case B: Begin() called from constructor with items_height>0\n 1978: // FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.\n 1979  void ImGuiListClipper::Begin(int count, float items_height)\n 1980  {\n ....\n 2264  {\n 2265      // An active popup disable hovering on other windows (apart from its own children)\n 2266:     // FIXME-OPT: This could be cached/stored within the window.\n 2267      ImGuiContext& g = *GImGui;\n 2268      if (g.NavWindow)\n ....\n 2368  \n 2369      // Compute distance between boxes\n 2370:     // FIXME-NAV: Introducing biases for vertical navigation, needs to be removed.\n 2371      float dbx = NavScoreItemDistInterval(cand.Min.x, cand.Max.x, curr.Min.x, curr.Max.x);\n 2372      float dby = NavScoreItemDistInterval(ImLerp(cand.Min.y, cand.Max.y, 0.2f), ImLerp(cand.Min.y, cand.Max.y, 0.8f), ImLerp(curr.Min.y, curr.Max.y, 0.2f), ImLerp(curr.Min.y, curr.Max.y, 0.8f)); // Scale down on Y to keep using box-distance for vertically touching items\n ....\n 2462      // are found, so it only augments the graph produced by the above method using extra links. (important, since it doesn't guarantee strong connectedness)\n 2463      // This is just to avoid buttons having no links in a particular direction when there's a suitable neighbor. you get good graphs without this too.\n 2464:     // 2017/09/29: FIXME: This now currently only enabled inside menu bars, ideally we'd disable it everywhere. Menus in particular need to catch failure. For general navigation it feels awkward.\n 2465      // Disabling it may lead to disconnected graphs when nodes are very spaced out on different axis. Perhaps consider offering this as an option?\n 2466      if (result->DistBox == FLT_MAX && dist_axial < result->DistAxial)  // Check axial match\n ....\n 2550  \n 2551      // Process Move Request (scoring for navigation)\n 2552:     // FIXME-NAV: Consider policy for double scoring (scoring from NavScoringRectScreen + scoring from a rect wrapped according to current wrapping policy)\n 2553      if ((g.NavId != id || (g.NavMoveRequestFlags & ImGuiNavMoveFlags_AllowCurrentNavId)) && !(item_flags & ImGuiItemFlags_NoNav))\n 2554      {\n ....\n 2926  }\n 2927  \n 2928: static int FindWindowIndex(ImGuiWindow* window) // FIXME-OPT O(N)\n 2929  {\n 2930      ImGuiContext& g = *GImGui;\n ....\n 2935  }\n 2936  \n 2937: static ImGuiWindow* FindWindowNavigable(int i_start, int i_stop, int dir) // FIXME-OPT O(N)\n 2938  {\n 2939      ImGuiContext& g = *GImGui;\n ....\n 3071  \n 3072      // Keyboard: Press and Release ALT to toggle menu layer\n 3073:     // FIXME: We lack an explicit IO variable for \"is the imgui window focused\", so compare mouse validity to detect the common case of back-end clearing releases all keys on ALT-TAB\n 3074      if ((g.ActiveId == 0 || g.ActiveIdAllowOverlap) && IsNavInputPressed(ImGuiNavInput_KeyMenu_, ImGuiInputReadMode_Released))\n 3075          if (IsMousePosValid(&g.IO.MousePos) == IsMousePosValid(&g.IO.MousePosPrev))\n ....\n 3087          {\n 3088              const float NAV_MOVE_SPEED = 800.0f;\n 3089:             const float move_speed = ImFloor(NAV_MOVE_SPEED * g.IO.DeltaTime * ImMin(g.IO.DisplayFramebufferScale.x, g.IO.DisplayFramebufferScale.y)); // FIXME: Doesn't code variable framerate very well\n 3090              g.NavWindowingTarget->Pos += move_delta * move_speed;\n 3091              g.NavDisableMouseHover = true;\n ....\n 3629  \n 3630      // If mouse was first clicked outside of ImGui bounds we also cancel out hovering.\n 3631:     // FIXME: For patterns of drag and drop across OS windows, we may need to rework/remove this test (first committed 311c0ca9 on 2015/02)\n 3632      const bool mouse_dragging_extern_payload = g.DragDropActive && (g.DragDropSourceFlags & ImGuiDragDropFlags_SourceExtern) != 0;\n 3633      if (!mouse_avail_to_imgui && !mouse_dragging_extern_payload)\n ....\n 4127  }\n 4128  \n 4129: // FIXME: Add a more explicit sort order in the window structure.\n 4130  static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)\n 4131  {\n ....\n 4497      {\n 4498          if (!text_end)\n 4499:             text_end = text + strlen(text); // FIXME-OPT\n 4500          text_display_end = text_end;\n 4501      }\n ....\n 4515  \n 4516      if (!text_end)\n 4517:         text_end = text + strlen(text); // FIXME-OPT\n 4518  \n 4519      if (text != text_end)\n ....\n 4757  \n 4758  // Find window given position, search front-to-back\n 4759: // FIXME: Note that we have a lag here because WindowRectClipped is updated in Begin() so windows moved by user via SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is called, aka before the next Begin(). Moving window thankfully isn't affected.\n 4760  static ImGuiWindow* FindHoveredWindow()\n 4761  {\n ....\n 5299  \n 5300      // Center modal windows by default\n 5301:     // FIXME: Should test for (PosCond & window->SetWindowPosAllowFlags) with the upcoming window.\n 5302      if (g.NextWindowData.PosCond == 0)\n 5303          SetNextWindowPos(g.IO.DisplaySize * 0.5f, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));\n ....\n 5655              r_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 16, ref_pos.y + 8);\n 5656          else\n 5657:             r_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 24 * sc, ref_pos.y + 24 * sc); // FIXME: Hard-coded based on mouse cursor shape expectation. Exact dimension not very important.\n 5658          ImVec2 pos = FindBestWindowPosForPopupEx(ref_pos, window->Size, &window->AutoPosLastDirection, r_outer, r_avoid);\n 5659          if (window->AutoPosLastDirection == ImGuiDir_None)\n ....\n 5776      else\n 5777      {\n 5778:         // When the window cannot fit all contents (either because of constraints, either because screen is too small): we are growing the size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than DisplaySize-WindowPadding.\n 5779          ImVec2 size_auto_fit = ImClamp(size_contents, style.WindowMinSize, ImMax(style.WindowMinSize, g.IO.DisplaySize - g.Style.DisplaySafeAreaPadding * 2.0f));\n 5780          ImVec2 size_auto_fit_after_constraint = CalcSizeAfterConstraint(window, size_auto_fit);\n ....\n 5925      for (int border_n = 0; border_n < resize_border_count; border_n++)\n 5926      {\n 5927:         const float BORDER_SIZE = 5.0f;          // FIXME: Only works _inside_ window because of HoveredWindow check.\n 5928          const float BORDER_APPEAR_TIMER = 0.05f; // Reduce visual noise\n 5929          bool hovered, held;\n ....\n 5963              g.NavDisableMouseHover = true;\n 5964              resize_grip_col[0] = GetColorU32(ImGuiCol_ResizeGripActive);\n 5965:             // FIXME-NAV: Should store and accumulate into a separate size buffer to handle sizing constraints properly, right now a constraint will make us stuck.\n 5966              size_target = CalcSizeAfterConstraint(window, window->SizeFull + nav_resize_delta);\n 5967          }\n ....\n 6064          {\n 6065              // May be processed on the next frame if this is our first frame and we are measuring size\n 6066:             // FIXME: Look into removing the branch so everything can go through this same code path for consistency.\n 6067              window->SetWindowPosVal = g.NextWindowData.PosVal;\n 6068              window->SetWindowPosPivot = g.NextWindowData.PosPivotVal;\n ....\n 6101      if (first_begin_of_the_frame)\n 6102      {\n 6103:         const bool window_is_child_tooltip = (flags & ImGuiWindowFlags_ChildWindow) && (flags & ImGuiWindowFlags_Tooltip); // FIXME-WIP: Undocumented behavior of Child+Tooltip for pinned tooltip (#1345)\n 6104  \n 6105          // Initialize\n ....\n 6408  \n 6409          // Update various regions. Variables they depends on are set above in this function.\n 6410:         // FIXME: window->ContentsRegionRect.Max is currently very misleading / partly faulty, but some BeginChild() patterns relies on it.\n 6411          window->ContentsRegionRect.Min.x = window->Pos.x - window->Scroll.x + window->WindowPadding.x;\n 6412          window->ContentsRegionRect.Min.y = window->Pos.y - window->Scroll.y + window->WindowPadding.y + window->TitleBarHeight() + window->MenuBarHeight();\n ....\n 6499              window->DC.ItemFlags = item_flags_backup;\n 6500  \n 6501:             // Title text (FIXME: refactor text alignment facilities along with RenderText helpers, this is too much code for what it does.)\n 6502              ImVec2 text_size = CalcTextSize(name, NULL, true);\n 6503              ImRect text_r = title_bar_rect;\n ....\n 6606  \n 6607      // Stop logging\n 6608:     if (!(window->Flags & ImGuiWindowFlags_ChildWindow))    // FIXME: add more options for scope of logging\n 6609          LogFinish();\n 6610  \n ....\n 6782  \n 6783      // Steal focus on active widgets\n 6784:     if (window->Flags & ImGuiWindowFlags_Popup) // FIXME: This statement should be unnecessary. Need further testing before removing it..\n 6785          if (g.ActiveId != 0 && g.ActiveIdWindow && g.ActiveIdWindow->RootWindow != window)\n 6786              ClearActiveID();\n ....\n 6935  }\n 6936  \n 6937: // FIXME: This may incur a round-trip (if the end user got their data from a float4) but eventually we aim to store the in-flight colors as ImU32\n 6938  void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)\n 6939  {\n ....\n 7726      const char* text_begin = text;\n 7727      if (text_end == NULL)\n 7728:         text_end = text + strlen(text); // FIXME-OPT\n 7729  \n 7730      const ImVec2 text_pos(window->DC.CursorPos.x, window->DC.CursorPos.y + window->DC.CurrentLineTextBaseOffset);\n ....\n 7901              hovered = true;\n 7902              SetHoveredID(id);\n 7903:             if (CalcTypematicPressedRepeatAmount(g.HoveredIdTimer + 0.0001f, g.HoveredIdTimer + 0.0001f - g.IO.DeltaTime, 0.01f, 0.70f)) // FIXME: Our formula for CalcTypematicPressedRepeatAmount() is fishy\n 7904              {\n 7905                  pressed = true;\n ....\n 7925              // PressedOnRelease       |  <on release>   |  <on repeat> <on repeat> .. (NOT on release)\n 7926              // PressedOnDoubleClick   |  <on dclick>    |  <on dclick> <on repeat> <on repeat> ..\n 7927:             // FIXME-NAV: We don't honor those different behaviors.\n 7928              if ((flags & ImGuiButtonFlags_PressedOnClickRelease) && g.IO.MouseClicked[0])\n 7929              {\n ....\n 8537      if (p_open)\n 8538      {\n 8539:         // Create a small overlapping close button // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.\n 8540          ImGuiContext& g = *GImGui;\n 8541          float button_sz = g.FontSize * 0.5f;\n ....\n 8771  }\n 8772  \n 8773: // FIXME: Adding support for clamping on boundaries of the data type would be nice.\n 8774  static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const void* arg2)\n 8775  {\n ....\n 8878      {\n 8879          // Assign constant\n 8880:         // FIXME: We don't bother handling support for legacy operators since they are a little too crappy. Instead we may implement a proper expression evaluator in the future.\n 8881          sscanf(buf, format, data_ptr);\n 8882      }\n ....\n 8914  \n 8915  // Create text input in place of a slider (when CTRL+Clicking on slider)\n 8916: // FIXME: Logic is messy and confusing.\n 8917  bool ImGui::InputScalarAsWidgetReplacement(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_type, void* data_ptr, const char* format)\n 8918  {\n ....\n 8994  \n 8995  // Parse display precision back from the display format string\n 8996: // FIXME: This is still used by some navigation code path to infer a minimum tweak step, but we should aim to rework widgets so it isn't needed.\n 8997  int ImParseFormatPrecision(const char* fmt, int default_precision)\n 8998  {\n ....\n 9069  }\n 9070  \n 9071: // FIXME: Move some of the code into SliderBehavior(). Current responsability is larger than what the equivalent DragBehaviorT<> does, we also do some rendering, etc.\n 9072  template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>\n 9073  static bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiSliderFlags flags)\n ....\n 9272  }\n 9273  \n 9274: // FIXME-LEGACY: Prior to 1.61 our DragInt() function internally used floats and because of this the compile-time default value for format was \"%.0f\".\n 9275  // Even though we changed the compile-time default, we expect users to have carried %f around, which would break the display of DragInt() calls.\n 9276  // To honor backward compatibility we are rewriting the format string, unless IMGUI_DISABLE_OBSOLETE_FUNCTIONS is enabled. What could possibly go wrong?!\n ....\n 10220  static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator( obj->Text[idx-1] ) && !is_separator( obj->Text[idx] ) ) : 1; }\n 10221  static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }\n 10222: #ifdef __APPLE__    // FIXME: Move setting to IO structure\n 10223  static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator( obj->Text[idx-1] ) && is_separator( obj->Text[idx] ) ) : 1; }\n 10224  static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }\n .....\n 10298  // Public API to manipulate UTF-8 text\n 10299  // We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)\n 10300: // FIXME: The existence of this rarely exercised code path is a bit of a nuisance.\n 10301  void ImGuiTextEditCallbackData::DeleteChars(int pos, int bytes_count)\n 10302  {\n .....\n 10395  // Edit a string of text\n 10396  // NB: when active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while active has no effect.\n 10397: // FIXME: Rather messy function partly because we are doing UTF8 > u16 > UTF8 conversions on the go to more easily handle stb_textedit calls. Ideally we should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188\n 10398  bool ImGui::InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)\n 10399  {\n .....\n 10494  \n 10495              // Preserve cursor position and undo/redo stack if we come back to same widget\n 10496:             // FIXME: We should probably compare the whole buffer to be on the safety side. Comparing buf (utf8) and edit_state.Text (wchar).\n 10497              const bool recycle_state = (edit_state.Id == id) && (prev_len_w == edit_state.CurLenW);\n 10498              if (recycle_state)\n .....\n 10737              // Apply new value immediately - copy modified buffer back\n 10738              // Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer\n 10739:             // FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.\n 10740:             // FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.\n 10741              if (is_editable)\n 10742              {\n .....\n 10848          // - Measure text height (for scrollbar)\n 10849          // We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)\n 10850:         // FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.\n 10851          const ImWchar* text_begin = edit_state.Text.Data;\n 10852          ImVec2 cursor_offset, select_start_offset;\n .....\n 10934              const ImWchar* text_selected_end = text_begin + ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end);\n 10935  \n 10936:             float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.\n 10937              float bg_offy_dn = is_multiline ? 0.0f : 2.0f;\n 10938              ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg);\n .....\n 11330  \n 11331      // Display items\n 11332:     // FIXME-OPT: Use clipper (but we need to disable it on the appearing frame to make sure our call to SetItemDefaultFocus() is processed)\n 11333      bool value_changed = false;\n 11334      for (int i = 0; i < items_count; i++)\n .....\n 11363  static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)\n 11364  {\n 11365:     // FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.\n 11366      const char* items_separated_by_zeros = (const char*)data;\n 11367      int items_count = 0;\n .....\n 11392  {\n 11393      int items_count = 0;\n 11394:     const char* p = items_separated_by_zeros;       // FIXME-OPT: Avoid computing this, or at least only when combo is open\n 11395      while (*p)\n 11396      {\n .....\n 11413      const ImGuiStyle& style = g.Style;\n 11414  \n 11415:     if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsSet) // FIXME-OPT: Avoid if vertically clipped.\n 11416          PopClipRect();\n 11417  \n .....\n 11505  }\n 11506  \n 11507: // FIXME: Rename to BeginListBox()\n 11508  // Helper to calculate the size of a listbox and display a label on the right.\n 11509  // Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an empty label \"##empty\"\n .....\n 11533  }\n 11534  \n 11535: // FIXME: Rename to BeginListBox()\n 11536  bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)\n 11537  {\n .....\n 11550  }\n 11551  \n 11552: // FIXME: Rename to EndListBox()\n 11553  void ImGui::ListBoxFooter()\n 11554  {\n .....\n 11822                  float extra = ImClamp(ImFabs(ta.x - tb.x) * 0.30f, 5.0f, 30.0f); // add a bit of extra slack.\n 11823                  ta.x += (window->Pos.x < next_window->Pos.x) ? -0.5f : +0.5f;   // to avoid numerical issues\n 11824:                 tb.y = ta.y + ImMax((tb.y - extra) - ta.y, -100.0f);            // triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?\n 11825                  tc.y = ta.y + ImMin((tc.y + extra) - ta.y, +100.0f);\n 11826                  moving_within_opened_triangle = ImTriangleContainsPoint(ta, tb, tc, g.IO.MousePos);\n .....\n 11991  \n 11992  // A little colored square. Return true when clicked.\n 11993: // FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.\n 11994  // 'desc_id' is not called 'label' because we don't display it next to the button, but only in the tooltip.\n 11995  bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size)\n .....\n 12130      if (allow_opt_picker)\n 12131      {\n 12132:         ImVec2 picker_size(g.FontSize * 8, ImMax(g.FontSize * 8 - (ImGui::GetFrameHeight() + g.Style.ItemInnerSpacing.x), 1.0f)); // FIXME: Picker size copied from main picker function\n 12133          ImGui::PushItemWidth(picker_size.x);\n 12134          for (int picker_type = 0; picker_type < 2; picker_type++)\n .....\n 12397  // ColorPicker\n 12398  // Note: only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.\n 12399: // FIXME: we adjust the big color square height based on item width, which may cause a flickering feedback loop (if automatic height makes a vertical scrollbar appears, affecting automatic width..)\n 12400  bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)\n 12401  {\n .....\n 12889      if (group_data.AdvanceCursor)\n 12890      {\n 12891:         window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.PrevLineTextBaseOffset, group_data.BackupCurrentLineTextBaseOffset);      // FIXME: Incorrect, we should grab the base offset from the *first line* of the group but it is hard to obtain now.\n 12892          ItemSize(group_bb.GetSize(), group_data.BackupCurrentLineTextBaseOffset);\n 12893          ItemAdd(group_bb, 0);\n .....\n 12983  \n 12984      PushColumnClipRect();\n 12985:     PushItemWidth(GetColumnWidth() * 0.65f);  // FIXME: Move on columns setup\n 12986  }\n 12987  \n .....\n 13626      if (!(flags & ImGuiDragDropFlags_AcceptNoDrawDefaultRect) && payload.Preview)\n 13627      {\n 13628:         // FIXME-DRAG: Settle on a proper default visuals for drop target.\n 13629          r.Expand(3.5f);\n 13630          bool push_clip_rect = !window->ClipRect.Contains(r);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/libs/imgui/src/imgui.h:\n  661      ImGuiTreeNodeFlags_Bullet               = 1 << 9,   // Display a bullet instead of arrow\n  662      ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().\n  663:     //ImGuITreeNodeFlags_SpanAllAvailWidth  = 1 << 11,  // FIXME: TODO: Extend hit box horizontally even if not framed\n  664:     //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 12,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible\n  665      ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)\n  666      ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog\n  ...\n  714      ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   // IsWindowHovered() only: Return true if any window is hovered\n  715      ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,   // Return true even if a popup window is normally blocking access to this item/window\n  716:     //ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.\n  717      ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.\n  718      ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,   // Return true even if the position is overlapped by another window\n  ...\n 1491      inline operator ImVec4() const                                  { return Value; }\n 1492  \n 1493:     // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.\n 1494      inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }\n 1495      static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/libs/imgui/src/imgui_demo.cpp:\n  821  \n  822              // Use functions to generate output\n  823:             // FIXME: This is rather awkward because current plot API only pass in indices. We probably want an API passing floats and user provide sample rate/count.\n  824              struct Funcs\n  825              {\n  ...\n  912              if (ImGui::BeginPopup(\"mypicker\"))\n  913              {\n  914:                 // FIXME: Adding a drag and drop example here would be perfect!\n  915                  ImGui::Text(\"MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!\");\n  916                  ImGui::Separator();\n  ...\n 2792      void    AddLog(const char* fmt, ...) IM_FMTARGS(2)\n 2793      {\n 2794:         // FIXME-OPT\n 2795          char buf[1024];\n 2796          va_list args;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/libs/imgui/src/imgui_draw.cpp:\n  674              }\n  675  \n  676:             // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.\n  677              unsigned int idx1 = _VtxCurrentIdx;\n  678              for (int i1 = 0; i1 < count; i1++)\n  ...\n  728              }\n  729  \n  730:             // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.\n  731              unsigned int idx1 = _VtxCurrentIdx;\n  732              for (int i1 = 0; i1 < count; i1++)\n  ...\n  779          // Non Anti-aliased Stroke\n  780          const int idx_count = count*6;\n  781:         const int vtx_count = count*4;      // FIXME-OPT: Not sharing edges\n  782          PrimReserve(idx_count, vtx_count);\n  783  \n  ...\n 2132      // 1946 common ideograms code points for Japanese\n 2133      // Sourced from http://theinstructionlimit.com/common-kanji-character-ranges-for-xna-spritefont-rendering\n 2134:     // FIXME: Source a list of the revised 2136 Joyo Kanji list from 2010 and rebuild this.\n 2135      // You can use ImFontAtlas::GlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.\n 2136      // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)\n ....\n 2265      // Invalidate active font so that the user gets a clear crash instead of a dangling pointer.\n 2266      // If you want to delete fonts you need to do it between Render() and NewFrame().\n 2267:     // FIXME-CLEANUP\n 2268      /*\n 2269      ImGuiContext& g = *GImGui;\n ....\n 2309  \n 2310      // Create a glyph to handle TAB\n 2311:     // FIXME: Needs proper TAB handling but it needs to be contextualized (or we could arbitrary say that each string starts at \"column 0\" ?)\n 2312      if (FindGlyph((unsigned short)' '))\n 2313      {\n ....\n 2405  {\n 2406      // Simple word-wrapping for English, not full-featured. Please submit failing cases!\n 2407:     // FIXME: Much possible improvements (don't cut things like \"word !\", \"word!!!\" but cut within \"word,,,,\", more sensible support for punctuations, support for Unicode punctuations, etc.)\n 2408  \n 2409      // For references, possible wrap point marked with ^\n ....\n 2504  {\n 2505      if (!text_end)\n 2506:         text_end = text_begin + strlen(text_begin); // FIXME-OPT: Need to avoid this.\n 2507  \n 2508      const float line_height = size;\n ....\n 2793  }\n 2794  \n 2795: // FIXME: Cleanup and move code to ImDrawList.\n 2796  void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)\n 2797  {\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/libs/imgui/src/imgui_internal.h:\n  213      ImGuiButtonFlags_DontClosePopups        = 1 << 7,   // disable automatically closing parent popup on press // [UNUSED]\n  214      ImGuiButtonFlags_Disabled               = 1 << 8,   // disable interactions\n  215:     ImGuiButtonFlags_AlignTextBaseLine      = 1 << 9,   // vertically align button to match text baseline - ButtonEx() only // FIXME: Should be removed and handled by SmallButton(), not possible currently because of DC.CursorPosPrevLine\n  216      ImGuiButtonFlags_NoKeyModifiers         = 1 << 10,  // disable interaction if a key modifier is held\n  217      ImGuiButtonFlags_NoHoldingActiveID      = 1 << 11,  // don't set ActiveId while holding the mouse (ImGuiButtonFlags_PressedOnClick only)\n  ...\n  258  };\n  259  \n  260: // FIXME: this is in development, not exposed/functional as a generic feature yet.\n  261  enum ImGuiLayoutType_\n  262  {\n  ...\n  288  };\n  289  \n  290: // FIXME-NAV: Clarify/expose various repeat delay/rate\n  291  enum ImGuiInputReadMode\n  292  {\n  ...\n  524  \n  525      // Const data\n  526:     // FIXME: Bake rounded corners fill/borders in atlas\n  527      ImVec2          CircleVtx12[12];\n  528  \n  ...\n  852      ImGuiItemFlags_AllowKeyboardFocus           = 1 << 0,  // true\n  853      ImGuiItemFlags_ButtonRepeat                 = 1 << 1,  // false    // Button() will return true multiple times based on io.KeyRepeatDelay and io.KeyRepeatRate settings.\n  854:     ImGuiItemFlags_Disabled                     = 1 << 2,  // false    // FIXME-WIP: Disable interactions but doesn't affect visuals. Should be: grey out and disable interactions with widgets that affect data + view widgets (WIP)\n  855      ImGuiItemFlags_NoNav                        = 1 << 3,  // false\n  856      ImGuiItemFlags_NoNavDefaultFocus            = 1 << 4,  // false\n  ...\n  860  \n  861  // Transient per-window data, reset at the beginning of the frame. This used to be called ImGuiDrawContext, hence the DC variable name in ImGuiWindow.\n  862: // FIXME: That's theory, in practice the delimitation between ImGuiWindow and ImGuiWindowTempData is quite tenuous and could be reconsidered.\n  863  struct IMGUI_API ImGuiWindowTempData\n  864  {\n  ...\n  884      int                     NavLayerActiveMask;     // Which layer have been written to (result from previous frame)\n  885      int                     NavLayerActiveMaskNext; // Which layer have been written to (buffer for current frame)\n  886:     bool                    MenuBarAppending;       // FIXME: Remove this\n  887      ImVec2                  MenuBarOffset;          // MenuBarOffset.x is sort of equivalent of a per-layer CursorPos.x, saved/restored as we switch to the menu bar. The only situation when MenuBarOffset.y is > 0 if when (SafeAreaPadding.y > FramePadding.y), often used on TVs.\n  888      ImVector<ImGuiWindow*>  ChildWindows;\n  ...\n  903      float                   IndentX;                // Indentation / start position from left of window (increased by TreePush/TreePop, etc.)\n  904      float                   GroupOffsetX;\n  905:     float                   ColumnsOffsetX;         // Offset to the current column (if ColumnsCurrent > 0). FIXME: This and the above should be a stack to allow use cases like Tree->Column->Tree. Need revamp columns API.\n  906      ImGuiColumnsSet*        ColumnsSet;             // Current columns set\n  907  \n  ...\n  988      ImRect                  OuterRectClipped;                   // = WindowRect just after setup in Begin(). == window->Rect() for root window.\n  989      ImRect                  InnerMainRect, InnerClipRect;\n  990:     ImRect                  ContentsRegionRect;                 // FIXME: This is currently confusing/misleading. Maximum visible content position ~~ Pos + (SizeContentsExplicit ? SizeContentsExplicit : Size - ScrollbarSizes) - CursorStartPos, per axis\n  991      int                     LastFrameActive;                    // Last frame number the window was Active.\n  992      float                   ItemWidthDefault;\n  ...\n 1009  \n 1010      // Navigation / Focus\n 1011:     // FIXME-NAV: Merge all this with the new Nav system, at least the request variables should be moved to ImGuiContext\n 1012      int                     FocusIdxAllCounter;                 // Start at -1 and increase as assigned via FocusItemRegister()\n 1013      int                     FocusIdxTabCounter;                 // (same, but only count widgets which you can Tab through)\n ....\n 1132      IMGUI_API void          EndDragDropTooltip();\n 1133  \n 1134:     // FIXME-WIP: New Columns API\n 1135      IMGUI_API void          BeginColumns(const char* str_id, int count, ImGuiColumnsFlags flags = 0); // setup number of columns. use an identifier to distinguish multiple column sets. close with EndColumns().\n 1136      IMGUI_API void          EndColumns();                                                             // close columns\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineVk.cpp:\n  216  \t\t\t\t\t//scissor.offset.y = (int32_t)( pcmd->ClipRect.y ) > 0 ? (int32_t)( pcmd->ClipRect.y ) : 0;\n  217  \t\t\t\t\t//scissor.extent.width = (uint32_t)( pcmd->ClipRect.z - pcmd->ClipRect.x );\n  218: \t\t\t\t\t//scissor.extent.height = (uint32_t)( pcmd->ClipRect.w - pcmd->ClipRect.y + 1 ); // FIXME: Why +1 here?\n  219  \t\t\t\t\t//vkCmdSetScissor( g_CommandBuffer, 0, 1, &scissor );\n  220  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxKinect/libs/libfreenect/src/cameras.c:\n  833  \tFN_SPEW(\"reference_pixel_size:   %f\\n\", dev->registration.zero_plane_info.reference_pixel_size);\n  834  \n  835: \t// FIXME: OpenNI seems to use a hardcoded value of 2.4 instead of 2.3 as reported by Kinect\n  836  \tdev->registration.zero_plane_info.dcmos_rcmos_dist = 2.4f;\n  837  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxOsc/libs/oscpack/src/ip/win32/UdpSocket.cpp:\n  360  \t{\n  361  #ifndef WINCE\n  362: \t\treturn timeGetTime(); // FIXME: bad choice if you want to run for more than 40 days\n  363  #else\n  364          return 0;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/firmataExample/bin/firmataExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/networkTcpClientExample/bin/networkTcpClientExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/networkTcpServerExample/bin/networkTcpServerExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/networkUdpReceiverExample/bin/networkUdpReceiverExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/networkUdpSenderExample/bin/networkUdpSenderExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/oscChatSystemExample/bin/oscChatSystemExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/oscReceiveExample/bin/oscReceiveExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/oscSenderExample/bin/oscSenderExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/serialExample/bin/serialExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/computer_vision/kinectExample/bin/kinectExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/computer_vision/opencvExample/bin/opencvExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/computer_vision/opencvHaarFinderExample/bin/opencvHaarFinderExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/advancedEventsExample/bin/advancedEventsExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/allEventsExample/bin/allEventsExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/customEventExample/bin/customEventExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/simpleEventsExample/bin/simpleEventsExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/simpleTimerEventExample/bin/simpleTimerEventExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/blendingExample/bin/blendingExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/colorExample/bin/colorExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/colorsExtendedExample/bin/colorsExtendedExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/floatingPointImageExample/bin/floatingPointImageExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/fontsExample/bin/fontsExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/fontShapesExample/bin/fontShapesExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/graphicsExample/bin/graphicsExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/imageSubsectionExample/bin/imageSubsectionExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/lutFilterExample/bin/lutFilterExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/polygonExample/bin/polygonExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/polylineBlobsExample/bin/polylineBlobsExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/rectangleAlignmentAndScalingExample/bin/rectangleAlignmentAndScalingExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/simpleColorKeyExample/bin/simpleColorKeyExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/graphics/vectorGraphicsExample/bin/vectorGraphicsExample_debug:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/glm/include/glm/detail/func_common_simd.inl:\n  204  \t\t}\n  205  \t};\n  206: /* FIXME\n  207  \ttemplate <precision P>\n  208  \tstruct compute_step_vector<float, P, tvec4>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/glm/include/glm/gtc/ulp.inl:\n   22  {\n   23  \tfloat value;\n   24: \t/* FIXME: Assumes 32 bit int.  */\n   25  \tunsigned int word;\n   26  } ieee_float_shape_type;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/glm/include/glm/gtx/matrix_decompose.inl:\n   48  \t\tPerspectiveMatrix[3][3] = static_cast<T>(1);\n   49  \n   50: \t\t/// TODO: Fixme!\n   51  \t\tif(determinant(PerspectiveMatrix) == static_cast<T>(0))\n   52  \t\t\treturn false;\n   ..\n  133  \t\t// Now, get the rotations out, as described in the gem.\n  134  \n  135: \t\t// FIXME - Add the ability to return either quaternions (which are\n  136  \t\t// easier to recompose with) or Euler angles (rx, ry, rz), which\n  137  \t\t// are easier for authors to deal with. The latter will only be useful\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEvents.cpp:\n  328  \tswitch(e.type){\n  329  \t\tcase ofKeyEventArgs::Pressed:\n  330: \t\t\t// FIXME: modifiers are being reported twice, for generic and for left/right\n  331  \t\t\t// add operators to the arguments class so it can be checked for both\n  332  \t\t\tif(e.key == OF_KEY_RIGHT_CONTROL || e.key == OF_KEY_LEFT_CONTROL){\n  ...\n  362  \t\t\t}\n  363  \t\tcase ofKeyEventArgs::Released:\n  364: \t\t\t// FIXME: modifiers are being reported twice, for generic and for left/right\n  365  \t\t\t// add operators to the arguments class so it can be checked for both\n  366  \t\t\tif(e.key == OF_KEY_RIGHT_CONTROL || e.key == OF_KEY_LEFT_CONTROL){\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp:\n 1372  void ofGLProgrammableRenderer::bind(const ofBaseMaterial & material){\n 1373      currentMaterial = &material;\n 1374:     // FIXME: this invalidates the previous shader to avoid that\n 1375      // when binding 2 materials one after another, the second won't\n 1376      // get the right parameters.\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofGLRenderer.cpp:\n 1741  \tlightingEnabled = true;\n 1742  \tsetColor(currentStyle.color);\n 1743: \t// FIXME: we do this so the 3d ofDraw* functions work with lighting\n 1744  \t// but if someone enables it between ofEnableLighting it'll be disabled\n 1745  \t// on ofDisableLighting. by now it seems the best option to not loose\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/video/ofGstUtils.cpp:\n 1134  \n 1135  \tg_object_set (G_OBJECT (glfilter), \"other-context\", glContext, NULL);\n 1136: \t// FIXME: this seems to be the way to add the context in 1.4.5\n 1137  \t//\n 1138  \t// GstBus * bus = gst_pipeline_get_bus (GST_PIPELINE(gstPipeline));\n ....\n 1150  \n 1151  \tg_object_set (G_OBJECT (glfilter), \"other-context\", glContext, NULL);\n 1152: \t// FIXME: this seems to be the way to add the context in 1.4.5\n 1153  \t//\n 1154  \t// GstBus * bus = gst_pipeline_get_bus (GST_PIPELINE(gstPipeline));\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/video/ofGstVideoPlayer.cpp:\n  167  \tg_object_set (G_OBJECT (glfilter), \"other-context\", glContext, NULL);\n  168  \n  169: \t// FIXME: this seems to be the way to add the context in 1.4.5\n  170  \t//\n  171  \t// GstBus * bus = gst_pipeline_get_bus (GST_PIPELINE(gstPipeline));\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxAssimpModelLoader/libs/assimp/include/assimp/mesh.h:\n  394          , mWeight( 0.0f )\n  395      {\n  396:         // fixme consider moving this to the ctor initializer list as well\n  397          for( unsigned int a = 0; a < AI_MAX_NUMBER_OF_TEXTURECOORDS; a++){\n  398              mTextureCoords[a] = NULL;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxImGui/libs/imgui/src/imgui.cpp:\n 1239  \n 1240  // Pass data_size==0 for zero-terminated strings\n 1241: // FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.\n 1242  ImU32 ImHash(const void* data, int data_size, ImU32 seed)\n 1243  {\n ....\n 1357          if (c == 0)\n 1358              break;\n 1359:         if (c < 0x10000)    // FIXME: Losing characters that don't fit in 2 bytes\n 1360              *buf_out++ = (ImWchar)c;\n 1361      }\n ....\n 1723  }\n 1724  \n 1725: // FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)\n 1726  void ImGuiStorage::SetInt(ImGuiID key, int val)\n 1727  {\n ....\n 1884      va_copy(args_copy, args);\n 1885  \n 1886:     int len = ImFormatStringV(NULL, 0, fmt, args);         // FIXME-OPT: could do a first pass write attempt, likely successful on first pass.\n 1887      if (len <= 0)\n 1888      {\n ....\n 1964  {\n 1965      // Set cursor position and a few other things so that SetScrollHere() and Columns() can work when seeking cursor.\n 1966:     // FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue.\n 1967      // The clipper should probably have a 4th step to display the last item in a regular manner.\n 1968      ImGui::SetCursorPosY(pos_y);\n ....\n 1976  // Use case A: Begin() called from constructor with items_height<0, then called again from Sync() in StepNo 1\n 1977  // Use case B: Begin() called from constructor with items_height>0\n 1978: // FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.\n 1979  void ImGuiListClipper::Begin(int count, float items_height)\n 1980  {\n ....\n 2264  {\n 2265      // An active popup disable hovering on other windows (apart from its own children)\n 2266:     // FIXME-OPT: This could be cached/stored within the window.\n 2267      ImGuiContext& g = *GImGui;\n 2268      if (g.NavWindow)\n ....\n 2368  \n 2369      // Compute distance between boxes\n 2370:     // FIXME-NAV: Introducing biases for vertical navigation, needs to be removed.\n 2371      float dbx = NavScoreItemDistInterval(cand.Min.x, cand.Max.x, curr.Min.x, curr.Max.x);\n 2372      float dby = NavScoreItemDistInterval(ImLerp(cand.Min.y, cand.Max.y, 0.2f), ImLerp(cand.Min.y, cand.Max.y, 0.8f), ImLerp(curr.Min.y, curr.Max.y, 0.2f), ImLerp(curr.Min.y, curr.Max.y, 0.8f)); // Scale down on Y to keep using box-distance for vertically touching items\n ....\n 2462      // are found, so it only augments the graph produced by the above method using extra links. (important, since it doesn't guarantee strong connectedness)\n 2463      // This is just to avoid buttons having no links in a particular direction when there's a suitable neighbor. you get good graphs without this too.\n 2464:     // 2017/09/29: FIXME: This now currently only enabled inside menu bars, ideally we'd disable it everywhere. Menus in particular need to catch failure. For general navigation it feels awkward.\n 2465      // Disabling it may lead to disconnected graphs when nodes are very spaced out on different axis. Perhaps consider offering this as an option?\n 2466      if (result->DistBox == FLT_MAX && dist_axial < result->DistAxial)  // Check axial match\n ....\n 2550  \n 2551      // Process Move Request (scoring for navigation)\n 2552:     // FIXME-NAV: Consider policy for double scoring (scoring from NavScoringRectScreen + scoring from a rect wrapped according to current wrapping policy)\n 2553      if ((g.NavId != id || (g.NavMoveRequestFlags & ImGuiNavMoveFlags_AllowCurrentNavId)) && !(item_flags & ImGuiItemFlags_NoNav))\n 2554      {\n ....\n 2926  }\n 2927  \n 2928: static int FindWindowIndex(ImGuiWindow* window) // FIXME-OPT O(N)\n 2929  {\n 2930      ImGuiContext& g = *GImGui;\n ....\n 2935  }\n 2936  \n 2937: static ImGuiWindow* FindWindowNavigable(int i_start, int i_stop, int dir) // FIXME-OPT O(N)\n 2938  {\n 2939      ImGuiContext& g = *GImGui;\n ....\n 3071  \n 3072      // Keyboard: Press and Release ALT to toggle menu layer\n 3073:     // FIXME: We lack an explicit IO variable for \"is the imgui window focused\", so compare mouse validity to detect the common case of back-end clearing releases all keys on ALT-TAB\n 3074      if ((g.ActiveId == 0 || g.ActiveIdAllowOverlap) && IsNavInputPressed(ImGuiNavInput_KeyMenu_, ImGuiInputReadMode_Released))\n 3075          if (IsMousePosValid(&g.IO.MousePos) == IsMousePosValid(&g.IO.MousePosPrev))\n ....\n 3087          {\n 3088              const float NAV_MOVE_SPEED = 800.0f;\n 3089:             const float move_speed = ImFloor(NAV_MOVE_SPEED * g.IO.DeltaTime * ImMin(g.IO.DisplayFramebufferScale.x, g.IO.DisplayFramebufferScale.y)); // FIXME: Doesn't code variable framerate very well\n 3090              g.NavWindowingTarget->Pos += move_delta * move_speed;\n 3091              g.NavDisableMouseHover = true;\n ....\n 3629  \n 3630      // If mouse was first clicked outside of ImGui bounds we also cancel out hovering.\n 3631:     // FIXME: For patterns of drag and drop across OS windows, we may need to rework/remove this test (first committed 311c0ca9 on 2015/02)\n 3632      const bool mouse_dragging_extern_payload = g.DragDropActive && (g.DragDropSourceFlags & ImGuiDragDropFlags_SourceExtern) != 0;\n 3633      if (!mouse_avail_to_imgui && !mouse_dragging_extern_payload)\n ....\n 4127  }\n 4128  \n 4129: // FIXME: Add a more explicit sort order in the window structure.\n 4130  static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)\n 4131  {\n ....\n 4497      {\n 4498          if (!text_end)\n 4499:             text_end = text + strlen(text); // FIXME-OPT\n 4500          text_display_end = text_end;\n 4501      }\n ....\n 4515  \n 4516      if (!text_end)\n 4517:         text_end = text + strlen(text); // FIXME-OPT\n 4518  \n 4519      if (text != text_end)\n ....\n 4757  \n 4758  // Find window given position, search front-to-back\n 4759: // FIXME: Note that we have a lag here because WindowRectClipped is updated in Begin() so windows moved by user via SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is called, aka before the next Begin(). Moving window thankfully isn't affected.\n 4760  static ImGuiWindow* FindHoveredWindow()\n 4761  {\n ....\n 5299  \n 5300      // Center modal windows by default\n 5301:     // FIXME: Should test for (PosCond & window->SetWindowPosAllowFlags) with the upcoming window.\n 5302      if (g.NextWindowData.PosCond == 0)\n 5303          SetNextWindowPos(g.IO.DisplaySize * 0.5f, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));\n ....\n 5655              r_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 16, ref_pos.y + 8);\n 5656          else\n 5657:             r_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 24 * sc, ref_pos.y + 24 * sc); // FIXME: Hard-coded based on mouse cursor shape expectation. Exact dimension not very important.\n 5658          ImVec2 pos = FindBestWindowPosForPopupEx(ref_pos, window->Size, &window->AutoPosLastDirection, r_outer, r_avoid);\n 5659          if (window->AutoPosLastDirection == ImGuiDir_None)\n ....\n 5776      else\n 5777      {\n 5778:         // When the window cannot fit all contents (either because of constraints, either because screen is too small): we are growing the size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than DisplaySize-WindowPadding.\n 5779          ImVec2 size_auto_fit = ImClamp(size_contents, style.WindowMinSize, ImMax(style.WindowMinSize, g.IO.DisplaySize - g.Style.DisplaySafeAreaPadding * 2.0f));\n 5780          ImVec2 size_auto_fit_after_constraint = CalcSizeAfterConstraint(window, size_auto_fit);\n ....\n 5925      for (int border_n = 0; border_n < resize_border_count; border_n++)\n 5926      {\n 5927:         const float BORDER_SIZE = 5.0f;          // FIXME: Only works _inside_ window because of HoveredWindow check.\n 5928          const float BORDER_APPEAR_TIMER = 0.05f; // Reduce visual noise\n 5929          bool hovered, held;\n ....\n 5963              g.NavDisableMouseHover = true;\n 5964              resize_grip_col[0] = GetColorU32(ImGuiCol_ResizeGripActive);\n 5965:             // FIXME-NAV: Should store and accumulate into a separate size buffer to handle sizing constraints properly, right now a constraint will make us stuck.\n 5966              size_target = CalcSizeAfterConstraint(window, window->SizeFull + nav_resize_delta);\n 5967          }\n ....\n 6064          {\n 6065              // May be processed on the next frame if this is our first frame and we are measuring size\n 6066:             // FIXME: Look into removing the branch so everything can go through this same code path for consistency.\n 6067              window->SetWindowPosVal = g.NextWindowData.PosVal;\n 6068              window->SetWindowPosPivot = g.NextWindowData.PosPivotVal;\n ....\n 6101      if (first_begin_of_the_frame)\n 6102      {\n 6103:         const bool window_is_child_tooltip = (flags & ImGuiWindowFlags_ChildWindow) && (flags & ImGuiWindowFlags_Tooltip); // FIXME-WIP: Undocumented behavior of Child+Tooltip for pinned tooltip (#1345)\n 6104  \n 6105          // Initialize\n ....\n 6408  \n 6409          // Update various regions. Variables they depends on are set above in this function.\n 6410:         // FIXME: window->ContentsRegionRect.Max is currently very misleading / partly faulty, but some BeginChild() patterns relies on it.\n 6411          window->ContentsRegionRect.Min.x = window->Pos.x - window->Scroll.x + window->WindowPadding.x;\n 6412          window->ContentsRegionRect.Min.y = window->Pos.y - window->Scroll.y + window->WindowPadding.y + window->TitleBarHeight() + window->MenuBarHeight();\n ....\n 6499              window->DC.ItemFlags = item_flags_backup;\n 6500  \n 6501:             // Title text (FIXME: refactor text alignment facilities along with RenderText helpers, this is too much code for what it does.)\n 6502              ImVec2 text_size = CalcTextSize(name, NULL, true);\n 6503              ImRect text_r = title_bar_rect;\n ....\n 6606  \n 6607      // Stop logging\n 6608:     if (!(window->Flags & ImGuiWindowFlags_ChildWindow))    // FIXME: add more options for scope of logging\n 6609          LogFinish();\n 6610  \n ....\n 6782  \n 6783      // Steal focus on active widgets\n 6784:     if (window->Flags & ImGuiWindowFlags_Popup) // FIXME: This statement should be unnecessary. Need further testing before removing it..\n 6785          if (g.ActiveId != 0 && g.ActiveIdWindow && g.ActiveIdWindow->RootWindow != window)\n 6786              ClearActiveID();\n ....\n 6935  }\n 6936  \n 6937: // FIXME: This may incur a round-trip (if the end user got their data from a float4) but eventually we aim to store the in-flight colors as ImU32\n 6938  void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)\n 6939  {\n ....\n 7726      const char* text_begin = text;\n 7727      if (text_end == NULL)\n 7728:         text_end = text + strlen(text); // FIXME-OPT\n 7729  \n 7730      const ImVec2 text_pos(window->DC.CursorPos.x, window->DC.CursorPos.y + window->DC.CurrentLineTextBaseOffset);\n ....\n 7901              hovered = true;\n 7902              SetHoveredID(id);\n 7903:             if (CalcTypematicPressedRepeatAmount(g.HoveredIdTimer + 0.0001f, g.HoveredIdTimer + 0.0001f - g.IO.DeltaTime, 0.01f, 0.70f)) // FIXME: Our formula for CalcTypematicPressedRepeatAmount() is fishy\n 7904              {\n 7905                  pressed = true;\n ....\n 7925              // PressedOnRelease       |  <on release>   |  <on repeat> <on repeat> .. (NOT on release)\n 7926              // PressedOnDoubleClick   |  <on dclick>    |  <on dclick> <on repeat> <on repeat> ..\n 7927:             // FIXME-NAV: We don't honor those different behaviors.\n 7928              if ((flags & ImGuiButtonFlags_PressedOnClickRelease) && g.IO.MouseClicked[0])\n 7929              {\n ....\n 8537      if (p_open)\n 8538      {\n 8539:         // Create a small overlapping close button // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.\n 8540          ImGuiContext& g = *GImGui;\n 8541          float button_sz = g.FontSize * 0.5f;\n ....\n 8771  }\n 8772  \n 8773: // FIXME: Adding support for clamping on boundaries of the data type would be nice.\n 8774  static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const void* arg2)\n 8775  {\n ....\n 8878      {\n 8879          // Assign constant\n 8880:         // FIXME: We don't bother handling support for legacy operators since they are a little too crappy. Instead we may implement a proper expression evaluator in the future.\n 8881          sscanf(buf, format, data_ptr);\n 8882      }\n ....\n 8914  \n 8915  // Create text input in place of a slider (when CTRL+Clicking on slider)\n 8916: // FIXME: Logic is messy and confusing.\n 8917  bool ImGui::InputScalarAsWidgetReplacement(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_type, void* data_ptr, const char* format)\n 8918  {\n ....\n 8994  \n 8995  // Parse display precision back from the display format string\n 8996: // FIXME: This is still used by some navigation code path to infer a minimum tweak step, but we should aim to rework widgets so it isn't needed.\n 8997  int ImParseFormatPrecision(const char* fmt, int default_precision)\n 8998  {\n ....\n 9069  }\n 9070  \n 9071: // FIXME: Move some of the code into SliderBehavior(). Current responsability is larger than what the equivalent DragBehaviorT<> does, we also do some rendering, etc.\n 9072  template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>\n 9073  static bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiSliderFlags flags)\n ....\n 9272  }\n 9273  \n 9274: // FIXME-LEGACY: Prior to 1.61 our DragInt() function internally used floats and because of this the compile-time default value for format was \"%.0f\".\n 9275  // Even though we changed the compile-time default, we expect users to have carried %f around, which would break the display of DragInt() calls.\n 9276  // To honor backward compatibility we are rewriting the format string, unless IMGUI_DISABLE_OBSOLETE_FUNCTIONS is enabled. What could possibly go wrong?!\n ....\n 10220  static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator( obj->Text[idx-1] ) && !is_separator( obj->Text[idx] ) ) : 1; }\n 10221  static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }\n 10222: #ifdef __APPLE__    // FIXME: Move setting to IO structure\n 10223  static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator( obj->Text[idx-1] ) && is_separator( obj->Text[idx] ) ) : 1; }\n 10224  static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }\n .....\n 10298  // Public API to manipulate UTF-8 text\n 10299  // We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)\n 10300: // FIXME: The existence of this rarely exercised code path is a bit of a nuisance.\n 10301  void ImGuiTextEditCallbackData::DeleteChars(int pos, int bytes_count)\n 10302  {\n .....\n 10395  // Edit a string of text\n 10396  // NB: when active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while active has no effect.\n 10397: // FIXME: Rather messy function partly because we are doing UTF8 > u16 > UTF8 conversions on the go to more easily handle stb_textedit calls. Ideally we should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188\n 10398  bool ImGui::InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)\n 10399  {\n .....\n 10494  \n 10495              // Preserve cursor position and undo/redo stack if we come back to same widget\n 10496:             // FIXME: We should probably compare the whole buffer to be on the safety side. Comparing buf (utf8) and edit_state.Text (wchar).\n 10497              const bool recycle_state = (edit_state.Id == id) && (prev_len_w == edit_state.CurLenW);\n 10498              if (recycle_state)\n .....\n 10737              // Apply new value immediately - copy modified buffer back\n 10738              // Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer\n 10739:             // FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.\n 10740:             // FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.\n 10741              if (is_editable)\n 10742              {\n .....\n 10848          // - Measure text height (for scrollbar)\n 10849          // We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)\n 10850:         // FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.\n 10851          const ImWchar* text_begin = edit_state.Text.Data;\n 10852          ImVec2 cursor_offset, select_start_offset;\n .....\n 10934              const ImWchar* text_selected_end = text_begin + ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end);\n 10935  \n 10936:             float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.\n 10937              float bg_offy_dn = is_multiline ? 0.0f : 2.0f;\n 10938              ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg);\n .....\n 11330  \n 11331      // Display items\n 11332:     // FIXME-OPT: Use clipper (but we need to disable it on the appearing frame to make sure our call to SetItemDefaultFocus() is processed)\n 11333      bool value_changed = false;\n 11334      for (int i = 0; i < items_count; i++)\n .....\n 11363  static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)\n 11364  {\n 11365:     // FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.\n 11366      const char* items_separated_by_zeros = (const char*)data;\n 11367      int items_count = 0;\n .....\n 11392  {\n 11393      int items_count = 0;\n 11394:     const char* p = items_separated_by_zeros;       // FIXME-OPT: Avoid computing this, or at least only when combo is open\n 11395      while (*p)\n 11396      {\n .....\n 11413      const ImGuiStyle& style = g.Style;\n 11414  \n 11415:     if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsSet) // FIXME-OPT: Avoid if vertically clipped.\n 11416          PopClipRect();\n 11417  \n .....\n 11505  }\n 11506  \n 11507: // FIXME: Rename to BeginListBox()\n 11508  // Helper to calculate the size of a listbox and display a label on the right.\n 11509  // Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an empty label \"##empty\"\n .....\n 11533  }\n 11534  \n 11535: // FIXME: Rename to BeginListBox()\n 11536  bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)\n 11537  {\n .....\n 11550  }\n 11551  \n 11552: // FIXME: Rename to EndListBox()\n 11553  void ImGui::ListBoxFooter()\n 11554  {\n .....\n 11822                  float extra = ImClamp(ImFabs(ta.x - tb.x) * 0.30f, 5.0f, 30.0f); // add a bit of extra slack.\n 11823                  ta.x += (window->Pos.x < next_window->Pos.x) ? -0.5f : +0.5f;   // to avoid numerical issues\n 11824:                 tb.y = ta.y + ImMax((tb.y - extra) - ta.y, -100.0f);            // triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?\n 11825                  tc.y = ta.y + ImMin((tc.y + extra) - ta.y, +100.0f);\n 11826                  moving_within_opened_triangle = ImTriangleContainsPoint(ta, tb, tc, g.IO.MousePos);\n .....\n 11991  \n 11992  // A little colored square. Return true when clicked.\n 11993: // FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.\n 11994  // 'desc_id' is not called 'label' because we don't display it next to the button, but only in the tooltip.\n 11995  bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size)\n .....\n 12130      if (allow_opt_picker)\n 12131      {\n 12132:         ImVec2 picker_size(g.FontSize * 8, ImMax(g.FontSize * 8 - (ImGui::GetFrameHeight() + g.Style.ItemInnerSpacing.x), 1.0f)); // FIXME: Picker size copied from main picker function\n 12133          ImGui::PushItemWidth(picker_size.x);\n 12134          for (int picker_type = 0; picker_type < 2; picker_type++)\n .....\n 12397  // ColorPicker\n 12398  // Note: only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.\n 12399: // FIXME: we adjust the big color square height based on item width, which may cause a flickering feedback loop (if automatic height makes a vertical scrollbar appears, affecting automatic width..)\n 12400  bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)\n 12401  {\n .....\n 12889      if (group_data.AdvanceCursor)\n 12890      {\n 12891:         window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.PrevLineTextBaseOffset, group_data.BackupCurrentLineTextBaseOffset);      // FIXME: Incorrect, we should grab the base offset from the *first line* of the group but it is hard to obtain now.\n 12892          ItemSize(group_bb.GetSize(), group_data.BackupCurrentLineTextBaseOffset);\n 12893          ItemAdd(group_bb, 0);\n .....\n 12983  \n 12984      PushColumnClipRect();\n 12985:     PushItemWidth(GetColumnWidth() * 0.65f);  // FIXME: Move on columns setup\n 12986  }\n 12987  \n .....\n 13626      if (!(flags & ImGuiDragDropFlags_AcceptNoDrawDefaultRect) && payload.Preview)\n 13627      {\n 13628:         // FIXME-DRAG: Settle on a proper default visuals for drop target.\n 13629          r.Expand(3.5f);\n 13630          bool push_clip_rect = !window->ClipRect.Contains(r);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxImGui/libs/imgui/src/imgui.h:\n  661      ImGuiTreeNodeFlags_Bullet               = 1 << 9,   // Display a bullet instead of arrow\n  662      ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().\n  663:     //ImGuITreeNodeFlags_SpanAllAvailWidth  = 1 << 11,  // FIXME: TODO: Extend hit box horizontally even if not framed\n  664:     //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 12,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible\n  665      ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)\n  666      ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog\n  ...\n  714      ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   // IsWindowHovered() only: Return true if any window is hovered\n  715      ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,   // Return true even if a popup window is normally blocking access to this item/window\n  716:     //ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.\n  717      ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.\n  718      ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,   // Return true even if the position is overlapped by another window\n  ...\n 1491      inline operator ImVec4() const                                  { return Value; }\n 1492  \n 1493:     // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.\n 1494      inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }\n 1495      static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxImGui/libs/imgui/src/imgui_demo.cpp:\n  821  \n  822              // Use functions to generate output\n  823:             // FIXME: This is rather awkward because current plot API only pass in indices. We probably want an API passing floats and user provide sample rate/count.\n  824              struct Funcs\n  825              {\n  ...\n  912              if (ImGui::BeginPopup(\"mypicker\"))\n  913              {\n  914:                 // FIXME: Adding a drag and drop example here would be perfect!\n  915                  ImGui::Text(\"MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!\");\n  916                  ImGui::Separator();\n  ...\n 2792      void    AddLog(const char* fmt, ...) IM_FMTARGS(2)\n 2793      {\n 2794:         // FIXME-OPT\n 2795          char buf[1024];\n 2796          va_list args;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxImGui/libs/imgui/src/imgui_draw.cpp:\n  674              }\n  675  \n  676:             // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.\n  677              unsigned int idx1 = _VtxCurrentIdx;\n  678              for (int i1 = 0; i1 < count; i1++)\n  ...\n  728              }\n  729  \n  730:             // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.\n  731              unsigned int idx1 = _VtxCurrentIdx;\n  732              for (int i1 = 0; i1 < count; i1++)\n  ...\n  779          // Non Anti-aliased Stroke\n  780          const int idx_count = count*6;\n  781:         const int vtx_count = count*4;      // FIXME-OPT: Not sharing edges\n  782          PrimReserve(idx_count, vtx_count);\n  783  \n  ...\n 2132      // 1946 common ideograms code points for Japanese\n 2133      // Sourced from http://theinstructionlimit.com/common-kanji-character-ranges-for-xna-spritefont-rendering\n 2134:     // FIXME: Source a list of the revised 2136 Joyo Kanji list from 2010 and rebuild this.\n 2135      // You can use ImFontAtlas::GlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.\n 2136      // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)\n ....\n 2265      // Invalidate active font so that the user gets a clear crash instead of a dangling pointer.\n 2266      // If you want to delete fonts you need to do it between Render() and NewFrame().\n 2267:     // FIXME-CLEANUP\n 2268      /*\n 2269      ImGuiContext& g = *GImGui;\n ....\n 2309  \n 2310      // Create a glyph to handle TAB\n 2311:     // FIXME: Needs proper TAB handling but it needs to be contextualized (or we could arbitrary say that each string starts at \"column 0\" ?)\n 2312      if (FindGlyph((unsigned short)' '))\n 2313      {\n ....\n 2405  {\n 2406      // Simple word-wrapping for English, not full-featured. Please submit failing cases!\n 2407:     // FIXME: Much possible improvements (don't cut things like \"word !\", \"word!!!\" but cut within \"word,,,,\", more sensible support for punctuations, support for Unicode punctuations, etc.)\n 2408  \n 2409      // For references, possible wrap point marked with ^\n ....\n 2504  {\n 2505      if (!text_end)\n 2506:         text_end = text_begin + strlen(text_begin); // FIXME-OPT: Need to avoid this.\n 2507  \n 2508      const float line_height = size;\n ....\n 2793  }\n 2794  \n 2795: // FIXME: Cleanup and move code to ImDrawList.\n 2796  void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)\n 2797  {\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxImGui/libs/imgui/src/imgui_internal.h:\n  213      ImGuiButtonFlags_DontClosePopups        = 1 << 7,   // disable automatically closing parent popup on press // [UNUSED]\n  214      ImGuiButtonFlags_Disabled               = 1 << 8,   // disable interactions\n  215:     ImGuiButtonFlags_AlignTextBaseLine      = 1 << 9,   // vertically align button to match text baseline - ButtonEx() only // FIXME: Should be removed and handled by SmallButton(), not possible currently because of DC.CursorPosPrevLine\n  216      ImGuiButtonFlags_NoKeyModifiers         = 1 << 10,  // disable interaction if a key modifier is held\n  217      ImGuiButtonFlags_NoHoldingActiveID      = 1 << 11,  // don't set ActiveId while holding the mouse (ImGuiButtonFlags_PressedOnClick only)\n  ...\n  258  };\n  259  \n  260: // FIXME: this is in development, not exposed/functional as a generic feature yet.\n  261  enum ImGuiLayoutType_\n  262  {\n  ...\n  288  };\n  289  \n  290: // FIXME-NAV: Clarify/expose various repeat delay/rate\n  291  enum ImGuiInputReadMode\n  292  {\n  ...\n  524  \n  525      // Const data\n  526:     // FIXME: Bake rounded corners fill/borders in atlas\n  527      ImVec2          CircleVtx12[12];\n  528  \n  ...\n  852      ImGuiItemFlags_AllowKeyboardFocus           = 1 << 0,  // true\n  853      ImGuiItemFlags_ButtonRepeat                 = 1 << 1,  // false    // Button() will return true multiple times based on io.KeyRepeatDelay and io.KeyRepeatRate settings.\n  854:     ImGuiItemFlags_Disabled                     = 1 << 2,  // false    // FIXME-WIP: Disable interactions but doesn't affect visuals. Should be: grey out and disable interactions with widgets that affect data + view widgets (WIP)\n  855      ImGuiItemFlags_NoNav                        = 1 << 3,  // false\n  856      ImGuiItemFlags_NoNavDefaultFocus            = 1 << 4,  // false\n  ...\n  860  \n  861  // Transient per-window data, reset at the beginning of the frame. This used to be called ImGuiDrawContext, hence the DC variable name in ImGuiWindow.\n  862: // FIXME: That's theory, in practice the delimitation between ImGuiWindow and ImGuiWindowTempData is quite tenuous and could be reconsidered.\n  863  struct IMGUI_API ImGuiWindowTempData\n  864  {\n  ...\n  884      int                     NavLayerActiveMask;     // Which layer have been written to (result from previous frame)\n  885      int                     NavLayerActiveMaskNext; // Which layer have been written to (buffer for current frame)\n  886:     bool                    MenuBarAppending;       // FIXME: Remove this\n  887      ImVec2                  MenuBarOffset;          // MenuBarOffset.x is sort of equivalent of a per-layer CursorPos.x, saved/restored as we switch to the menu bar. The only situation when MenuBarOffset.y is > 0 if when (SafeAreaPadding.y > FramePadding.y), often used on TVs.\n  888      ImVector<ImGuiWindow*>  ChildWindows;\n  ...\n  903      float                   IndentX;                // Indentation / start position from left of window (increased by TreePush/TreePop, etc.)\n  904      float                   GroupOffsetX;\n  905:     float                   ColumnsOffsetX;         // Offset to the current column (if ColumnsCurrent > 0). FIXME: This and the above should be a stack to allow use cases like Tree->Column->Tree. Need revamp columns API.\n  906      ImGuiColumnsSet*        ColumnsSet;             // Current columns set\n  907  \n  ...\n  988      ImRect                  OuterRectClipped;                   // = WindowRect just after setup in Begin(). == window->Rect() for root window.\n  989      ImRect                  InnerMainRect, InnerClipRect;\n  990:     ImRect                  ContentsRegionRect;                 // FIXME: This is currently confusing/misleading. Maximum visible content position ~~ Pos + (SizeContentsExplicit ? SizeContentsExplicit : Size - ScrollbarSizes) - CursorStartPos, per axis\n  991      int                     LastFrameActive;                    // Last frame number the window was Active.\n  992      float                   ItemWidthDefault;\n  ...\n 1009  \n 1010      // Navigation / Focus\n 1011:     // FIXME-NAV: Merge all this with the new Nav system, at least the request variables should be moved to ImGuiContext\n 1012      int                     FocusIdxAllCounter;                 // Start at -1 and increase as assigned via FocusItemRegister()\n 1013      int                     FocusIdxTabCounter;                 // (same, but only count widgets which you can Tab through)\n ....\n 1132      IMGUI_API void          EndDragDropTooltip();\n 1133  \n 1134:     // FIXME-WIP: New Columns API\n 1135      IMGUI_API void          BeginColumns(const char* str_id, int count, ImGuiColumnsFlags flags = 0); // setup number of columns. use an identifier to distinguish multiple column sets. close with EndColumns().\n 1136      IMGUI_API void          EndColumns();                                                             // close columns\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxImGui/src/EngineVk.cpp:\n  216  \t\t\t\t\t//scissor.offset.y = (int32_t)( pcmd->ClipRect.y ) > 0 ? (int32_t)( pcmd->ClipRect.y ) : 0;\n  217  \t\t\t\t\t//scissor.extent.width = (uint32_t)( pcmd->ClipRect.z - pcmd->ClipRect.x );\n  218: \t\t\t\t\t//scissor.extent.height = (uint32_t)( pcmd->ClipRect.w - pcmd->ClipRect.y + 1 ); // FIXME: Why +1 here?\n  219  \t\t\t\t\t//vkCmdSetScissor( g_CommandBuffer, 0, 1, &scissor );\n  220  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxKinect/libs/libfreenect/src/cameras.c:\n  833  \tFN_SPEW(\"reference_pixel_size:   %f\\n\", dev->registration.zero_plane_info.reference_pixel_size);\n  834  \n  835: \t// FIXME: OpenNI seems to use a hardcoded value of 2.4 instead of 2.3 as reported by Kinect\n  836  \tdev->registration.zero_plane_info.dcmos_rcmos_dist = 2.4f;\n  837  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/addons/ofxOsc/libs/oscpack/src/ip/win32/UdpSocket.cpp:\n  360  \t{\n  361  #ifndef WINCE\n  362: \t\treturn timeGetTime(); // FIXME: bad choice if you want to run for more than 40 days\n  363  #else\n  364          return 0;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/boost/include/boost/thread/detail/config.hpp:\n  148  \n  149  // ONCE_CXX11\n  150: // fixme BOOST_THREAD_PROVIDES_ONCE_CXX11 doesn't works when thread.cpp is compiled BOOST_THREAD_VERSION 3\n  151  #if ! defined BOOST_THREAD_DONT_PROVIDE_ONCE_CXX11 \\\n  152   && ! defined BOOST_THREAD_PROVIDES_ONCE_CXX11\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/glm/include/glm/detail/func_common_simd.inl:\n  204  \t\t}\n  205  \t};\n  206: /* FIXME\n  207  \ttemplate <precision P>\n  208  \tstruct compute_step_vector<float, P, tvec4>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/glm/include/glm/gtc/ulp.inl:\n   22  {\n   23  \tfloat value;\n   24: \t/* FIXME: Assumes 32 bit int.  */\n   25  \tunsigned int word;\n   26  } ieee_float_shape_type;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/glm/include/glm/gtx/matrix_decompose.inl:\n   48  \t\tPerspectiveMatrix[3][3] = static_cast<T>(1);\n   49  \n   50: \t\t/// TODO: Fixme!\n   51  \t\tif(determinant(PerspectiveMatrix) == static_cast<T>(0))\n   52  \t\t\treturn false;\n   ..\n  133  \t\t// Now, get the rotations out, as described in the gem.\n  134  \n  135: \t\t// FIXME - Add the ability to return either quaternions (which are\n  136  \t\t// easier to recompose with) or Euler angles (rx, ry, rz), which\n  137  \t\t// are easier for authors to deal with. The latter will only be useful\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/openFrameworks/events/ofEvents.cpp:\n  328  \tswitch(e.type){\n  329  \t\tcase ofKeyEventArgs::Pressed:\n  330: \t\t\t// FIXME: modifiers are being reported twice, for generic and for left/right\n  331  \t\t\t// add operators to the arguments class so it can be checked for both\n  332  \t\t\tif(e.key == OF_KEY_RIGHT_CONTROL || e.key == OF_KEY_LEFT_CONTROL){\n  ...\n  362  \t\t\t}\n  363  \t\tcase ofKeyEventArgs::Released:\n  364: \t\t\t// FIXME: modifiers are being reported twice, for generic and for left/right\n  365  \t\t\t// add operators to the arguments class so it can be checked for both\n  366  \t\t\tif(e.key == OF_KEY_RIGHT_CONTROL || e.key == OF_KEY_LEFT_CONTROL){\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/openFrameworks/gl/ofGLProgrammableRenderer.cpp:\n 1372  void ofGLProgrammableRenderer::bind(const ofBaseMaterial & material){\n 1373      currentMaterial = &material;\n 1374:     // FIXME: this invalidates the previous shader to avoid that\n 1375      // when binding 2 materials one after another, the second won't\n 1376      // get the right parameters.\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/openFrameworks/gl/ofGLRenderer.cpp:\n 1741  \tlightingEnabled = true;\n 1742  \tsetColor(currentStyle.color);\n 1743: \t// FIXME: we do this so the 3d ofDraw* functions work with lighting\n 1744  \t// but if someone enables it between ofEnableLighting it'll be disabled\n 1745  \t// on ofDisableLighting. by now it seems the best option to not loose\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/openFrameworks/video/ofGstUtils.cpp:\n 1134  \n 1135  \tg_object_set (G_OBJECT (glfilter), \"other-context\", glContext, NULL);\n 1136: \t// FIXME: this seems to be the way to add the context in 1.4.5\n 1137  \t//\n 1138  \t// GstBus * bus = gst_pipeline_get_bus (GST_PIPELINE(gstPipeline));\n ....\n 1150  \n 1151  \tg_object_set (G_OBJECT (glfilter), \"other-context\", glContext, NULL);\n 1152: \t// FIXME: this seems to be the way to add the context in 1.4.5\n 1153  \t//\n 1154  \t// GstBus * bus = gst_pipeline_get_bus (GST_PIPELINE(gstPipeline));\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/openFrameworks/video/ofGstVideoPlayer.cpp:\n  167  \tg_object_set (G_OBJECT (glfilter), \"other-context\", glContext, NULL);\n  168  \n  169: \t// FIXME: this seems to be the way to add the context in 1.4.5\n  170  \t//\n  171  \t// GstBus * bus = gst_pipeline_get_bus (GST_PIPELINE(gstPipeline));\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/projectGenerator-linux64/content_shell.pak:\n    <binary>\n\n<untitled 3075>:\n    1   # (i tried this one first)\n    2   \n    3:  # FIXME: problem with last step forward:\n    4      # using @i < @data.length\n    5      # => \n\n<untitled 3078>:\n    1  # (and then I tried this instead)\n    2  \n    3: # FIXME: problem with last step forward:\n    4      # using @i < @data.length\n    5      # => \n\n<untitled 3155>:\n   89          @inputs_from_this_frame.clear\n   90          \n   91:         # FIXME: limit to processing inputs from the current timepoint. don't process all of time in one frame.\n   92          inputs_from_this_frame = @input_history\n   93          \n\n<untitled 3207>:\n    1: FIXME: may not want to be able to generate new state in slow motion. maybe only allow for slow-mo replays? that would be easier I think, and also perhaps more useful / intuitive\n    2          \n    3   if you auto step forward with delay to generate new state, how do you capture input? do you just drop it?\n\n<untitled 3218>:\n    1: FIXME: when code reaches the end of execution, do not save any more history, but continue to advance the @i in controller. need to continue to take in input events.\n\n<untitled 3380>:\n    1: FIXME: off by one - when code executes turn 10, state is not updated until turn 11. on the low end, this means that state 0 and state 1 are identical.\n\n<untitled 3386>:\n    1: FIXME: run into a case where History#update tries to act on a wrapped object that is nil (don't know why - it runs fine for a while)\n    2  \thapppens around turn 20\n    3  \tmay be a result of pause / resume?\n\n<untitled 3505>:\n    1: FIXME: first iteration the main code does not save, and then it looks like it may be forever one tick behind from there on out\n    2  \n    3  there should be 3 History objects that save every frame\n\n584 matches across 81 files\n\n\nSearching 11356 files for \"state_machine\"\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/Gemfile.lock:\n   23        rubyzip (~> 1.1, < 2.0.0)\n   24      rubyzip (1.2.2)\n   25:     state_machine (1.2.0)\n   26  \n   27  PLATFORMS\n   ..\n   39    rice (~> 2.1.2)\n   40    roo (~> 2.7.1)\n   41:   state_machine (= 1.2.0)\n   42  \n   43  BUNDLED WITH\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/bin/data/output.log:\n    <binary>\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/docs/readme.txt:\n   21  model_raw_input.rb\n   22  \n   23: controller_state_machine.rb\n   24  \n   25  view_visualize_controller.rb\n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/controller_state_machine.rb:\n    1: require 'state_machine'\n    2  \n    3  class Controller\n    .\n   22    \n   23    \n   24:   state_machine :execution_state, :initial => :paused do\n   25      # replaying saved states\n   26      state :replaying do\n   ..\n   92    \n   93    \n   94:   state_machine :error_flag, :initial => :no_error do\n   95      state :no_error do\n   96        \n   ..\n  123        # ERROR: can't step back in running state (must pause first)\n  124        puts \"WARNING: #step_back disabled while running. Use #pause first.\"\n  125:       return false # state_machine returns false when event fails\n  126      else\n  127        if history_available?\n  ...\n  175    \n  176    \n  177:   state_machine :time_travel_state, :initial => :main_timeline do\n  178      state :main_timeline do\n  179        \n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/live_code_loader.rb:\n   15    \n   16    \n   17:   state_machine :state, :initial => :normal do\n   18      state :normal do\n   19        \n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/UI_model.rb:\n   11    \n   12    \n   13:   state_machine :update_mode, :initial => :manual_stepping do\n   14      state :manual_stepping do\n   15        \n\n/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/window.rb:\n   36  require LIB_DIR / 'UI_model'\n   37  \n   38: require LIB_DIR / 'controller_state_machine'\n   39  \n   40  require LIB_DIR / 'UI_InputController'\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/projectGenerator-linux64/projectGenerator:\n    <binary>\n\n180 matches across 8 files\n",
			"settings":
			{
				"buffer_size": 90202,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "lib/window.rb",
			"settings":
			{
				"buffer_size": 10561,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/controller_state_machine.rb",
			"settings":
			{
				"buffer_size": 8906,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/model_code.rb",
			"settings":
			{
				"buffer_size": 3815,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/update_fiber.rb",
			"settings":
			{
				"buffer_size": 2305,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/model_main_code.rb",
			"settings":
			{
				"buffer_size": 2647,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/view_visualize_controller.rb",
			"settings":
			{
				"buffer_size": 10116,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/history.rb",
			"settings":
			{
				"buffer_size": 1496,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/live_code_loader.rb",
			"settings":
			{
				"buffer_size": 4897,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/UI_model.rb",
			"settings":
			{
				"buffer_size": 893,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"contents": "FIXME: first iteration the main code does not save, and then it looks like it may be forever one tick behind from there on out\n\nthere should be 3 History objects that save every frame\n\t# @core_space = History.new(Model::CoreSpace.new)\n    # @raw_input_history = History.new(LiveCode.new(\n    # @main_code =  History.new(\n\n\ntwo of them use LiveCode\n \nthe main code one prints \n\"\tsaving, in body\"\non save, due to how the YAML serialization is implemented\n\nthus, the one that does not print that extra statement\nis the ---input history---\n\n\n\n\nwhat I see is that input history and CoreSpace are updated (and saved) but not main code. why is that? how do I stop that?\n",
			"settings":
			{
				"buffer_size": 663,
				"line_ending": "Unix",
				"name": "FIXME: first iteration the main code does not save"
			}
		},
		{
			"contents": "--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: \n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n--- !ruby/object:LiveCode\nstate: normal\ninner: !ruby/object:Model::MainCode\n  payload: 42\n  regenerate_update_thread: false\nfile: !ruby/object:Pathname\n  path: \"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb\"\nlast_time: 2019-06-09 23:16:25.214760536 -04:00\n",
			"settings":
			{
				"buffer_size": 3175,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "LiveCode#attempt_reload\n  output - 1 of 3 possible signals:\n  \n  reload_successful\n  file_unchanged\n  reload_failed\n  \nsignals are processed by LiveCode#update\nwhich then returns true / false to History#update\n  true:  save state and advance counter\n  false: don't save, don't move counter\n\nand that final signal is processed by Controller#on_update\n(callback that fires when #update is run, which happens ONLY in the 'running' state)\n\n\n\n\n\nLiveCode#attempt_reload\n  |\n  |  1 of 3 possible signals:\n  |  reload_successful, file_unchanged, reload_failed\n  V\nLiveCode#update\n  |\n  |  true / false\n  |\n  V\nHistory#update\n  |\n  |\n  V\nController#update (while in 'running' state)\nController#on_update\n\n\n\n\n(creation of new states)\n=============================================================================\n [0000]       size  0 1 \n @live_code  (   2) . . \n @core_space (   2) . . \n @user_input (   2) . . \n=============================================================================\n\n(still creating states)\n=============================================================================\n [0000]       size  0 1 2 3 4 5 6 7 8 9 10\n @live_code  (   4) . . . . . . \n @core_space (   4) . . . . . . \n @user_input (   1) . . . . . . \n=============================================================================\n\n(main code runs out of stuff to do on turn 5, but execution continues)\n(thus, you can mime actions and create user input, and later write the code)\n=============================================================================\n [0000]       size  0 1 2 3 4 5 6 7 8 9 10\n @live_code  (   4) . . . . . . \n @core_space (   4) . . . . . . . . . . . \n @user_input (   1) . . . . . . . . . . . \n=============================================================================\n\n\n(but if there's an error before that point, execution halts)\n(here there is an error on turn 3 of the main code)\n=============================================================================\n [0000]       size  0 1 2 3 4 5 6 7 8 9 10\n @live_code  (   4) . . . x\n @core_space (   4) . . . .\n @user_input (   1) . . . .\n=============================================================================",
			"settings":
			{
				"buffer_size": 2167,
				"line_ending": "Unix",
				"name": "LiveCode#attempt_reload"
			}
		},
		{
			"contents": "FIXME: may not want to be able to generate new state in slow motion. maybe only allow for slow-mo replays? that would be easier I think, and also perhaps more useful / intuitive\n        \n if you auto step forward with delay to generate new state, how do you capture input? do you just drop it?\n    that seems weird - then some histories are not the same as others, depending on how the history was generated\n if you allow manually stepping forward to generate state, you also have this problem\n   rather than making manual forward stepping work in GUI the way in did in previous REPL versions, likely the REPL forward step needs to be restricted.\n   keep the two in sync, but really it's the REPL that was doing something it should not have been doing\n \n if you allow manually stepping forward to generate new state, or manually stepping forward ",
			"settings":
			{
				"buffer_size": 846,
				"line_ending": "Unix",
				"name": "FIXME: may not want to be able to generate new sta"
			}
		},
		{
			"contents": "FIXME: when code reaches the end of execution, do not save any more history, but continue to advance the @i in controller. need to continue to take in input events.",
			"settings":
			{
				"buffer_size": 164,
				"line_ending": "Unix",
				"name": "FIXME: when code reaches the end of execution, do"
			}
		},
		{
			"contents": "=============================================================================\n    |=[0000]       size  0 1 2 3 4 5 6 7 8 9 10 11 12 13\n    | @live_code  (   4) x x x x x x x x x x x x x x\n    | @core_space (   4) x x x x x x x x x x x x x x\n |--| @user_input (   1) x _ _ _ _ _ _ _ _ _ _ _ _ _\n |  \n |  \n |->|=[0001]       size  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n    | @live_code  (   4) x x x x x x x x x x x x x x x x x x x\n    | @core_space (   4) x x x x x x x x x x x x x x x x x x x\n |--| @user_input (   1) x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n |    \n |    \n |->|=[0002]       size  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n    | @live_code  (   4) x x x x x x x x x x x x x x x x x x x\n    | @core_space (   4) x x x x x x x x x x x x x x x x x x x\n    | @user_input (   1) x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n=============================================================================\n",
			"settings":
			{
				"buffer_size": 918,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "todo\n-----\n\n\n\nstore user input in history\n\n\nAfter going back in time (to the past) and making a change, state between the past and the present will be invalidated. Need a way to overwrite this state in the alternate timeline. Currently, the old state will persist. Thus, reloading is only useful for effecting future state, which is... dramatically less useful.\n\nbranch history - when you time travel and make a change, create new timeline where new history can be created (can step \"forward\" to return to present, geenerating new state)\n\n\tbetter visualizaiton - center the numbers for state index using proportional font\n\n\tbranch visualization - use compressed one-line viz (rather than 3 line) for alternate timelines\n\nparse user input over time\n\nimplement spatial entity support\n\nimplement direct input - click and drag text and basic shapes (circles, rects)\n\n\n\n\n\nladder of abstraction - view stored values over time without having to step.\n\tright now, the value is just a number, so I could just plot it over time, but later on I need to have an onion-skin effect to show things changing in space\n\nhook up color picker widget to ruby level\n\nimplement scrubbing code modification\n\tscrub a value (or direct manip?) in the spatial view, and when movement stops, update the code using awk / sed or similar. not critical, but would be cool.\n\n\n\n",
			"settings":
			{
				"buffer_size": 1343,
				"line_ending": "Unix",
				"name": "todo"
			}
		},
		{
			"file": "bin/data/output.log",
			"settings":
			{
				"buffer_size": 7511,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 381.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ruby",
				"Set Syntax: Ruby"
			],
			[
				"yam",
				"Set Syntax: YAML"
			],
			[
				"text",
				"Set Syntax: Plain Text"
			],
			[
				"space",
				"Indentation: Convert to Spaces"
			],
			[
				"refresh",
				"Project: Refresh Folders"
			],
			[
				"sidebar",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"spa",
				"Indentation: Convert to Spaces"
			],
			[
				"spac",
				"Indentation: Convert to Spaces"
			],
			[
				"rub",
				"Set Syntax: Ruby"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"ind",
				"Indentation: Convert to Spaces"
			],
			[
				"package list",
				"Package Control: List Packages"
			],
			[
				"inde",
				"Indentation: Convert to Spaces"
			],
			[
				"in",
				"Indentation: Convert to Spaces"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"remove pack",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"gig",
				"Git GUI Clients: Gitg"
			],
			[
				"theem",
				"UI: Select Theme"
			],
			[
				"m",
				"Monokai Pro: select theme"
			],
			[
				"mo",
				"Monokai Pro: select theme"
			],
			[
				"monk",
				"Monokai Pro: select theme"
			],
			[
				"package dis",
				"Package Control: Disable Package"
			],
			[
				"ori below",
				"Origami: Create Pane Below"
			],
			[
				"ori pan eri",
				"Origami: Create Pane on the Right"
			],
			[
				"ori dest",
				"Origami: Destroy Pane on the Left"
			],
			[
				"ori",
				"Origami: Destroy Pane Below"
			],
			[
				"ori de",
				"Origami: Destroy Current Pane"
			],
			[
				"origa pane le",
				"Origami: Create Pane on the Left"
			],
			[
				"gitg",
				"Git GUI Clients: Gitg"
			],
			[
				"g",
				"Git GUI Clients: Gitg"
			],
			[
				"view as",
				"SublimeHighlight: view as HTML"
			],
			[
				"convert to html",
				"SublimeHighlight: convert to HTML"
			],
			[
				"convert",
				"SublimeHighlight: convert to RTF"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"packge remove",
				"Package Control: Remove Package"
			],
			[
				"list ",
				"Package Control: List Packages"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"enable ",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"add repo",
				"Package Control: Add Repository"
			],
			[
				"packgae",
				"Package Control: List Packages"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"gitgui",
				"Git GUI Clients: Gitg"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"makefil",
				"Set Syntax: Makefile"
			],
			[
				"ging",
				"Git GUI Clients: Gitg"
			],
			[
				"pacage",
				"Package Control: Enable Package"
			],
			[
				"amke",
				"Set Syntax: Makefile"
			],
			[
				"makefile",
				"Set Syntax: Makefile"
			],
			[
				"c++",
				"Set Syntax: Objective-C++"
			],
			[
				"objec",
				"Set Syntax: Objective-C"
			],
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"makef",
				"Set Syntax: Makefile"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"irb",
				"SublimeREPL: Ruby IRB (deprecated)"
			],
			[
				"ruby ",
				"SublimeREPL: Ruby"
			],
			[
				"python",
				"SublimeREPL: Python"
			],
			[
				"r oc",
				"SublimeREPL: Octave"
			],
			[
				"repl o",
				"SublimeREPL: Octave"
			],
			[
				"octav",
				"SublimeREPL: Octave"
			],
			[
				"repl ruby",
				"SublimeREPL: Ruby"
			],
			[
				"repl ru",
				"SublimeREPL: Ruby"
			],
			[
				"repl",
				"SublimeREPL: Octave"
			],
			[
				"repl rub",
				"SublimeREPL: Ruby"
			],
			[
				"repl j",
				"SublimeREPL: Clojure"
			],
			[
				"mal",
				"Set Syntax: MATLAB"
			],
			[
				"matl",
				"Set Syntax: MATLAB"
			],
			[
				"keyb",
				"Preferences: Key Bindings - User"
			],
			[
				"mat",
				"Set Syntax: MATLAB"
			],
			[
				"package en",
				"Package Control: Upgrade Package"
			],
			[
				"matlab",
				"Set Syntax: MATLAB"
			],
			[
				"repl oca",
				"SublimeREPL: Octave"
			],
			[
				"repl octa",
				"SublimeREPL: Octave"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"todo",
				"Show TODOs: Project and open files"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"pla",
				"Set Syntax: Plain Text"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"tod",
				"Show TODOs: Project and open files"
			],
			[
				"to",
				"Show TODOs: Project and open files"
			],
			[
				"",
				"About"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"log",
				"Git: Log Current File"
			],
			[
				"st",
				"Git: Status"
			],
			[
				"stat",
				"Git: Status"
			],
			[
				"pre",
				"Markdown Preview: preview in Browser"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pr",
				"Markdown Preview: preview in Browser"
			],
			[
				"previe",
				"Markdown Preview: preview in Browser"
			],
			[
				"snipp",
				"Snippet: if … end"
			],
			[
				"snip",
				"Snippet: YAML.load(file)"
			],
			[
				"prefer",
				"Preferences: Settings - User"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"vie",
				"Markdown Preview: preview in Browser"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"reve",
				"File: Revert"
			],
			[
				"markdown",
				"Markdown Preview: preview in Sublime Text"
			],
			[
				"view",
				"Markdown Preview: preview in Browser"
			],
			[
				"prev",
				"Markdown Preview: preview in Browser"
			],
			[
				"smark",
				"Set Syntax: Markdown"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"bro",
				"Preferences: Browse Packages"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"fet",
				"Git: Fetch"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"syntax te",
				"Set Syntax: Textile"
			],
			[
				"lo",
				"Git: Log All"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"oto",
				"Show TODOs: Open files only"
			],
			[
				"show",
				"Show TODOs: Project and open files"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"pcaka",
				"Package Control: Install Package"
			],
			[
				"pcak",
				"Package Control: Discover Packages"
			],
			[
				"anno",
				"Git: Toggle Annotations"
			]
		],
		"width": 1017.0
	},
	"console":
	{
		"height": 259.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib"
	],
	"file_history":
	[
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/base/project->main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/base/bin->main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/base/bin>main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/base/.gitignore",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/live_code_loader.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/sketch_pipeline.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_core_space.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_raw_input.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/update_fiber.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_code.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/pipeline.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/UI_InputController.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/Core_InputController.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/docs/visualstudio.md",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/sketch_memory_usage_tracker.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/scripts/dev/header.template",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.0/libs/boost/include/boost/range/has_range_iterator.hpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/history.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/model_main_code.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/sketch/new_timetravel/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/nonblocking_error_output.rb",
		"/home/ravenskrag/Desktop/gem_structure/build/window_guard.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/lib/sketch/repl_sketch.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/bin/data/output.log",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/bin/data/settings.xml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecode2/config/build_variables.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/custom_package.txt",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks_v10.1/CHANGELOG.md",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/INSTALL.md",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/windowing/windowExample/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/windowing/windowExample/src/main.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/history/history.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/helpers.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/new_timetravel/mode_code.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/new_timetravel/nonblocking_error_output.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/new_timetravel/live_code_view.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/new_timetravel/live_code_model_main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/new_timetravel/decorator.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/new_timetravel/history.rb",
		"/home/ravenskrag/Desktop/todos/2019-05-01",
		"/home/ravenskrag/Desktop/todos/2019-05-13",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/example/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/crash_reports/chimpunk_bb_query_segfault.txt",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/entities/group.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/actions/selection_add_single.rb",
		"/home/ravenskrag/.config/sublime-text-3/Packages/PlainTasks/messages/Tutorial.todo",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/components/physics.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/space.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/monkey_patches/Chipmunk/Shape/Rect.rb",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/rectangle.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/checkpoint.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/lazy_unzip.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/Makefile",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/addons.make",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/bin/data/data.yml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/bin/data/local_data.yml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/bin/data/foo2.yml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/bin/data/channel_info.yml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/round_tripping/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/round_tripping/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/window/app.cpp",
		"/home/ravenskrag/Desktop/gem_structure/common.rb",
		"/home/ravenskrag/Desktop/gem_structure/Rakefile",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Graphics.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/monkey_patches/chipmunk/vec2.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/boilerplate/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/Gemfile.lock",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/Gemfile",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/window/constants/data_path.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxInfiniteCanvas/ofx2DCamExample/addons.make",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxInfiniteCanvas/addon_config.mk",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/ext/callbacks/callbacks.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecoding/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/hunspell/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/hunspell/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/database/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecoding/lib/main.rb",
		"/home/ravenskrag/Projects/1_Sketchbook/Current/fiber_test.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/TrueTypeFont.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/rubyOF.cpp",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/color.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/Graphics.h",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/graphics.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/example/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/main2.rb",
		"/home/ravenskrag/Projects/1_Sketchbook/Current/youtube_mining/local_data.yml",
		"/home/ravenskrag/Projects/1_Sketchbook/Current/youtube_mining/youtube_subscriptions_2.html",
		"/home/ravenskrag/Projects/2_Personal/Current/of_pdf_import/ofxPDFium_test/ofxPDFium/src/ofxPDFium.cpp",
		"/home/ravenskrag/Projects/2_Personal/Current/of_pdf_import/ofxPDFium_test/ofxPDFium/src/ofxPDFium.h",
		"/home/ravenskrag/Projects/2_Personal/Current/of_pdf_import/ofxPDFium_test/example/src/ofApp.cpp",
		"/home/ravenskrag/Projects/2_Personal/Current/of_pdf_import/ofxPDFium_test/example/src/ofApp.h",
		"/home/ravenskrag/Projects/2_Personal/Current/of_pdf_import/ofxPDFium_test/example/src/main.cpp",
		"/home/ravenskrag/Projects/2_Personal/Current/of_pdf_import/ofxPDFium_test/ofxPDFium/libs/fpdfsdk/include/fpdf_dataavail.h",
		"/home/ravenskrag/Code/Source/OpenFrameworks/git_repo/addons/ofxiOS/src/app/ofAppiOSWindow.mm",
		"/home/ravenskrag/Code/Source/OpenFrameworks/new/openFrameworks/CHANGELOG.md",
		"/home/ravenskrag/Code/Source/OpenFrameworks/new/openFrameworks/CODE_OF_CONDUCT.md",
		"/home/ravenskrag/Applications/0_ local launchers/Cytoscape-0.desktop",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_libs/custom/poco/poco-1.7.4-all/build/rules/compile",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_libs/custom/poco/poco-1.7.4-all/build/config/Linux",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_libs/custom/poco/poco-1.7.4-all/Makefile",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/config.project.mk",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/config.shared.mk",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/scripts/linux/compileOF.sh",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/linux64/config.linux64.default.mk",
		"/home/ravenskrag/Experiments/RubyCPP/oF_ruby_build_system.sublime-workspace",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_libs/custom/poco/poco-1.7.4-all/README",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/compile.core.mk",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/Makefile",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/INSTALL.md",
		"/home/ravenskrag/Experiments/RubyCPP/project_files/oF_ruby_build_system.sublime-project",
		"/home/ravenskrag/Experiments/RubyCPP/project_files/oF_ruby_build_system.sublime-workspace",
		"/home/ravenskrag/Experiments/RubyCPP/project_files/oF_ruby_core.sublime-project",
		"/home/ravenskrag/Experiments/RubyCPP/project_files/oF_ruby_core.sublime-workspace",
		"/home/ravenskrag/Code/Source/OpenFrameworks/of_v0.9.3_libs/custom/kiss/README",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/addons/obj/linux64/Release/.compiler_flags",
		"/home/ravenskrag/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/addons/obj/linux64/Debug/.compiler_flags",
		"/home/ravenskrag/Experiments/RubyCPP/Oni/ext/oni/cpp/oF_Test/mySketch/Makefile",
		"/home/ravenskrag/Experiments/RubyCPP/Oni/ext/oni/cpp/oF_Test/mySketch/config.make",
		"/home/ravenskrag/Experiments/RubyCPP/Oni/ext/oni/cpp/oF_Test/mySketch/Makefile.static_lib",
		"/home/ravenskrag/Experiments/RubyCPP/Oni/ext/oni/cpp/oF_Test/mySketch/addons.make",
		"/home/ravenskrag/Experiments/RubyCPP/Oni/ext/oni/cpp/mySketch/Makefile",
		"/home/ravenskrag/Experiments/RubyCPP/Oni/ext/oni/mkmf.log"
	],
	"find":
	{
		"height": 104.0
	},
	"find_in_files":
	{
		"height": 264.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"if =>",
			"error_detected",
			"error_fixed",
			"state_machine",
			"error_detected",
			"on_error",
			"error_fixed",
			"error_detected",
			"error_fixed",
			"error_detected",
			"def update(*args)\n        \n      end\n      \n      def draw\n        \n      end",
			"col3_x",
			"grouping",
			"mouse_in",
			"finished",
			"=>",
			"@raw_input_history",
			"puts",
			"FIXME",
			"starting new session",
			"ruby/object:LiveCode",
			"history",
			"space_history",
			"data",
			"on_play",
			"play",
			"History.new",
			"history",
			"History",
			"history",
			"History",
			"input_history",
			"load",
			"@main_code.",
			"@main_code.update",
			"@main_code",
			".update",
			"=> ",
			"saving, in",
			"saving, in body",
			"saving ",
			"saving",
			"step_forward",
			"@main_code.",
			"@main_code",
			"on_update",
			"@main_code",
			"normal",
			"@state",
			"value",
			"update failed for",
			"finished",
			"update_successful",
			"return false",
			"def update",
			"update",
			"# input_queue -> @ui_input\n      Pipeline.open do |p| \n        p.start input_queue\n        p.pipe{|x| @ui_input.update x => window  }\n      end\n      \n      # # input_queue -> @input_history -> @core_input\n      # Pipeline.open do |p| \n      #   p.start input_queue\n      #   p.pipe{|x| @input_history.update x }\n      #   p.pipe{|x| @core_input.update window, x }\n      # end\n      \n      # # @core_space -> @main_code ---> signal\n      # signal = \n      #   Pipeline.open do |p| \n      #     p.start @core_space.update\n      #     p.pipe{|x| @main_code.update @i, x }\n      #   end\n      # if signal == :error\n      #   self.error_detected()\n      # end",
			"on_update",
			"13",
			":@live_code",
			"next_i",
			"error",
			"@input_queue",
			"\n      # # @input_queue -> @input_history -> @core_input\n      # Pipeline.open do |p| \n      #   p.start input_queue\n      #   p.pipe{|x| @input_history.update x }\n      #   p.pipe{|x| @core_input.update window, x }\n      # end\n      ",
			"\n      @input_history.update(input_queue)\n      \n      \n      @ui_input\n      @core_input\n      \n      \n      @main_code.update\n      @core_space.update",
			"Fiber",
			"@fiber",
			"fiber.",
			"a",
			"x.",
			"@",
			"update",
			"@raw_input",
			"@live_code",
			"on_time_travel_start",
			"live_code",
			"@",
			">>",
			"|>",
			"->",
			"on_run",
			"=",
			"@",
			"= ",
			"on_step_forward",
			"on_update",
			"x",
			"attempt_reload",
			"update failed",
			"window.timeline_controller",
			"pause",
			"@i",
			"@delay",
			"ui_model",
			"timeline_controller",
			"def",
			"space",
			"class Window",
			"mouse posit",
			"mouse positoin",
			"mouse position:",
			"mouse position",
			".clear",
			"@input_controller",
			".",
			"timeline_controller",
			"@controller",
			"@x",
			"@input_history",
			"@raw_input",
			",",
			"input_events",
			"@macro_processing",
			"def",
			"scroll",
			"@raw_input",
			"@user_input",
			"show_text",
			"buffer",
			"text_buffer",
			"@raw_input",
			"live",
			"super",
			"--",
			"@user_input",
			"||= ",
			"font: font",
			"= R"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 17,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 69,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "env GDK_SCALE=2 GDK_DPI_SCALE=0.5 /opt/sublime_mer",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1119,
						"regions":
						{
						},
						"selection":
						[
							[
								439,
								439
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Ruby/Ruby.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3527,
						"regions":
						{
						},
						"selection":
						[
							[
								2275,
								2275
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2762.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Feature_List.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 516,
						"regions":
						{
						},
						"selection":
						[
							[
								516,
								516
							]
						],
						"settings":
						{
							"auto_name": "Feature List",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "docs/readme.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 620,
						"regions":
						{
						},
						"selection":
						[
							[
								492,
								492
							]
						],
						"settings":
						{
							"auto_name": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "docs/update_control_flow.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 680,
						"regions":
						{
						},
						"selection":
						[
							[
								4,
								4
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 727,
						"regions":
						{
						},
						"selection":
						[
							[
								727,
								727
							]
						],
						"settings":
						{
							"auto_name": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1473,
						"regions":
						{
						},
						"selection":
						[
							[
								534,
								534
							]
						],
						"settings":
						{
							"auto_name": "TODO: button event codes should be made more disco",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/ravenskrag/Desktop/gem_structure/.gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2552,
						"regions":
						{
						},
						"selection":
						[
							[
								1613,
								1613
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/zzz A File Icon zzz/aliases/Shell Script (Git).sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2410.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/button_event_codes.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2340,
						"regions":
						{
						},
						"selection":
						[
							[
								1076,
								1076
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/window.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1357,
						"regions":
						{
						},
						"selection":
						[
							[
								601,
								601
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 276,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										645,
										648
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										603,
										606
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/ravenskrag/Desktop/gem_structure/build/window_guard.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 922,
						"regions":
						{
						},
						"selection":
						[
							[
								565,
								565
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										918,
										921
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										199,
										204
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										918,
										921
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										199,
										204
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/home/ravenskrag/Desktop/gem_structure/bin/main.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1815,
						"regions":
						{
						},
						"selection":
						[
							[
								1161,
								1161
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1811,
										1814
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										174,
										177
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1160,
										1161
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										1146,
										1147
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 202.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "lib/main.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1661,
						"regions":
						{
						},
						"selection":
						[
							[
								607,
								607
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 279,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										604,
										607
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										529,
										531
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "ext/c_extension/app.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1945,
						"regions":
						{
						},
						"selection":
						[
							[
								908,
								908
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										908,
										909
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										895,
										896
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 490.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "ext/c_extension/app.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17139,
						"regions":
						{
						},
						"selection":
						[
							[
								11317,
								11317
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										15269,
										15270
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										15251,
										15252
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										13406,
										13407
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/sublime-languages/Better C++/CCpp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 11232.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 18,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 19,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 574,
						"regions":
						{
						},
						"selection":
						[
							[
								440,
								440
							]
						],
						"settings":
						{
							"auto_name": "FIXME: run into a case where History#update tries",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 20,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3553,
						"regions":
						{
						},
						"selection":
						[
							[
								389,
								389
							]
						],
						"settings":
						{
							"auto_name": "three things get saved by history in the main cont",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 21,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 22,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 876,
						"regions":
						{
						},
						"selection":
						[
							[
								876,
								876
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Ruby/Ruby.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 23,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90202,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										292,
										297
									],
									[
										506,
										511
									],
									[
										878,
										883
									],
									[
										1153,
										1158
									],
									[
										1369,
										1374
									],
									[
										1802,
										1807
									],
									[
										1883,
										1888
									],
									[
										2265,
										2270
									],
									[
										2491,
										2496
									],
									[
										2797,
										2802
									],
									[
										2942,
										2947
									],
									[
										3114,
										3119
									],
									[
										3533,
										3538
									],
									[
										3882,
										3887
									],
									[
										4165,
										4170
									],
									[
										4306,
										4311
									],
									[
										4660,
										4665
									],
									[
										4933,
										4938
									],
									[
										5412,
										5417
									],
									[
										5826,
										5831
									],
									[
										6023,
										6028
									],
									[
										6827,
										6832
									],
									[
										7345,
										7350
									],
									[
										7725,
										7730
									],
									[
										7894,
										7899
									],
									[
										8051,
										8056
									],
									[
										8692,
										8697
									],
									[
										8986,
										8991
									],
									[
										9362,
										9367
									],
									[
										9621,
										9626
									],
									[
										9778,
										9783
									],
									[
										9912,
										9917
									],
									[
										10354,
										10359
									],
									[
										10829,
										10834
									],
									[
										11361,
										11366
									],
									[
										11846,
										11851
									],
									[
										12184,
										12189
									],
									[
										12608,
										12613
									],
									[
										13051,
										13056
									],
									[
										13297,
										13302
									],
									[
										13808,
										13813
									],
									[
										14154,
										14159
									],
									[
										14351,
										14356
									],
									[
										14605,
										14610
									],
									[
										14947,
										14952
									],
									[
										15311,
										15316
									],
									[
										15681,
										15686
									],
									[
										15955,
										15960
									],
									[
										16187,
										16192
									],
									[
										16460,
										16465
									],
									[
										16790,
										16795
									],
									[
										17090,
										17095
									],
									[
										17348,
										17353
									],
									[
										17816,
										17821
									],
									[
										18690,
										18695
									],
									[
										19301,
										19306
									],
									[
										19663,
										19668
									],
									[
										20219,
										20224
									],
									[
										20758,
										20763
									],
									[
										20888,
										20893
									],
									[
										21392,
										21397
									],
									[
										21856,
										21861
									],
									[
										22159,
										22164
									],
									[
										22504,
										22509
									],
									[
										22832,
										22837
									],
									[
										23092,
										23097
									],
									[
										23209,
										23214
									],
									[
										23481,
										23486
									],
									[
										23651,
										23656
									],
									[
										24147,
										24152
									],
									[
										24450,
										24455
									],
									[
										24978,
										24983
									],
									[
										25280,
										25285
									],
									[
										25812,
										25817
									],
									[
										26161,
										26166
									],
									[
										26339,
										26344
									],
									[
										26994,
										26999
									],
									[
										27120,
										27125
									],
									[
										28026,
										28031
									],
									[
										28499,
										28504
									],
									[
										29071,
										29076
									],
									[
										29383,
										29388
									],
									[
										29673,
										29678
									],
									[
										29900,
										29905
									],
									[
										30142,
										30147
									],
									[
										30475,
										30480
									],
									[
										30760,
										30765
									],
									[
										31376,
										31381
									],
									[
										31513,
										31518
									],
									[
										31833,
										31838
									],
									[
										32192,
										32197
									],
									[
										32307,
										32312
									],
									[
										32969,
										32974
									],
									[
										33373,
										33378
									],
									[
										33525,
										33530
									],
									[
										33670,
										33675
									],
									[
										34113,
										34118
									],
									[
										34601,
										34606
									],
									[
										35107,
										35112
									],
									[
										35780,
										35785
									],
									[
										36279,
										36284
									],
									[
										36694,
										36699
									],
									[
										37159,
										37164
									],
									[
										37910,
										37915
									],
									[
										38236,
										38241
									],
									[
										38579,
										38584
									],
									[
										43238,
										43243
									],
									[
										43461,
										43466
									],
									[
										43738,
										43743
									],
									[
										43925,
										43930
									],
									[
										44319,
										44324
									],
									[
										44621,
										44626
									],
									[
										45095,
										45100
									],
									[
										45449,
										45454
									],
									[
										45870,
										45875
									],
									[
										46120,
										46125
									],
									[
										46471,
										46476
									],
									[
										46810,
										46815
									],
									[
										47182,
										47187
									],
									[
										47465,
										47470
									],
									[
										47606,
										47611
									],
									[
										47960,
										47965
									],
									[
										48233,
										48238
									],
									[
										48712,
										48717
									],
									[
										49126,
										49131
									],
									[
										49323,
										49328
									],
									[
										50127,
										50132
									],
									[
										50645,
										50650
									],
									[
										51025,
										51030
									],
									[
										51194,
										51199
									],
									[
										51351,
										51356
									],
									[
										51992,
										51997
									],
									[
										52286,
										52291
									],
									[
										52662,
										52667
									],
									[
										52921,
										52926
									],
									[
										53078,
										53083
									],
									[
										53212,
										53217
									],
									[
										53654,
										53659
									],
									[
										54129,
										54134
									],
									[
										54661,
										54666
									],
									[
										55146,
										55151
									],
									[
										55484,
										55489
									],
									[
										55908,
										55913
									],
									[
										56351,
										56356
									],
									[
										56597,
										56602
									],
									[
										57108,
										57113
									],
									[
										57454,
										57459
									],
									[
										57651,
										57656
									],
									[
										57905,
										57910
									],
									[
										58247,
										58252
									],
									[
										58611,
										58616
									],
									[
										58981,
										58986
									],
									[
										59255,
										59260
									],
									[
										59487,
										59492
									],
									[
										59760,
										59765
									],
									[
										60090,
										60095
									],
									[
										60390,
										60395
									],
									[
										60648,
										60653
									],
									[
										61116,
										61121
									],
									[
										61990,
										61995
									],
									[
										62601,
										62606
									],
									[
										62963,
										62968
									],
									[
										63519,
										63524
									],
									[
										64058,
										64063
									],
									[
										64188,
										64193
									],
									[
										64692,
										64697
									],
									[
										65156,
										65161
									],
									[
										65459,
										65464
									],
									[
										65804,
										65809
									],
									[
										66132,
										66137
									],
									[
										66392,
										66397
									],
									[
										66509,
										66514
									],
									[
										66781,
										66786
									],
									[
										66951,
										66956
									],
									[
										67447,
										67452
									],
									[
										67750,
										67755
									],
									[
										68278,
										68283
									],
									[
										68580,
										68585
									],
									[
										69112,
										69117
									],
									[
										69461,
										69466
									],
									[
										69639,
										69644
									],
									[
										70300,
										70305
									],
									[
										70426,
										70431
									],
									[
										71332,
										71337
									],
									[
										71805,
										71810
									],
									[
										72383,
										72388
									],
									[
										72695,
										72700
									],
									[
										72985,
										72990
									],
									[
										73218,
										73223
									],
									[
										73460,
										73465
									],
									[
										73793,
										73798
									],
									[
										74078,
										74083
									],
									[
										74694,
										74699
									],
									[
										74831,
										74836
									],
									[
										75151,
										75156
									],
									[
										75510,
										75515
									],
									[
										75625,
										75630
									],
									[
										76293,
										76298
									],
									[
										76697,
										76702
									],
									[
										76849,
										76854
									],
									[
										76994,
										76999
									],
									[
										77437,
										77442
									],
									[
										77925,
										77930
									],
									[
										78431,
										78436
									],
									[
										79104,
										79109
									],
									[
										79603,
										79608
									],
									[
										80018,
										80023
									],
									[
										80483,
										80488
									],
									[
										81240,
										81245
									],
									[
										81572,
										81577
									],
									[
										81921,
										81926
									],
									[
										82173,
										82178
									],
									[
										82538,
										82543
									],
									[
										82767,
										82772
									],
									[
										83050,
										83055
									],
									[
										83237,
										83242
									],
									[
										83637,
										83642
									],
									[
										83939,
										83944
									],
									[
										84419,
										84424
									],
									[
										84779,
										84784
									],
									[
										85206,
										85211
									],
									[
										85456,
										85461
									],
									[
										85813,
										85818
									],
									[
										86154,
										86159
									],
									[
										86323,
										86328
									],
									[
										86512,
										86517
									],
									[
										86710,
										86715
									],
									[
										87043,
										87048
									],
									[
										87233,
										87238
									],
									[
										87409,
										87414
									],
									[
										87642,
										87647
									],
									[
										88067,
										88080
									],
									[
										88178,
										88191
									],
									[
										88459,
										88472
									],
									[
										88632,
										88645
									],
									[
										88714,
										88727
									],
									[
										88871,
										88884
									],
									[
										89157,
										89170
									],
									[
										89288,
										89301
									],
									[
										89518,
										89531
									],
									[
										89714,
										89727
									],
									[
										89984,
										89997
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								89484,
								89484
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"rainbowth.lispy": false,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 68202.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "lib/window.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10561,
						"regions":
						{
						},
						"selection":
						[
							[
								2834,
								2834
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										4209,
										4210
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										4037,
										4038
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2834,
										2835
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										2810,
										2811
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2400.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "lib/controller_state_machine.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8906,
						"regions":
						{
						},
						"selection":
						[
							[
								7866,
								7866
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										8902,
										8905
									]
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7863,
										7866
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										7818,
										7820
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9799.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "lib/model_code.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3815,
						"regions":
						{
						},
						"selection":
						[
							[
								618,
								618
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										615,
										618
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										299,
										301
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										615,
										618
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										299,
										301
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1536.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "lib/update_fiber.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2305,
						"regions":
						{
						},
						"selection":
						[
							[
								2305,
								2305
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 330.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "lib/model_main_code.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2647,
						"regions":
						{
						},
						"selection":
						[
							[
								2440,
								2440
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										2573,
										2576
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										2233,
										2235
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2474,
										2477
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										2410,
										2412
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "lib/view_visualize_controller.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10116,
						"regions":
						{
						},
						"selection":
						[
							[
								9578,
								9578
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										2431,
										2432
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										2397,
										2398
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										9882,
										9885
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										9575,
										9577
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8362.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "lib/history.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1496,
						"regions":
						{
						},
						"selection":
						[
							[
								752,
								752
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										866,
										869
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										627,
										629
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										866,
										869
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										627,
										629
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "lib/live_code_loader.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4897,
						"regions":
						{
						},
						"selection":
						[
							[
								1015,
								1015
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1700,
										1703
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1455,
										1460
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1059,
										1062
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										738,
										743
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "lib/UI_model.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 893,
						"regions":
						{
						},
						"selection":
						[
							[
								562,
								562
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										755,
										758
									],
									"2":
									[
										755,
										758
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									],
									"2":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										445,
										447
									],
									"2":
									[
										445,
										447
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										876,
										879
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										565,
										568
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 33,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 34,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 663,
						"regions":
						{
						},
						"selection":
						[
							[
								663,
								663
							]
						],
						"settings":
						{
							"auto_name": "FIXME: first iteration the main code does not save",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 35,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3175,
						"regions":
						{
						},
						"selection":
						[
							[
								1061,
								1061
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1060,
										1061
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										975,
										976
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 36,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2167,
						"regions":
						{
						},
						"selection":
						[
							[
								436,
								436
							]
						],
						"settings":
						{
							"auto_name": "LiveCode#attempt_reload",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 37,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 846,
						"regions":
						{
						},
						"selection":
						[
							[
								846,
								846
							]
						],
						"settings":
						{
							"auto_name": "FIXME: may not want to be able to generate new sta",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 38,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 164,
						"regions":
						{
						},
						"selection":
						[
							[
								164,
								164
							]
						],
						"settings":
						{
							"auto_name": "FIXME: when code reaches the end of execution, do",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 39,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 918,
						"regions":
						{
						},
						"selection":
						[
							[
								918,
								918
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 40,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1343,
						"regions":
						{
						},
						"selection":
						[
							[
								43,
								43
							]
						],
						"settings":
						{
							"auto_name": "todo",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "bin/data/output.log",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7511,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"rainbowth.lispy": false,
							"syntax": "Packages/zzz A File Icon zzz/aliases/Plain Text (Log).sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 49.0
	},
	"input":
	{
		"height": 67.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 323.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 96.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "qbs debug",
	"project": "livecode_project.sublime-project",
	"replace":
	{
		"height": 90.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"livecode",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"histo",
				"livecode2/lib/history.rb"
			],
			[
				"livec code loader",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"livecodele",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"hist",
				"livecode2/lib/history.rb"
			],
			[
				"vi",
				"livecode2/lib/view_visualize_controller.rb"
			],
			[
				"live_code",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"liv",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"liveco",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"updatef",
				"livecode2/lib/update_fiber.rb"
			],
			[
				"modelco",
				"livecode2/lib/model_code.rb"
			],
			[
				"contr",
				"livecode2/lib/controller_state_machine.rb"
			],
			[
				"modelcode",
				"livecode2/lib/model_code.rb"
			],
			[
				"coreinp",
				"livecode2/lib/Core_InputController.rb"
			],
			[
				"win",
				"livecode2/lib/window.rb"
			],
			[
				"mode rawin",
				"livecode2/lib/model_raw_input.rb"
			],
			[
				"mode ra",
				"livecode2/lib/model_raw_input.rb"
			],
			[
				"vis",
				"ext/openFrameworks/docs/visualstudio.md"
			],
			[
				".log",
				"livecode2/bin/data/output.log"
			],
			[
				"ui",
				"livecode2/lib/UI_InputController.rb"
			],
			[
				"window",
				"livecode2/lib/window.rb"
			],
			[
				"view",
				"livecode2/lib/view_visualize_controller.rb"
			],
			[
				"wind",
				"livecode2/lib/window.rb"
			],
			[
				"live",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"controller",
				"livecode2/lib/controller_state_machine.rb"
			],
			[
				"visua",
				"ext/openFrameworks/docs/visualstudio.md"
			],
			[
				"pipe",
				"livecode2/lib/pipeline.rb"
			],
			[
				"h",
				"ext/openFrameworks/scripts/dev/header.template"
			],
			[
				"main",
				"livecode2/lib/main.rb"
			],
			[
				"maincod",
				"livecode2/lib/model_main_code.rb"
			],
			[
				"hsit",
				"ext/openFrameworks_v10.0/libs/boost/include/boost/range/has_range_iterator.hpp"
			],
			[
				"rawinput",
				"livecode2/lib/model_raw_input.rb"
			],
			[
				"pip",
				"livecode2/lib/pipeline.rb"
			],
			[
				"rawin",
				"livecode2/lib/model_raw_input.rb"
			],
			[
				"fiber",
				"livecode2/lib/update_fiber.rb"
			],
			[
				"space",
				"livecode2/lib/model_core_space.rb"
			],
			[
				"model main code",
				"livecode2/lib/model_main_code.rb"
			],
			[
				"sketch_pi",
				"livecode2/lib/sketch_pipeline.rb"
			],
			[
				"model co",
				"livecode2/lib/model_code.rb"
			],
			[
				"modec",
				"livecode2/lib/model_code.rb"
			],
			[
				"modelcod",
				"livecode2/lib/model_code.rb"
			],
			[
				"mode l",
				"livecode2/lib/model_code.rb"
			],
			[
				"code",
				"livecode2/lib/model_code.rb"
			],
			[
				"cores",
				"livecode2/lib/model_core_space.rb"
			],
			[
				"corein",
				"livecode2/lib/Core_InputController.rb"
			],
			[
				"mor",
				"livecode2/lib/model_raw_input.rb"
			],
			[
				"sketch",
				"livecode2/lib/sketch_pipeline.rb"
			],
			[
				"cont",
				"livecode2/lib/controller_state_machine.rb"
			],
			[
				"histor",
				"livecode2/lib/history.rb"
			],
			[
				"maincode",
				"livecode2/lib/model_main_code.rb"
			],
			[
				"sket",
				"livecode2/lib/sketch_pipeline.rb"
			],
			[
				"control",
				"livecode2/lib/controller_state_machine.rb"
			],
			[
				"upda",
				"livecode2/lib/update_fiber.rb"
			],
			[
				"live ",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"statema",
				"livecode2/lib/controller_state_machine.rb"
			],
			[
				"mri",
				"livecode2/lib/model_raw_input.rb"
			],
			[
				"mcs",
				"livecode2/lib/model_core_space.rb"
			],
			[
				"mc",
				"livecode2/lib/model_code.rb"
			],
			[
				"u",
				"livecode2/lib/update_fiber.rb"
			],
			[
				"lcl",
				"livecode2/lib/live_code_loader.rb"
			],
			[
				"nber",
				"livecode2/lib/nonblocking_error_output.rb"
			],
			[
				"out.lo",
				"livecode2/bin/data/output.log"
			],
			[
				"output.lo",
				"livecode2/bin/data/output.log"
			],
			[
				"sketch main.rb",
				"livecode2/lib/sketch/new_timetravel/main.rb"
			],
			[
				"window.cpp",
				"ext/openFrameworks/examples/windowing/windowExample/src/ofApp.cpp"
			],
			[
				"wid",
				"lib/window.rb"
			],
			[
				"moedlc",
				"model_code.rb"
			],
			[
				"true",
				"lib/rubyOF/true_type_font.rb"
			],
			[
				"camera",
				"youtube/lib/camera.rb"
			],
			[
				"spa",
				"youtube/lib/space.rb"
			],
			[
				"seria",
				"youtube/lib/history/serialized.rb"
			],
			[
				"rect",
				"lib/rubyOF/rectangle.rb"
			],
			[
				"help",
				"youtube/lib/helpers.rb"
			],
			[
				"color",
				"lib/rubyOF/color.rb"
			],
			[
				"graphics",
				"rubyOF/Graphics.cpp"
			],
			[
				"grah",
				"lib/rubyOF/graphics.rb"
			],
			[
				"graph",
				"lib/rubyOF/graphics.rb"
			],
			[
				"rake",
				"gem_structure/Rakefile"
			],
			[
				"pdfim",
				"ofxPDFium/src/ofxPDFium.cpp"
			],
			[
				"ofh",
				"example/src/ofApp.h"
			],
			[
				"ofxgui",
				"addons/ofxGui/src/ofxGui.h"
			],
			[
				"pocorulescompile",
				"of_v0.9.3_libs/custom/poco/poco-1.7.4-all/build/rules/compile"
			],
			[
				"custompocolinux",
				"of_v0.9.3_libs/custom/poco/poco-1.7.4-all/build/config/Linux"
			],
			[
				"custompocomakefile",
				"of_v0.9.3_libs/custom/poco/poco-1.7.4-all/Makefile"
			],
			[
				"compileprojectmk",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk"
			],
			[
				"configproject",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/config.project.mk"
			],
			[
				"configsharedmk",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/config.shared.mk"
			],
			[
				"comple",
				"of_v0.9.3_linux64_release/scripts/linux/compileOF.sh"
			],
			[
				"configlinux6",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/linux64/config.linux64.default.mk"
			],
			[
				"compiledmakefilecommcompile",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/compile.core.mk"
			],
			[
				"openframeworksmakefile",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/Makefile"
			],
			[
				"install",
				"of_v0.9.3_linux64_release/INSTALL.md"
			],
			[
				"releasecompile",
				"of_v0.9.3_linux64_release/addons/obj/linux64/Release/.compiler_flags"
			],
			[
				"compilerflags",
				"of_v0.9.3_linux64_release/addons/obj/linux64/Debug/.compiler_flags"
			],
			[
				"sketchstatic",
				"RubyCPP/Oni/ext/oni/cpp/mySketch/Makefile.static_lib"
			],
			[
				"sketchaddons",
				"RubyCPP/Oni/ext/oni/cpp/mySketch/addons.make"
			],
			[
				"ofbuildvaria",
				"RubyCPP/Oni/ext/oni/cpp/mySketch/oF_build_variables.yaml"
			],
			[
				"of_testadd",
				"~/Experiments/RubyCPP/Oni/ext/oni/cpp/oF_Test/mySketch/addons.make"
			],
			[
				"addons",
				"of_v0.9.3_linux64_release/addons/ofxAbletonLive/AbletonOSC/addons.make"
			],
			[
				"ofbuild",
				"RubyCPP/Oni/oF_build_variables.yaml"
			],
			[
				"variables",
				"RubyCPP/Oni/ext/oni/of_build_variables.yaml"
			],
			[
				".gi",
				"RubyCPP/.gitignore"
			],
			[
				"extvar",
				"RubyCPP/Oni/ext/oni/extconf_variables.rb"
			],
			[
				"make",
				"RubyCPP/Oni/ext/oni/Makefile"
			],
			[
				"ext",
				"Oni/ext/oni/extconf.rb"
			],
			[
				"extc",
				"Oni/ext/oni/extconf.deploy.rb"
			],
			[
				".",
				".gitignore"
			],
			[
				"event.h",
				"poco-1.7.4-all/Foundation/include/Poco/Event.h"
			],
			[
				"event",
				"poco-1.7.4-all/Foundation/src/Event.cpp"
			],
			[
				"thread",
				"poco-1.7.4-all/Foundation/src/Thread.cpp"
			],
			[
				"test",
				"Oni/lib/test.rb"
			],
			[
				"xt",
				"Oni/ext/oni/extconf.rb"
			],
			[
				"mysketchmake",
				"Oni/ext/oni/cpp/oF_Test/mySketch/Makefile"
			],
			[
				"gem",
				"Oni/oni.gemspec"
			],
			[
				"log",
				"Oni/ext/oni/mkmf.log"
			],
			[
				"extco",
				"Oni/ext/oni/extconf.deploy.rb"
			],
			[
				"compileco",
				"~/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/compile.core.mk"
			],
			[
				"config.m",
				"Oni/ext/oni/cpp/oF_Test/mySketch/config.make"
			],
			[
				"link",
				"~/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/linux64/config.linux64.default.mk"
			],
			[
				"compileof",
				"of_v0.9.3_linux64_release/scripts/linux/compileOF.sh"
			],
			[
				"git",
				"~/Experiments/RubyCPP/.gitignore"
			],
			[
				"ex",
				"~/Experiments/RubyCPP/Oni/ext/oni/extconf.rb"
			],
			[
				"e",
				"~/Experiments/RubyCPP/Oni/ext/oni/extconf.rb"
			],
			[
				"confp",
				"~/Experiments/OpenFrameworks/of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/config.project.mk"
			],
			[
				"rubycppofmake",
				"RubyCPP/Oni/ext/oni/cpp/oF_Test/mySketch/Makefile"
			],
			[
				"rubycpprake",
				"RubyCPP/Oni/Rakefile"
			],
			[
				"rubycppext",
				"RubyCPP/Oni/ext/oni/extconf.rb"
			],
			[
				"makefile",
				"Oni/ext/oni/Makefile"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sublime",
				"~/.config/sublime-text-3/Projects/Sublime3Config.sublime-project"
			],
			[
				"",
				"~/Experiments/oF_Test/oF_Test.sublime-project"
			],
			[
				"th",
				"/home/ravenskrag/Documents/Sublime/ThoughtTrace.sublime-project"
			],
			[
				"ete",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"e",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"et",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"gamn",
				"/home/ravenskrag/Documents/Projects/GameDesignNotes.sublime-project"
			],
			[
				"oni",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"on",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"321",
				"/home/ravenskrag/Documents/Projects/CS321_Project.sublime-project"
			],
			[
				"go",
				"/home/ravenskrag/Documents/Projects/Gosu.sublime-project"
			],
			[
				"42",
				"/home/ravenskrag/Documents/Projects/CS425_OgreProject.sublime-project"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 488.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wrap",
				"wrap"
			],
			[
				"keyboard",
				"keyboard_cb"
			],
			[
				"key",
				"keys"
			],
			[
				"setupopeng",
				"ofSetupOpenGL"
			],
			[
				"ofsetupop",
				"ofSetupOpenGL"
			]
		],
		"width": 492.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 439.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
