# Attempt to load a config.make file.
# If none is found, project defaults in config.project.make will be used.
ifneq ($(wildcard config.make),)
	include config.make
endif

# make sure the the OF_ROOT location is defined
ifndef OF_ROOT
	OF_ROOT=$(realpath ../../openFrameworks)
endif

# call the project makefile!
include $(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk





# ============================
# === custom make commands ===
# ============================

# need to set TARGET_NAME before loading the config,
# because the config assumes this var is defined already
# (not sure why this variable ends up blank by this time, but w/e)
include $(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/config.project.mk
include $(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/config.shared.mk


# run this task to make sure the variables work
variable_test:
	@echo "=================="
	@echo "project objs"
	@echo $(OF_PROJECT_OBJS)
	@echo "ad-on objs"
	@echo $(OF_PROJECT_ADDONS_OBJS)
	@echo "core libs"
	@echo $(OF_CORE_LIBS)
	@echo "platform"
	@echo $(PLATFORM_LIB_SUBPATH)
	@echo "target name"
	@echo $(TARGET_NAME)
	@echo "ad-ons path"
	@echo $(OF_ADDONS_PATH)
	@echo "ad-on libs"
	@echo $(PROJECT_ADDONS_LIBS) # it might be ok if this is blank
	
	@echo "OF_PROJECT_OBJ_OUTPUT_PATH"
	@echo $(OF_PROJECT_OBJ_OUTPUT_PATH)
	
	@echo "OF_PROJECT_SOURCE_PATHS"
	@echo $(OF_PROJECT_SOURCE_PATHS)
	@echo "PROJECT_EXTERNAL_SOURCE_PATHS"
	@echo $(PROJECT_EXTERNAL_SOURCE_PATHS)
	@echo "ALL_OF_PROJECT_SOURCE_PATHS"
	@echo $(ALL_OF_PROJECT_SOURCE_PATHS)
	@echo "OF_CORE_HEADER_PATHS"
	@echo $(OF_CORE_HEADER_PATHS)
	
	@echo "ALL_OF_CORE_THIRDPARTY_HEADER_PATHS"
	@echo $(ALL_OF_CORE_THIRDPARTY_HEADER_PATHS)
	
	@echo "OF_CORE_THIRDPARTY_HEADER_PATHS"
	@echo $(OF_CORE_THIRDPARTY_HEADER_PATHS)
	
	@echo "compiler settings"
	@echo $(CXX)
	@echo $(CC)
	@echo "=================="


# print all all of the variables that are available in this makefile
.PHONY: printvars
printvars:
	$(foreach v, $(.VARIABLES), $(info $(v) = $($(v))))
# original idea came from this link:
# src: https://www.cmcrossroads.com/article/dumping-every-makefile-variable
# 
# the actual code that solved the problem came from here:
# src: http://stackoverflow.com/questions/7117978/gnu-make-list-the-values-of-all-variables-or-macros-in-a-particular-run



# create static library
static_lib: lib/libOF_ProjectAddons.a
	
lib/libOF_ProjectAddons.a:
	@mkdir -p lib
	ar rcs $@ $(OF_PROJECT_ADDONS_OBJS)

clean_static_lib:
	@rm -f lib/libOF_ProjectAddons.a




