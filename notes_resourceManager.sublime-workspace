{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pause",
				"pause_execution"
			],
			[
				"dynamic",
				"dynamic_load"
			],
			[
				"wrapped",
				"wrapped_object"
			],
			[
				"time",
				"timestamp"
			],
			[
				"dynam",
				"dynamic_load"
			],
			[
				"currn",
				"current_turn"
			],
			[
				"current",
				"current_turn"
			],
			[
				"turn",
				"turn_number"
			],
			[
				"pre",
				"protect_runtime_errors"
			],
			[
				"save",
				"save_directory"
			],
			[
				"mous",
				"mouse_history"
			],
			[
				"on",
				"on_draw"
			],
			[
				"prod",
				"project_dir"
			],
			[
				"Path",
				"Pathname"
			],
			[
				"cext",
				"c_extension_dir"
			],
			[
				"call",
				"callback"
			],
			[
				"Fiber",
				"Fiber"
			],
			[
				"loca",
				"local_subscriptions"
			],
			[
				"image",
				"image_i"
			],
			[
				"zip",
				"zip_pair"
			],
			[
				"chann",
				"channel-name"
			],
			[
				"data",
				"data_path"
			],
			[
				"channel",
				"channel_name"
			],
			[
				"icon_",
				"icon_filepath"
			],
			[
				"outp",
				"output_path"
			],
			[
				"channe",
				"channel_name"
			],
			[
				"OFB",
				"OF_BUILD_VARIABLE_FILE"
			],
			[
				"root",
				"REPO_ROOT"
			],
			[
				"Fil",
				"File\tFile.open(\"..\") { |file| .. }"
			],
			[
				"exten",
				"ofx_extension_name"
			],
			[
				"repo",
				"REPO_ROOT"
			],
			[
				"expand",
				"expand_path"
			],
			[
				"onl",
				"only_so"
			],
			[
				"sketch",
				"sketch_dump"
			],
			[
				"dump",
				"dump_so"
			],
			[
				"cate",
				"category_dir"
			],
			[
				"exp",
				"expand_path"
			],
			[
				"trail",
				"trail_dt"
			],
			[
				"es",
				"exit_status"
			],
			[
				"have_",
				"have_library"
			],
			[
				"gstream",
				"gstreamer"
			],
			[
				"polib",
				"poco_libs_dir"
			],
			[
				"build_",
				"build_tess2"
			],
			[
				"depe",
				"dependencies"
			],
			[
				"ext",
				"extconf"
			],
			[
				"oF",
				"oF_project"
			],
			[
				"clb",
				"c_library"
			],
			[
				"work",
				"work_dir"
			],
			[
				"temp",
				"temp_ext"
			],
			[
				"mk",
				"mySketch"
			],
			[
				"make",
				"Makefile"
			],
			[
				"bu",
				"build"
			],
			[
				"bur",
				"build_library"
			],
			[
				"clib",
				"clean_library"
			],
			[
				"ce",
				"1.coerce"
			],
			[
				"visua",
				"visualizations"
			],
			[
				"test_",
				"test_package"
			],
			[
				"prev",
				"prev_tick"
			],
			[
				"poss",
				"possible_targets"
			],
			[
				"const",
				"constraint_target"
			],
			[
				"rec",
				"resources"
			],
			[
				"Hash",
				"HashWrapper"
			],
			[
				"remo",
				"removal_flag"
			],
			[
				"con",
				"constraint"
			],
			[
				"paramet",
				"parameterization"
			],
			[
				"visu",
				"visualization"
			],
			[
				"vis",
				"visualization"
			],
			[
				"necessary",
				"necessary_pairs"
			],
			[
				"cont",
				"constraint_type"
			],
			[
				"nece",
				"necessary_pairs"
			],
			[
				"entit",
				"entities"
			],
			[
				"inti",
				"initialize"
			],
			[
				"ent",
				"entities"
			],
			[
				"segment",
				"segment_query"
			],
			[
				"compo",
				"components"
			],
			[
				"query",
				"query_data"
			],
			[
				"origi",
				"original_color"
			],
			[
				"active",
				"active_cascade"
			],
			[
				"var",
				"var_name"
			],
			[
				"projec",
				"project_directory"
			],
			[
				"other",
				"other_stuff"
			],
			[
				"unpa",
				"unpack_with_class_name"
			],
			[
				"compon",
				"component"
			],
			[
				"qu",
				"query_components"
			],
			[
				"styl",
				"style_components"
			],
			[
				"names",
				"named_styles"
			],
			[
				"comp",
				"component"
			],
			[
				"full",
				"full_path"
			],
			[
				"sc",
				"style_component"
			],
			[
				"primary",
				"primary_style"
			],
			[
				"casc",
				"cascade_list"
			],
			[
				"enti",
				"entity_id"
			],
			[
				"component",
				"component_data"
			],
			[
				"componen",
				"component"
			],
			[
				"collec",
				"collection"
			],
			[
				"activ",
				"active_list"
			],
			[
				"write",
				"write_data"
			],
			[
				"wri",
				"write_data"
			],
			[
				"par",
				"packed_array"
			],
			[
				"compd",
				"component_data"
			],
			[
				"each_",
				"each_with_index"
			],
			[
				"all",
				"all_style_objects"
			],
			[
				"style",
				"style_component"
			],
			[
				"righc",
				"right_callbacks"
			],
			[
				"lftc",
				"left_callbacks"
			],
			[
				"butt",
				"mouse_button"
			],
			[
				"actt",
				"active_action"
			],
			[
				"ti",
				"text_input"
			],
			[
				"acc",
				"active_action"
			],
			[
				"acti",
				"active_action"
			],
			[
				"button",
				"button_phase"
			],
			[
				"hit",
				"hitbox_color"
			],
			[
				"clone",
				"clone_factory"
			],
			[
				"old",
				"old_text"
			],
			[
				"prot",
				"prototype"
			],
			[
				"regist",
				"register_prototype"
			],
			[
				"inp",
				"text_input"
			],
			[
				"text",
				"text_input"
			],
			[
				"est",
				"estimated_i"
			],
			[
				"first",
				"first_guess"
			],
			[
				"esti",
				"estimated_i"
			],
			[
				"meas",
				"measured_offset"
			],
			[
				"disp",
				"measured_displacement"
			],
			[
				"caret",
				"caret_pos"
			],
			[
				"dir",
				"dirty"
			],
			[
				"no",
				"normalized_anchor"
			],
			[
				"nw",
				"new_height"
			],
			[
				"plac",
				"place_to_look"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lib/rubyOF/resource_manager.rb",
			"settings":
			{
				"buffer_size": 1214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/projects/example/ext/window/app.cpp",
			"settings":
			{
				"buffer_size": 8025,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# interfacing with the resource manager should be done transparently by internal mechanisms that need it, such as loading and serialization\n\nresources = RubyOF::ResourceManager.instance\nfont = resources.load RubyOF::TrueTypeFont, ttf_settings",
			"settings":
			{
				"buffer_size": 242,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"contents": "\ngraphics\ncommand-line out\n\ncode manipulation\nhuman manipulation\n\n\n\nC code\nRuby code\n\nREPL\n\n\n\nSublime text\nTerminal application (whatever terminal you want)\n\n\ncan ask the system \"what type is this\"\n-> other related questions like \"what methods does this have\"\n(the kind of things you might use REPL for)",
			"settings":
			{
				"buffer_size": 303,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/rubyOF/rectangle.rb",
			"settings":
			{
				"buffer_size": 2226,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/rubyOF/true_type_font.rb",
			"settings":
			{
				"buffer_size": 6022,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/projects/youtube/lib/monkey_patches/Chipmunk/Shape/Rect.rb",
			"settings":
			{
				"buffer_size": 14514,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/projects/youtube/lib/monkey_patches/Chipmunk/Shape/Poly.rb",
			"settings":
			{
				"buffer_size": 1641,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/rubyOF/TrueTypeFont.cpp",
			"settings":
			{
				"buffer_size": 6950,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/rubyOF/TrueTypeFont.h",
			"settings":
			{
				"buffer_size": 125,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/rubyOF/color.rb",
			"settings":
			{
				"buffer_size": 243,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/main.rb",
			"settings":
			{
				"buffer_size": 1815,
				"line_ending": "Unix"
			}
		},
		{
			"file": "build/window_guard.rb",
			"settings":
			{
				"buffer_size": 922,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/projects/example/lib/window.rb",
			"settings":
			{
				"buffer_size": 11726,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/rubyOF.rb",
			"settings":
			{
				"buffer_size": 2506,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Unix",
				"name": "---"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/events/ofEvents.h",
			"settings":
			{
				"buffer_size": 14222,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/rubyOF/button_event_codes.rb",
			"settings":
			{
				"buffer_size": 2340,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 2312 files for \"addevent\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/EventTarget.h:\n   52  \n   53  \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   54: \tvoid addEventListener(EventType& event,\n   55  \t\t\t\t\t\t  void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   56  \t\t\t\t\t\t  bool useCapture = false,\n   ..\n   61  \n   62  \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   63: \tvoid addEventListener(EventType& event,\n   64  \t\t\t\t\t\t  void (ListenerClass::*listenerMethod)(ArgumentsType&),\n   65  \t\t\t\t\t\t  bool useCapture = false,\n   ..\n   70  \n   71  \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   72: \tvoid addEventListener(EventType& event,\n   73  \t\t\t\t\t\t  bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   74  \t\t\t\t\t\t  bool useCapture = false,\n   ..\n   79  \n   80  \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   81: \tvoid addEventListener(EventType& event,\n   82  \t\t\t\t\t\t  bool (ListenerClass::*listenerMethod)(ArgumentsType&),\n   83  \t\t\t\t\t\t  bool useCapture = false,\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/AbstractNode.h:\n   66  \n   67  \t// EventTarget\n   68: \tvoid addEventListener(const XMLString& type, EventListener* listener, bool useCapture);\n   69  \tvoid removeEventListener(const XMLString& type, EventListener* listener, bool useCapture);\n   70  \tbool dispatchEvent(Event* evt);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/EventDispatcher.h:\n   48  \t\t/// Destroys the EventDispatcher.\n   49  \t\t\n   50: \tvoid addEventListener(const XMLString& type, EventListener* listener, bool useCapture);\n   51  \t\t/// Adds an EventListener to the internal list.\n   52  \t\t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/EventListener.h:\n   33  \t/// The EventListener interface is the primary method for handling events. Users\n   34  \t/// implement the EventListener interface and register their listener on an\n   35: \t/// EventTarget using the AddEventListener method. The users should also remove\n   36  \t/// their EventListener from its EventTarget after they have completed using\n   37  \t/// the listener.\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/EventTarget.h:\n   40  {\n   41  public:\n   42: \tvirtual void addEventListener(const XMLString& type, EventListener* listener, bool useCapture) = 0;\n   43  \t\t/// This method allows the registration of event listeners on \n   44  \t\t/// the event target. If an EventListener is added to an\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/Net/ParallelSocketAcceptor.h:\n   80  \t{\n   81  \t\tinit();\n   82: \t\t_pReactor->addEventHandler(_socket,\n   83  \t\t\tPoco::Observer<ParallelSocketAcceptor,\n   84  \t\t\tReadableNotification>(*this, &ParallelSocketAcceptor::onAccept));\n   ..\n  128  \n  129  \t\t_pReactor = &reactor;\n  130: \t\t_pReactor->addEventHandler(_socket,\n  131  \t\t\tPoco::Observer<ParallelSocketAcceptor,\n  132  \t\t\tReadableNotification>(*this, &ParallelSocketAcceptor::onAccept));\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/Net/SocketAcceptor.h:\n   82  \t\t/// The SocketAcceptor registers itself with the given SocketReactor.\n   83  \t{\n   84: \t\t_pReactor->addEventHandler(_socket, Poco::Observer<SocketAcceptor,\n   85  \t\t\tReadableNotification>(*this, &SocketAcceptor::onAccept));\n   86  \t}\n   ..\n  129  \n  130  \t\t_pReactor = &reactor;\n  131: \t\t_pReactor->addEventHandler(_socket, Poco::Observer<SocketAcceptor, ReadableNotification>(*this, &SocketAcceptor::onAccept));\n  132  \t}\n  133  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/Net/SocketConnector.h:\n  110  \t{\n  111  \t\t_pReactor = &reactor;\n  112: \t\t_pReactor->addEventHandler(_socket, Poco::Observer<SocketConnector, ReadableNotification>(*this, &SocketConnector::onReadable));\n  113: \t\t_pReactor->addEventHandler(_socket, Poco::Observer<SocketConnector, WritableNotification>(*this, &SocketConnector::onWritable));\n  114: \t\t_pReactor->addEventHandler(_socket, Poco::Observer<SocketConnector, ErrorNotification>(*this, &SocketConnector::onError));\n  115  \t}\n  116  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/Net/SocketReactor.h:\n   59  \t/// Event handlers (any class can be an event handler - there\n   60  \t/// is no base class for event handlers) can be registered\n   61: \t/// with the addEventHandler() method and deregistered with\n   62  \t/// the removeEventHandler() method.\n   63  \t/// \n   64  \t/// An event handler is always registered for a certain socket,\n   65: \t/// which is given in the call to addEventHandler(). Any method\n   66  \t/// of the event handler class can be registered to handle the\n   67  \t/// event - the only requirement is that the method takes\n   ..\n  107  \t/// they work on different sockets.\n  108  \t///\n  109: \t/// It is safe to call addEventHandler() and removeEventHandler()\n  110  \t/// from another thread while the SocketReactor is running. Also,\n  111: \t/// it is safe to call addEventHandler() and removeEventHandler()\n  112  \t/// from event handlers.\n  113  {\n  ...\n  149  \t\t/// Returns the timeout.\n  150  \n  151: \tvoid addEventHandler(const Socket& socket, const Poco::AbstractObserver& observer);\n  152  \t\t/// Registers an event handler with the SocketReactor.\n  153  \t\t///\n  154  \t\t/// Usage:\n  155  \t\t///     Poco::Observer<MyEventHandler, SocketNotification> obs(*this, &MyEventHandler::handleMyEvent);\n  156: \t\t///     reactor.addEventHandler(obs);\n  157  \n  158  \tbool hasEventHandler(const Socket& socket, const Poco::AbstractObserver& observer);\n\n21 matches across 9 files\n\n\nSearching 2312 files for \"ofAddListener\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAccelerometer/src/ofxAccelerometer.h:\n  188  template<class T>\n  189  void ofxRegisterAccelEvents(T * listener){\n  190: \tofAddListener(ofxAccelerometer.accelChanged,listener,&T::accelerationChanged);\n  191  }\n  192  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAndroid/src/ofxAndroidSoundStream.cpp:\n   32  \theadphonesConnected = false;\n   33  \n   34: \tofAddListener(ofxAndroidEvents().pause,this,&ofxAndroidSoundStream::pause);\n   35: \tofAddListener(ofxAndroidEvents().resume,this,&ofxAndroidSoundStream::resume);\n   36  }\n   37  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAndroid/src/ofxAndroidVideoGrabber.cpp:\n   97  \tjfloatArray localMatrixJava = ofGetJNIEnv()->NewFloatArray(16);\n   98  \tmatrixJava = (jfloatArray) ofGetJNIEnv()->NewGlobalRef(localMatrixJava);\n   99: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofxAndroidVideoGrabber::Data::onAppPause);\n  100: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofxAndroidVideoGrabber::Data::onAppResume);\n  101  }\n  102  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAndroid/src/ofxAndroidVideoPlayer.cpp:\n   85  \tmatrixJava = (jfloatArray) env->NewGlobalRef(localMatrixJava);\n   86  \n   87: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofxAndroidVideoPlayer::unloadTexture);\n   88: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofxAndroidVideoPlayer::reloadTexture);\n   89  \n   90  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxColorPicker/src/ofxColorPicker.cpp:\n   59      }\n   60      \n   61:     ofAddListener(ofEvents().update, this, &ofxColorPicker::update);\n   62:     ofAddListener(ofEvents().draw, this, &ofxColorPicker::draw);\n   63:     ofAddListener(ofEvents().exit, this, &ofxColorPicker::exit);\n   64      \n   65      bAddedListeners = true;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/ofxDatGui.cpp:\n   75      mActiveGui = this;\n   76      mGuis.push_back(this);\n   77:     ofAddListener(ofEvents().windowResized, this, &ofxDatGui::onWindowResized, OF_EVENT_ORDER_BEFORE_APP);\n   78  }\n   79  \n   ..\n  191      if (mAutoDraw){\n  192          mIndex = priority;\n  193:         ofAddListener(ofEvents().draw, this, &ofxDatGui::onDraw, OF_EVENT_ORDER_AFTER_APP + mIndex);\n  194:         ofAddListener(ofEvents().update, this, &ofxDatGui::onUpdate, OF_EVENT_ORDER_BEFORE_APP - mIndex);\n  195      }\n  196  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGui2dPad.h:\n   35              setTheme(ofxDatGuiComponent::getTheme());\n   36              setBounds(ofRectangle(0, 0, ofGetWidth(), ofGetHeight()), true);\n   37:             ofAddListener(ofEvents().windowResized, this, &ofxDatGui2dPad::onWindowResized);\n   38          }\n   39      \n   ..\n   45              setTheme(ofxDatGuiComponent::getTheme());\n   46              setBounds(bounds, false);\n   47:             ofAddListener(ofEvents().windowResized, this, &ofxDatGui2dPad::onWindowResized);\n   48          }\n   49      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGuiScrollView.h:\n   55              mNumVisible = nVisible;\n   56              setTheme(ofxDatGuiComponent::getTheme());\n   57:             ofAddListener(ofEvents().mouseScrolled, this, &ofxDatGuiScrollView::onMouseScrolled, OF_EVENT_ORDER_BEFORE_APP);\n   58          }\n   59      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/core/ofxDatGuiComponent.cpp:\n  218      mAnchor = anchor;\n  219      if (mAnchor != ofxDatGuiAnchor::NO_ANCHOR){\n  220:         ofAddListener(ofEvents().windowResized, this, &ofxDatGuiComponent::onWindowResized);\n  221      }   else{\n  222          ofRemoveListener(ofEvents().windowResized, this, &ofxDatGuiComponent::onWindowResized);\n  ...\n  467  {\n  468      mFocused = true;\n  469:     ofAddListener(ofEvents().keyPressed, this, &ofxDatGuiComponent::onKeyPressed);\n  470  }\n  471  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/ofxGuiElement.cpp:\n  162  \t\t\tthemeFilename = filename;\n  163  \t\t\tthemeUpdated = std::filesystem::last_write_time(ofToDataPath(themeFilename));\n  164: \t\t\tofAddListener(ofEvents().update, this, &ofxGuiElement::watchTheme);\n  165  \t\t}\n  166  \t}else{\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiContainer.cpp:\n   75  \texclusiveToggles.set(\"exclusive toggles\", false);\n   76  \n   77: \tofAddListener(resize, this, &ofxGuiContainer::onResize);\n   78: \tofAddListener(childAdded, this, &ofxGuiContainer::onChildAdded);\n   79: \tofAddListener(addedTo, this, &ofxGuiContainer::onParentAdded);\n   80  \n   81  \tsetTheme();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiMenu.cpp:\n  126  \tclear();\n  127  \n  128: \tofAddListener(addedTo, this, &ofxGuiMenu::onAdded);\n  129  \n  130  \tsetHidden(true);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiPanel.cpp:\n  204  \tsetTheme();\n  205  \n  206: \tofAddListener(header->move, this, &ofxGuiPanel::onHeaderMove);\n  207: \tofAddListener(((ofxGuiPanelHeader*)header)->loadPressedE, this, &ofxGuiPanel::onLoadPressed);\n  208: \tofAddListener(((ofxGuiPanelHeader*)header)->savePressedE, this, &ofxGuiPanel::onSavePressed);\n  209  \n  210  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/containers/ofxGuiTabs.cpp:\n   51  \tclear();\n   52  \n   53: \tofAddListener(childAdded, this, &ofxGuiTabs::onChildAdd);\n   54  \n   55  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiFpsPlotter.cpp:\n   36  \t}\n   37  \tsetDecimalPlace(0);\n   38: \tofAddListener(ofEvents().update,this,&ofxGuiFpsPlotter::update);\n   39  }\n   40  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiGraphics.cpp:\n   45  \t}\n   46  \tsetTheme();\n   47: \tofAddListener(resize, this, &ofxGuiGraphics::onResize);\n   48  }\n   49  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiSlider.cpp:\n   59  \tsetTheme();\n   60  \n   61: \tofAddListener(resize, this, &ofxGuiSlider<DataType>::resized);\n   62  \tregisterMouseEvents();\n   63  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiZoomableGraphics.cpp:\n   28  \tzoom_speed = 0.1;\n   29  \tdragging_dst = false;\n   30: \tofAddListener(resize, this, &ofxGuiZoomableGraphics::onResize);\n   31  }\n   32  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/Document.cpp:\n   35  \tElement(\"document\", 0, 0, 1024, 768)\n   36  {\n   37: \tofAddListener(ofEvents().setup, this, &Document::setup);\n   38: \tofAddListener(ofEvents().update, this, &Document::update);\n   39: \tofAddListener(ofEvents().draw, this, &Document::draw, OF_EVENT_ORDER_AFTER_APP);\n   40: \tofAddListener(ofEvents().exit, this, &Document::exit);\n   41: \tofAddListener(ofEvents().windowResized, this, &Document::windowResized, std::numeric_limits<int>::lowest());\n   42  \n   43: \tofAddListener(ofEvents().fileDragEvent, this, &Document::fileDragEvent, std::numeric_limits<int>::lowest());\n   44  \n   45: \tofAddListener(ofEvents().keyPressed, this, &Document::onKeyEvent, std::numeric_limits<int>::lowest());\n   46: \tofAddListener(ofEvents().keyReleased, this, &Document::onKeyEvent, std::numeric_limits<int>::lowest());\n   47  }\n   48  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/Element.cpp:\n   54  \t_visible.set(\"visible\", true);\n   55  \t_visible.addListener(this, &Element::setVisible);\n   56: \tofAddListener(this->move, this, &Element::_onMoved);\n   57: \tofAddListener(this->resize, this, &Element::_onResized);\n   58  }\n   59  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/Element.h:\n  699  \n  700  \t\t// Attach child listeners.\n  701: \t\tofAddListener(pNode->move, this, &Element::_onChildMoved);\n  702: \t\tofAddListener(pNode->resize, this, &Element::_onChildResized);\n  703  \n  704  \t\t/// Alert the node's siblings that they have a new sibling.\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/EventTarget.h:\n   57  \t\t\t\t\t\t  int priority = OF_EVENT_ORDER_AFTER_APP)\n   58  \t{\n   59: \t\tofAddListener(event.event(useCapture), dynamic_cast<ListenerClass*>(this), listenerMethod, priority);\n   60  \t}\n   61  \n   ..\n   66  \t\t\t\t\t\t  int priority = OF_EVENT_ORDER_AFTER_APP)\n   67  \t{\n   68: \t\tofAddListener(event.event(useCapture), dynamic_cast<ListenerClass*>(this), listenerMethod, priority);\n   69  \t}\n   70  \n   ..\n   75  \t\t\t\t\t\t  int priority = OF_EVENT_ORDER_AFTER_APP)\n   76  \t{\n   77: \t\tofAddListener(event.event(useCapture), dynamic_cast<ListenerClass*>(this), listenerMethod, priority);\n   78  \t}\n   79  \n   ..\n   84  \t\t\t\t\t\t  int priority = OF_EVENT_ORDER_AFTER_APP)\n   85  \t{\n   86: \t\tofAddListener(event.event(useCapture), dynamic_cast<ListenerClass*>(this), listenerMethod, priority);\n   87  \t}\n   88  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/testLayout/src/ofApp.cpp:\n    6  \tofSetFrameRate(120);\n    7  \n    8: \tofAddListener(ofEvents().draw, this, &ofApp::drawMousePosition, OF_EVENT_ORDER_AFTER_APP+1);\n    9  \n   10  \ttestBool.set(\"bool\", true);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineGLFW.cpp:\n   58  \n   59  \t\t// Override listeners\n   60: \t\tofAddListener(ofEvents().mousePressed, this, &EngineGLFW::onMousePressed);\n   61: \t\tofAddListener(ofEvents().mouseReleased, this, &EngineGLFW::onMouseReleased);\n   62: \t\tofAddListener(ofEvents().keyReleased, this, &EngineGLFW::onKeyReleased);\n   63: \t\tofAddListener(ofEvents().keyPressed, this, &EngineGLFW::onKeyPressed);\n   64  \n   65  \t\t// BaseEngine listeners\n   66: \t\tofAddListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   67: \t\tofAddListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   68: \t\tofAddListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   69  \n   70  \t\tisSetup = true;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineOpenGLES.cpp:\n   42  \n   43  \t\t// Override listeners\n   44: \t\tofAddListener(ofEvents().keyReleased, this, &EngineOpenGLES::onKeyReleased);\n   45  \n   46  \t\t// BaseEngine listeners\n   47: \t\tofAddListener(ofEvents().keyPressed, (BaseEngine*)this, &BaseEngine::onKeyPressed);\n   48: \t\tofAddListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   49: \t\tofAddListener(ofEvents().mousePressed, (BaseEngine*)this, &BaseEngine::onMousePressed);\n   50: \t\tofAddListener(ofEvents().mouseReleased, (BaseEngine*)this, &BaseEngine::onMouseReleased);\n   51: \t\tofAddListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   52: \t\tofAddListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   53  \n   54  \t\tisSetup = true;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineVk.cpp:\n   73  \n   74  \t\t// Override listeners\n   75: \t\tofAddListener(ofEvents().mousePressed, this, &EngineVk::onMousePressed);\n   76: \t\tofAddListener(ofEvents().keyReleased, this, &EngineVk::onKeyReleased);\n   77: \t\tofAddListener(ofEvents().keyPressed, this, &EngineVk::onKeyPressed);\n   78  \n   79  \t\t// BaseEngine listeners\n   80: \t\tofAddListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   81: \t\tofAddListener(ofEvents().mouseReleased, (BaseEngine*)this, &BaseEngine::onMouseReleased);\n   82: \t\tofAddListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   83: \t\tofAddListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   84  \n   85  \t\tisSetup = true;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxInfiniteCanvas/src/ofxInfiniteCanvas.cpp:\n  240      if(bMouseInputEnabled != e ){\n  241          if(e){\n  242:             ofAddListener(ofEvents().update, this, &ofxInfiniteCanvas::update, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  243          }else{\n  244              ofRemoveListener(ofEvents().update, this, &ofxInfiniteCanvas::update, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  ...\n  257      if (bMouseListenersEnabled != e) {\n  258          if (e) {\n  259:             ofAddListener(ofEvents().mouseDragged , this, &ofxInfiniteCanvas::mouseDragged, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  260:             ofAddListener(ofEvents().mousePressed, this, &ofxInfiniteCanvas::mousePressed, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  261:             ofAddListener(ofEvents().mouseReleased, this, &ofxInfiniteCanvas::mouseReleased, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  262:             ofAddListener(ofEvents().mouseScrolled, this, &ofxInfiniteCanvas::mouseScrolled, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  263          }else{\n  264              ofRemoveListener(ofEvents().mouseDragged, this, &ofxInfiniteCanvas::mouseDragged, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxiOS/src/utils/ofxiOSEventAdapter.h:\n   42      m_ofEvent(ofEvent)\n   43      {\n   44:         ofAddListener(m_ofEvent, this, &ofEventAdapter<ArgumentsType>::eventCallback);\n   45      }\n   46      \n   ..\n   66  \n   67  template <typename ArgumentsType>\n   68: void ofAddListener(ofEvent<ArgumentsType>& ofEvent, id targetInstance, SEL targetSelector){\n   69      Targets targets = getTargets(&ofEvent);\n   70      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxOsc/src/ofxOscParameterSync.cpp:\n   15  void ofxOscParameterSync::setup(ofParameterGroup &group, int localPort, const std::string &host, int remotePort){\n   16  \tsyncGroup = group;\n   17: \tofAddListener(syncGroup.parameterChangedE(), this, &ofxOscParameterSync::parameterChanged);\n   18  \tsender.setup(host, remotePort);\n   19  \treceiver.setup(localPort);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxThreadedImageLoader/src/ofxThreadedImageLoader.cpp:\n    3  ofxThreadedImageLoader::ofxThreadedImageLoader(){\n    4  \tnextID = 0;\n    5:     ofAddListener(ofEvents().update, this, &ofxThreadedImageLoader::update);\n    6: \tofAddListener(ofURLResponseEvent(),this,&ofxThreadedImageLoader::urlResponse);\n    7      \n    8      startThread();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/communication/firmataExample/src/ofApp.cpp:\n   49  \t// the arduino is ready to receive commands and it is safe to\n   50  \t// call setupArduino()\n   51: \tofAddListener(ard.EInitialized, this, &ofApp::setupArduino);\n   52  \tbSetupArduino\t= false;\t// flag so we setup arduino when its ready, you don't need to touch this :)\n   53  }\n   ..\n   98  \t\n   99      // Listen for changes on the digital and analog pins\n  100:     ofAddListener(ard.EDigitalPinChanged, this, &ofApp::digitalPinChanged);\n  101:     ofAddListener(ard.EAnalogPinChanged, this, &ofApp::analogPinChanged);    \n  102  }\n  103  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/advancedEventsExample/src/eventsObject.h:\n   19  \n   20  \tvoid enable(){\n   21: \t    ofAddListener(ofEvents().update, this, &eventsObject::update);\n   22  \t}\n   23  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/advancedEventsExample/src/ofApp.cpp:\n    8  \n    9  \t// add the newFloat method to listen for eventsAddon newFloatEvent\n   10: \tofAddListener(evObject.newFloatEvent,this,&ofApp::newFloat);\n   11  \n   12  \t// add the newInt method to listen for eventsAddon newIntEvent\n   13: \tofAddListener(evObject.newIntEvent,this,&ofApp::newInt);\n   14  }\n   15  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/customEventExample/src/ofApp.cpp:\n   10   Topics:\n   11   ofEventArgs\n   12:  ofAddListener\n   13   ofRemove\n   14   vector math\n   ..\n   63  \n   64      // listen to any of the events for the game\n   65:     ofAddListener(GameEvent::events, this, &ofApp::gameEvent);\n   66  \n   67  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/simpleEventsExample/src/ofApp.cpp:\n   16      //------------registering (adding) listeners ----------\n   17      \n   18:     ofAddListener(redCircle.clickedInside, //the ofEvent that we want to listen to. In this case exclusively to the circleEvent of redCircle (red circle) object.\n   19                    this, //pointer to the class that is going to be listening. it can be a pointer to any object. There's no need to declare the listeners within the class that's going to listen.\n   20                    &ofApp::onMouseInCircle);//pointer to the method that's going to be called when a new event is broadcasted (callback method). The parameters of the event are passed to this method.\n   21:     ofAddListener(Circle::clickedInsideGlobal , this, &ofApp::onMouseInAnyCircle);//listening to this event will enable us to get events from any instance of the circle class as this event is static (shared by all instances of the same class).\n   22      \n   23      //Notice that when calling the static event we are using :: while when calling the instance event we use a . (dot).\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dExample/src/ofxSimpleSlider.cpp:\n   38  \t\n   39  \tif(!bWasSetup){\n   40: \t\tofAddListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   41: \t\tofAddListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   42: \t\tofAddListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   43: \t\tofAddListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   44: \t\tofAddListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   45  \t\tbWasSetup = true;\n   46  \t}\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofxSimpleSlider.cpp:\n   38  \t\n   39  \tif(!bWasSetup){\n   40: \t\tofAddListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   41: \t\tofAddListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   42: \t\tofAddListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   43: \t\tofAddListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   44: \t\tofAddListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   45  \t\tbWasSetup = true;\n   46  \t}\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/periodicSignalsExample/src/ofxSimpleSlider.cpp:\n   38  \t\n   39  \tif(!bWasSetup){\n   40: \t\tofAddListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   41: \t\tofAddListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   42: \t\tofAddListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   43: \t\tofAddListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   44: \t\tofAddListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   45  \t\tbWasSetup = true;\n   46  \t}\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/windowing/multiWindowOneAppExample/src/main.cpp:\n   21  \tshared_ptr<ofApp> mainApp(new ofApp);\n   22  \tmainApp->setupGui();\n   23: \tofAddListener(guiWindow->events().draw,mainApp.get(),&ofApp::drawGui);\n   24  \n   25  \tofRunApp(mainWindow, mainApp);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofMainLoop.cpp:\n   70  \twindowsApps[window] = app;\n   71  \tif(app){\n   72: \t\tofAddListener(window->events().setup,app.get(),&ofBaseApp::setup,OF_EVENT_ORDER_APP);\n   73: \t\tofAddListener(window->events().update,app.get(),&ofBaseApp::update,OF_EVENT_ORDER_APP);\n   74: \t\tofAddListener(window->events().draw,app.get(),&ofBaseApp::draw,OF_EVENT_ORDER_APP);\n   75: \t\tofAddListener(window->events().exit,app.get(),&ofBaseApp::exit,OF_EVENT_ORDER_APP);\n   76: \t\tofAddListener(window->events().keyPressed,app.get(),&ofBaseApp::keyPressed,OF_EVENT_ORDER_APP);\n   77: \t\tofAddListener(window->events().keyReleased,app.get(),&ofBaseApp::keyReleased,OF_EVENT_ORDER_APP);\n   78: \t\tofAddListener(window->events().mouseMoved,app.get(),&ofBaseApp::mouseMoved,OF_EVENT_ORDER_APP);\n   79: \t\tofAddListener(window->events().mouseDragged,app.get(),&ofBaseApp::mouseDragged,OF_EVENT_ORDER_APP);\n   80: \t\tofAddListener(window->events().mousePressed,app.get(),&ofBaseApp::mousePressed,OF_EVENT_ORDER_APP);\n   81: \t\tofAddListener(window->events().mouseReleased,app.get(),&ofBaseApp::mouseReleased,OF_EVENT_ORDER_APP);\n   82: \t\tofAddListener(window->events().mouseScrolled,app.get(),&ofBaseApp::mouseScrolled,OF_EVENT_ORDER_APP);\n   83: \t\tofAddListener(window->events().mouseEntered,app.get(),&ofBaseApp::mouseEntered,OF_EVENT_ORDER_APP);\n   84: \t\tofAddListener(window->events().mouseExited,app.get(),&ofBaseApp::mouseExited,OF_EVENT_ORDER_APP);\n   85: \t\tofAddListener(window->events().windowResized,app.get(),&ofBaseApp::windowResized,OF_EVENT_ORDER_APP);\n   86: \t\tofAddListener(window->events().messageEvent,app.get(),&ofBaseApp::messageReceived,OF_EVENT_ORDER_APP);\n   87: \t\tofAddListener(window->events().fileDragEvent,app.get(),&ofBaseApp::dragged,OF_EVENT_ORDER_APP);\n   88: \t\tofAddListener(window->events().touchCancelled,app.get(),&ofBaseApp::touchCancelled,OF_EVENT_ORDER_APP);\n   89: \t\tofAddListener(window->events().touchDoubleTap,app.get(),&ofBaseApp::touchDoubleTap,OF_EVENT_ORDER_APP);\n   90: \t\tofAddListener(window->events().touchDown,app.get(),&ofBaseApp::touchDown,OF_EVENT_ORDER_APP);\n   91: \t\tofAddListener(window->events().touchMoved,app.get(),&ofBaseApp::touchMoved,OF_EVENT_ORDER_APP);\n   92: \t\tofAddListener(window->events().touchUp,app.get(),&ofBaseApp::touchUp,OF_EVENT_ORDER_APP);\n   93  #ifdef TARGET_ANDROID\n   94  \t\tauto androidApp = dynamic_cast<ofxAndroidApp*>(app.get());\n   95  \t\tif(androidApp){\n   96: \t\t\tofAddListener(ofxAndroidEvents().okPressed,androidApp,&ofxAndroidApp::okPressed,OF_EVENT_ORDER_APP);\n   97: \t\t\tofAddListener(ofxAndroidEvents().cancelPressed,androidApp,&ofxAndroidApp::cancelPressed,OF_EVENT_ORDER_APP);\n   98: \t\t\tofAddListener(ofxAndroidEvents().backPressed,androidApp,&ofxAndroidApp::backPressed,OF_EVENT_ORDER_APP);\n   99: \t\t\tofAddListener(ofxAndroidEvents().networkConnected,androidApp,&ofxAndroidApp::networkConnectedEvent,OF_EVENT_ORDER_APP);\n  100: \t\t\tofAddListener(ofxAndroidEvents().pause,androidApp,&ofxAndroidApp::pause,OF_EVENT_ORDER_APP);\n  101: \t\t\tofAddListener(ofxAndroidEvents().resume,androidApp,&ofxAndroidApp::resume,OF_EVENT_ORDER_APP);\n  102: \t\t\tofAddListener(ofxAndroidEvents().unloadGL,androidApp,&ofxAndroidApp::unloadGL,OF_EVENT_ORDER_APP);\n  103: \t\t\tofAddListener(ofxAndroidEvents().reloadGL,androidApp,&ofxAndroidApp::reloadGL,OF_EVENT_ORDER_APP);\n  104: \t\t\tofAddListener(ofxAndroidEvents().swipe,androidApp,&ofxAndroidApp::swipe,OF_EVENT_ORDER_APP);\n  105: \t\t\tofAddListener(ofxAndroidEvents().deviceOrientationChanged,androidApp,&ofxAndroidApp::deviceOrientationChangedEvent,OF_EVENT_ORDER_APP);\n  106  \t\t}\n  107  #endif\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofMainLoop.h:\n   29  \t\twindowsApps[window] = std::shared_ptr<ofBaseApp>();\n   30  \t\tcurrentWindow = window;\n   31: \t\tofAddListener(window->events().keyPressed,this,&ofMainLoop::keyPressed);\n   32  \t}\n   33  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEvents.h:\n  436  template<class ListenerClass>\n  437  void ofRegisterMouseEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  438: \tofAddListener(ofEvents().mouseDragged,listener,&ListenerClass::mouseDragged,prio);\n  439: \tofAddListener(ofEvents().mouseMoved,listener,&ListenerClass::mouseMoved,prio);\n  440: \tofAddListener(ofEvents().mousePressed,listener,&ListenerClass::mousePressed,prio);\n  441: \tofAddListener(ofEvents().mouseReleased,listener,&ListenerClass::mouseReleased,prio);\n  442: \tofAddListener(ofEvents().mouseScrolled,listener,&ListenerClass::mouseScrolled,prio);\n  443: \tofAddListener(ofEvents().mouseEntered,listener,&ListenerClass::mouseEntered,prio);\n  444: \tofAddListener(ofEvents().mouseExited,listener,&ListenerClass::mouseExited,prio);\n  445  }\n  446  \n  447  template<class ListenerClass>\n  448  void ofRegisterKeyEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  449: \tofAddListener(ofEvents().keyPressed, listener, &ListenerClass::keyPressed,prio);\n  450: \tofAddListener(ofEvents().keyReleased, listener, &ListenerClass::keyReleased,prio);\n  451  }\n  452  \n  453  template<class ListenerClass>\n  454  void ofRegisterTouchEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  455: \tofAddListener(ofEvents().touchDoubleTap, listener, &ListenerClass::touchDoubleTap,prio);\n  456: \tofAddListener(ofEvents().touchDown, listener, &ListenerClass::touchDown,prio);\n  457: \tofAddListener(ofEvents().touchMoved, listener, &ListenerClass::touchMoved,prio);\n  458: \tofAddListener(ofEvents().touchUp, listener, &ListenerClass::touchUp,prio);\n  459: \tofAddListener(ofEvents().touchCancelled, listener, &ListenerClass::touchCancelled,prio);\n  460  }\n  461  \n  462  template<class ListenerClass>\n  463  void ofRegisterGetMessages(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  464: \tofAddListener(ofEvents().messageEvent, listener, &ListenerClass::gotMessage,prio);\n  465  }\n  466  \n  467  template<class ListenerClass>\n  468  void ofRegisterDragEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  469: \tofAddListener(ofEvents().fileDragEvent, listener, &ListenerClass::dragEvent,prio);\n  470  }\n  471  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEventUtils.h:\n   15  ///     void method(const void * sender, ArgumentsType &args)\n   16  /// ie:\n   17: ///     ofAddListener(addon.newIntEvent, this, &Class::method)\n   18  \n   19  template <class EventType,typename ArgumentsType, class ListenerClass>\n   20: void ofAddListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   21      event.remove(listener, listenerMethod, prio);\n   22      event.add(listener, listenerMethod, prio);\n   ..\n   24  \n   25  template <class EventType,typename ArgumentsType, class ListenerClass>\n   26: void ofAddListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   27      event.remove(listener, listenerMethod, prio);\n   28      event.add(listener, listenerMethod, prio);\n   ..\n   30  \n   31  template <class ListenerClass>\n   32: void ofAddListener(ofEvent<void> & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(const void*), int prio=OF_EVENT_ORDER_AFTER_APP){\n   33      event.remove(listener, listenerMethod, prio);\n   34      event.add(listener, listenerMethod, prio);\n   ..\n   36  \n   37  template <class ListenerClass>\n   38: void ofAddListener(ofEvent<void> & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(), int prio=OF_EVENT_ORDER_AFTER_APP){\n   39      event.remove(listener, listenerMethod, prio);\n   40      event.add(listener, listenerMethod, prio);\n   ..\n   42  \n   43  template <class EventType,typename ArgumentsType, class ListenerClass>\n   44: void ofAddListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   45      event.remove(listener, listenerMethod, prio);\n   46      event.add(listener, listenerMethod, prio);\n   ..\n   48  \n   49  template <class EventType,typename ArgumentsType, class ListenerClass>\n   50: void ofAddListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   51      event.remove(listener, listenerMethod, prio);\n   52      event.add(listener, listenerMethod, prio);\n   ..\n   54  \n   55  template <class ListenerClass>\n   56: void ofAddListener(ofEvent<void> & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(const void*), int prio=OF_EVENT_ORDER_AFTER_APP){\n   57      event.remove(listener, listenerMethod, prio);\n   58      event.add(listener, listenerMethod, prio);\n   ..\n   60  \n   61  template <class ListenerClass>\n   62: void ofAddListener(ofEvent<void> & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(), int prio=OF_EVENT_ORDER_AFTER_APP){\n   63      event.remove(listener, listenerMethod, prio);\n   64      event.add(listener, listenerMethod, prio);\n   ..\n   66  \n   67  template <class EventType,typename ArgumentsType>\n   68: void ofAddListener(EventType & event, void (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   69      event.remove(listenerFunction, prio);\n   70      event.add(listenerFunction, prio);\n   ..\n   72  \n   73  template <class EventType,typename ArgumentsType>\n   74: void ofAddListener(EventType & event, void (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   75      event.remove(listenerFunction, prio);\n   76      event.add(listenerFunction, prio);\n   77  }\n   78  \n   79: inline void ofAddListener(ofEvent<void> & event, void (*listenerFunction)(const void*), int prio=OF_EVENT_ORDER_AFTER_APP){\n   80      event.remove(listenerFunction, prio);\n   81      event.add(listenerFunction, prio);\n   82  }\n   83  \n   84: inline void ofAddListener(ofEvent<void> & event, void (*listenerFunction)(), int prio=OF_EVENT_ORDER_AFTER_APP){\n   85      event.remove(listenerFunction, prio);\n   86      event.add(listenerFunction, prio);\n   ..\n   88  \n   89  template <class EventType,typename ArgumentsType>\n   90: void ofAddListener(EventType & event, bool (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   91      event.remove(listenerFunction, prio);\n   92      event.add(listenerFunction, prio);\n   ..\n   94  \n   95  template <class EventType,typename ArgumentsType>\n   96: void ofAddListener(EventType & event, bool (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   97      event.remove(*listenerFunction, prio);\n   98      event.add(*listenerFunction, prio);\n   99  }\n  100  \n  101: inline void ofAddListener(ofEvent<void> & event, bool (*listenerFunction)(const void*), int prio=OF_EVENT_ORDER_AFTER_APP){\n  102      event.remove(*listenerFunction, prio);\n  103      event.add(*listenerFunction, prio);\n  104  }\n  105  \n  106: inline void ofAddListener(ofEvent<void> & event, bool (*listenerFunction)(), int prio=OF_EVENT_ORDER_AFTER_APP){\n  107      event.remove(listenerFunction, prio);\n  108      event.add(listenerFunction, prio);\n  ...\n  116  ///     void method(const void * sender, ArgumentsType &args)\n  117  /// ie:\n  118: ///     ofAddListener(addon.newIntEvent, this, &Class::method)\n  119  \n  120  template <class EventType,typename ArgumentsType, class ListenerClass>\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofFbo.cpp:\n  297      if(fbo!=0){\n  298      #ifdef TARGET_ANDROID\n  299:         ofAddListener(ofxAndroidEvents().reloadGL,this,&ofFbo::reloadFbo);\n  300      #endif\n  301      }\n  ...\n  334      if(fbo!=0){\n  335      #ifdef TARGET_ANDROID\n  336:         ofAddListener(ofxAndroidEvents().reloadGL,this,&ofFbo::reloadFbo);\n  337      #endif\n  338      }\n  ...\n  355      if(fbo!=0){\n  356      #ifdef TARGET_ANDROID\n  357:         ofAddListener(ofxAndroidEvents().reloadGL,this,&ofFbo::reloadFbo);\n  358      #endif\n  359      }\n  ...\n  386      if(fbo!=0){\n  387      #ifdef TARGET_ANDROID\n  388:         ofAddListener(ofxAndroidEvents().reloadGL,this,&ofFbo::reloadFbo);\n  389      #endif\n  390      }\n  ...\n  710      */\n  711  #ifdef TARGET_ANDROID\n  712: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofFbo::reloadFbo);\n  713  #endif\n  714  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofShader.cpp:\n  128  \t\t}\n  129  #ifdef TARGET_ANDROID\n  130: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofShader::unloadGL);\n  131  #endif\n  132  \t}\n  ...\n  153  \t\t}\n  154  #ifdef TARGET_ANDROID\n  155: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofShader::unloadGL);\n  156  #endif\n  157  \t}\n  ...\n  167  \tif(mom.bLoaded){\n  168  #ifdef TARGET_ANDROID\n  169: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofShader::unloadGL);\n  170  #endif\n  171  \t}\n  ...\n  187  \tif(mom.bLoaded){\n  188  #ifdef TARGET_ANDROID\n  189: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofShader::unloadGL);\n  190  #endif\n  191  \t}\n  ...\n  717  \n  718  #ifdef TARGET_ANDROID\n  719: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofShader::unloadGL);\n  720  #endif\n  721  \n  ...\n  743  \t}\n  744  \tbLoaded = false;\n  745: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofShader::reloadGL);\n  746  }\n  747  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/gl/ofVboMesh.cpp:\n  121  \tif(!vbo.getIsAllocated()){\n  122  \t\t#ifdef TARGET_ANDROID\n  123: \t\t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofVboMesh::unloadVbo);\n  124  \t\t#endif\n  125  \t\tif(getNumVertices()){\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofBitmapFont.cpp:\n  454  ofBitmapFont::ofBitmapFont(){\n  455  #ifdef TARGET_ANDROID\n  456: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofBitmapFont::unloadTexture);\n  457  #endif\n  458  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofImage.cpp:\n  617  \n  618  \t#if defined(TARGET_ANDROID)\n  619: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofImage_<PixelType>::unloadTexture);\n  620: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofImage_<PixelType>::update);\n  621  \t#endif\n  622  \treturn *this;\n  ...\n  630  \n  631  \t#if defined(TARGET_ANDROID)\n  632: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofImage_<PixelType>::unloadTexture);\n  633: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofImage_<PixelType>::update);\n  634  \t#endif\n  635  }\n  ...\n  650  \n  651      #if defined(TARGET_ANDROID)\n  652:     ofAddListener(ofxAndroidEvents().unloadGL,this,&ofImage_<PixelType>::unloadTexture);\n  653:     ofAddListener(ofxAndroidEvents().reloadGL,this,&ofImage_<PixelType>::update);\n  654      #endif\n  655  }\n  ...\n  672  \n  673      #if defined(TARGET_ANDROID)\n  674:     ofAddListener(ofxAndroidEvents().unloadGL,this,&ofImage_<PixelType>::unloadTexture);\n  675:     ofAddListener(ofxAndroidEvents().reloadGL,this,&ofImage_<PixelType>::update);\n  676      #endif\n  677  \n  ...\n  695  bool ofImage_<PixelType>::load(const std::filesystem::path& fileName, const ofImageLoadSettings &settings){\n  696  \t#if defined(TARGET_ANDROID)\n  697: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofImage_<PixelType>::unloadTexture);\n  698: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofImage_<PixelType>::update);\n  699  \t#endif\n  700  \tbool bLoadedOk = ofLoadImage(pixels, fileName, settings);\n  ...\n  718  bool ofImage_<PixelType>::load(const ofBuffer & buffer, const ofImageLoadSettings &settings){\n  719  \t#if defined(TARGET_ANDROID)\n  720: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofImage_<PixelType>::unloadTexture);\n  721: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofImage_<PixelType>::update);\n  722  \t#endif\n  723  \tbool bLoadedOk = ofLoadImage(pixels, buffer, settings);\n  ...\n  858  \t}\n  859  #if defined(TARGET_ANDROID)\n  860: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofImage_<PixelType>::unloadTexture);\n  861: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofImage_<PixelType>::update);\n  862  #endif\n  863  \tpixels.allocate(w, h, newType);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofTrueTypeFont.cpp:\n  566  #if defined(TARGET_ANDROID)\n  567  \tif(mom.isLoaded()){\n  568: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofTrueTypeFont::unloadTextures);\n  569: \t\tofAddListener(ofxAndroidEvents().reloadGL,this,&ofTrueTypeFont::reloadTextures);\n  570  \t}\n  571  #endif\n  ...\n  597  #if defined(TARGET_ANDROID)\n  598  \tif(mom.isLoaded()){\n  599: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofTrueTypeFont::unloadTextures);\n  600: \t\tofAddListener(ofxAndroidEvents().reloadGL,this,&ofTrueTypeFont::reloadTextures);\n  601  \t}\n  602  #endif\n  ...\n  631  #if defined(TARGET_ANDROID)\n  632  \tif(mom.isLoaded()){\n  633: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofTrueTypeFont::unloadTextures);\n  634: \t\tofAddListener(ofxAndroidEvents().reloadGL,this,&ofTrueTypeFont::reloadTextures);\n  635  \t}\n  636  #endif\n  ...\n  662  #if defined(TARGET_ANDROID)\n  663  \tif(mom.isLoaded()){\n  664: \t\tofAddListener(ofxAndroidEvents().unloadGL,this,&ofTrueTypeFont::unloadTextures);\n  665: \t\tofAddListener(ofxAndroidEvents().reloadGL,this,&ofTrueTypeFont::reloadTextures);\n  666  \t}\n  667  #endif\n  ...\n  793  bool ofTrueTypeFont::load(const ofTrueTypeFontSettings & _settings){\n  794  \t#if defined(TARGET_ANDROID)\n  795: \tofAddListener(ofxAndroidEvents().unloadGL,this,&ofTrueTypeFont::unloadTextures);\n  796: \tofAddListener(ofxAndroidEvents().reloadGL,this,&ofTrueTypeFont::reloadTextures);\n  797  \t#endif\n  798  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/sound/ofOpenALSoundPlayer.cpp:\n  854  \tif(sources.empty()) return;\n  855  \tif(bMultiPlay){\n  856: \t\tofAddListener(ofEvents().update,this,&ofOpenALSoundPlayer::update);\n  857  \t}else{\n  858  \t\tofRemoveListener(ofEvents().update,this,&ofOpenALSoundPlayer::update);\n  ...\n  901  \n  902  \tif(bMultiPlay){\n  903: \t\tofAddListener(ofEvents().update,this,&ofOpenALSoundPlayer::update);\n  904  \t}\n  905  \tif(isStreaming){\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/types/ofParameter.h:\n  503  \ttemplate<class ListenerClass, typename ListenerMethod>\n  504  \tvoid addListener(ListenerClass * listener, ListenerMethod method, int prio=OF_EVENT_ORDER_AFTER_APP){\n  505: \t\tofAddListener(obj->changedE,listener,method,prio);\n  506  \t}\n  507  \n  ...\n  996  \ttemplate<class ListenerClass, typename ListenerMethod>\n  997  \tvoid addListener(ListenerClass * listener, ListenerMethod method, int prio=OF_EVENT_ORDER_AFTER_APP){\n  998: \t\tofAddListener(obj->changedE,listener,method,prio);\n  999  \t}\n 1000  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/utils/ofURLFileLoader.cpp:\n  107  void ofURLFileLoaderImpl::start() {\n  108  \t if (!isThreadRunning()){\n  109: \t\tofAddListener(ofEvents().update,this,&ofURLFileLoaderImpl::update);\n  110  \t\tstartThread();\n  111  \t}\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/utils/ofURLFileLoader.h:\n   98  template<class T>\n   99  void ofRegisterURLNotification(T * obj){\n  100: \tofAddListener(ofURLResponseEvent(),obj,&T::urlResponse);\n  101  }\n  102  \n\n214 matches across 53 files\n\n\nSearching 2312 files for \"EventType\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/ofxDatGui.cpp:\n  748  {\n  749  // these events are not dispatched out to the main application //\n  750:     if (e.type == ofxDatGuiEventType::DROPDOWN_TOGGLED){\n  751          layoutGui();\n  752:     }   else if (e.type == ofxDatGuiEventType::GUI_TOGGLED){\n  753          mExpanded ? collapse() : expand();\n  754:     }   else if (e.type == ofxDatGuiEventType::VISIBILITY_CHANGED){\n  755          layoutGui();\n  756      }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGuiControls.h:\n  142              ofxDatGuiComponent::onMouseRelease(m);\n  143          // dispatch event out to main application //\n  144:             ofxDatGuiInternalEvent e(ofxDatGuiEventType::GUI_TOGGLED, mIndex);\n  145              internalEventCallback(e);\n  146          }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGuiGroups.h:\n  137              // dispatch an event out to the gui panel to adjust its children //\n  138                  if (internalEventCallback != nullptr){\n  139:                     ofxDatGuiInternalEvent e(ofxDatGuiEventType::DROPDOWN_TOGGLED, mIndex);\n  140                      internalEventCallback(e);\n  141                  }\n  ...\n  145          void dispatchInternalEvent(ofxDatGuiInternalEvent e)\n  146          {\n  147:             if (e.type == ofxDatGuiEventType::VISIBILITY_CHANGED) layout();\n  148              internalEventCallback(e);\n  149          }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGuiMatrix.h:\n  102              if (mRect.inside(m)) {\n  103                  mSelected = !mSelected;\n  104:                 ofxDatGuiInternalEvent e(ofxDatGuiEventType::MATRIX_BUTTON_TOGGLED, mIndex);\n  105                  internalEventCallback(e);\n  106              }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGuiTextInputField.h:\n  180              if (mTextChanged){\n  181                  mTextChanged = false;\n  182:                 ofxDatGuiInternalEvent e(ofxDatGuiEventType::INPUT_CHANGED, 0);\n  183                  internalEventCallback(e);\n  184              }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/core/ofxDatGuiComponent.cpp:\n  164      mVisible = visible;\n  165      if (internalEventCallback != nullptr){\n  166:         ofxDatGuiInternalEvent e(ofxDatGuiEventType::VISIBILITY_CHANGED, mIndex);\n  167          internalEventCallback(e);\n  168      }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/core/ofxDatGuiEvents.h:\n   34  class ofxDatGuiScrollViewItem;\n   35  \n   36: enum ofxDatGuiEventType\n   37  {\n   38      GUI_TOGGLED = 0,\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxEmscripten/src/ofxAppEmscriptenWindow.cpp:\n  174  }\n  175  \n  176: int ofxAppEmscriptenWindow::keydown_cb(int eventType, const EmscriptenKeyboardEvent *keyEvent, void *userData){\n  177  \tint key = keyEvent->key[0];\n  178  \tif(key==0){\n  ...\n  183  }\n  184  \n  185: int ofxAppEmscriptenWindow::keyup_cb(int eventType, const EmscriptenKeyboardEvent *keyEvent, void *userData){\n  186  \tint key = keyEvent->key[0];\n  187  \tif(key==0){\n  ...\n  192  }\n  193  \n  194: int ofxAppEmscriptenWindow::mousedown_cb(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData){\n  195  \tinstance->events().notifyMousePressed(ofGetMouseX(),ofGetMouseY(),mouseEvent->button);\n  196  \treturn 0;\n  197  }\n  198  \n  199: int ofxAppEmscriptenWindow::mouseup_cb(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData){\n  200  \tinstance->events().notifyMouseReleased(ofGetMouseX(),ofGetMouseY(),mouseEvent->button);\n  201  \treturn 0;\n  ...\n  203  }\n  204  \n  205: int ofxAppEmscriptenWindow::mousemoved_cb(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData){\n  206  \tif(ofGetMousePressed()){\n  207  \t\tinstance->events().notifyMouseDragged(mouseEvent->canvasX,mouseEvent->canvasY,0);\n  ...\n  213  }\n  214  \n  215: int ofxAppEmscriptenWindow::touch_cb(int eventType, const EmscriptenTouchEvent* e, void* userData) {\n  216  \n  217          ofTouchEventArgs::Type touchArgsType;\n  218:         switch (eventType) {\n  219                      case EMSCRIPTEN_EVENT_TOUCHSTART:\n  220                          touchArgsType = ofTouchEventArgs::down;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxEmscripten/src/ofxAppEmscriptenWindow.h:\n   70  private:\n   71  \tstatic void display_cb();\n   72: \tstatic int keydown_cb(int eventType, const EmscriptenKeyboardEvent *keyEvent, void *userData);\n   73: \tstatic int keyup_cb(int eventType, const EmscriptenKeyboardEvent *keyEvent, void *userData);\n   74: \tstatic int mousedown_cb(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData);\n   75: \tstatic int mouseup_cb(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData);\n   76: \tstatic int mousemoved_cb(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData);\n   77:     static int touch_cb(int eventType, const EmscriptenTouchEvent *touchEvent, void *userData);\n   78  \tvoid update();\n   79  \tvoid draw();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/EventTarget.h:\n   51  \tvirtual ~EventTarget();\n   52  \n   53: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   54: \tvoid addEventListener(EventType& event,\n   55  \t\t\t\t\t\t  void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   56  \t\t\t\t\t\t  bool useCapture = false,\n   ..\n   60  \t}\n   61  \n   62: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   63: \tvoid addEventListener(EventType& event,\n   64  \t\t\t\t\t\t  void (ListenerClass::*listenerMethod)(ArgumentsType&),\n   65  \t\t\t\t\t\t  bool useCapture = false,\n   ..\n   69  \t}\n   70  \n   71: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   72: \tvoid addEventListener(EventType& event,\n   73  \t\t\t\t\t\t  bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   74  \t\t\t\t\t\t  bool useCapture = false,\n   ..\n   78  \t}\n   79  \n   80: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   81: \tvoid addEventListener(EventType& event,\n   82  \t\t\t\t\t\t  bool (ListenerClass::*listenerMethod)(ArgumentsType&),\n   83  \t\t\t\t\t\t  bool useCapture = false,\n   ..\n   87  \t}\n   88  \n   89: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   90: \tvoid removeEventListener(EventType& event,\n   91  \t\t\t\t\t\t\t void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   92  \t\t\t\t\t\t\t bool useCapture = false,\n   ..\n   96  \t}\n   97  \n   98: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   99: \tvoid removeEventListener(EventType& event,\n  100  \t\t\t\t\t\t\t void (ListenerClass::*listenerMethod)(ArgumentsType&),\n  101  \t\t\t\t\t\t\t bool useCapture = false,\n  ...\n  106  \n  107  \n  108: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n  109: \tvoid removeEventListener(EventType& event,\n  110  \t\t\t\t\t\t\t bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n  111  \t\t\t\t\t\t\t bool useCapture = false,\n  ...\n  116  \n  117  \n  118: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n  119: \tvoid removeEventListener(EventType& event,\n  120  \t\t\t\t\t\t\t bool (ListenerClass::*listenerMethod)(ArgumentsType&),\n  121  \t\t\t\t\t\t\t bool useCapture = false,\n  ...\n  131  \t///\n  132  \t/// \\param event The Event to dispatch.\n  133: \t/// \\tparam EventType The Event type to dispatch.\n  134  \t/// \\returns true iff one of the responders called Event::preventDefault().\n  135: \ttemplate <class EventType>\n  136: \tbool dispatchEvent(EventType& event);\n  137  \n  138  \t/// \\brief Handle the given event.\n  ...\n  150  \t/// \\param event The event name.\n  151  \t/// \\returns true if it has registered listeners for this event.\n  152: \tbool hasListenersForEventType(const std::string& type) const;\n  153  \n  154  \t/// \\brief Determine if the EventTarget is registered to receive the type of events.\n  155  \t/// \\param type The event type.\n  156  \t/// \\returns true if it is registered to receive the type of events.\n  157: \tbool isEventTypeRegistered(const std::string& type) const;\n  158  \n  159  \t/// \\brief Register a new event type by name.\n  160  \t/// \\param type The event type.\n  161  \t/// \\param event A pointer to the DOMEvent<> that will be called.\n  162: \tvoid registerEventType(const std::string& type, BaseDOMEvent* event);\n  163  \n  164  \t/// \\brief Unregister a new event type by name.\n  165  \t/// \\param type The event type.\n  166: \tvoid unregisterEventType(const std::string& type);\n  167  \n  168  \tvirtual void onSetup()\n  ...\n  224  \t// to have each one.\n  225  \n  226: \t// theoretically not having any events registered woudl make isEventTypeRegistered much faster.\n  227  \t_eventRegistry = {\n  228  \n  ...\n  240  \n  241  template <class EventTargetType>\n  242: template <class EventType>\n  243: bool EventTarget<EventTargetType>::dispatchEvent(EventType& event)\n  244  {\n  245  \t// Get the target (this Element).\n  ...\n  329  \n  330  template <class EventTargetType>\n  331: bool EventTarget<EventTargetType>::hasListenersForEventType(const std::string& type) const\n  332  {\n  333  \tauto iter = _eventRegistry.find(type);\n  ...\n  381  \n  382  template <class EventTargetType>\n  383: bool EventTarget<EventTargetType>::isEventTypeRegistered(const std::string& type) const\n  384  {\n  385  \treturn _eventRegistry.find(type) != _eventRegistry.end();\n  ...\n  388  \n  389  template <class EventTargetType>\n  390: void EventTarget<EventTargetType>::registerEventType(const std::string& type,\n  391  \t\t\t\t\t\t\t\t\t\t\t\t\t BaseDOMEvent* event)\n  392  {\n  ...\n  396  \n  397  template <class EventTargetType>\n  398: void EventTarget<EventTargetType>::unregisterEventType(const std::string& type)\n  399  {\n  400  \t_eventRegistry.erase(_eventRegistry.find(type));\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DirectoryWatcher.h:\n   71  {\n   72  public:\n   73: \tenum DirectoryEventType\n   74  \t{\n   75  \t\tDW_ITEM_ADDED = 1,\n   ..\n  105  \tstruct DirectoryEvent\n  106  \t{\n  107: \t\tDirectoryEvent(const File& f, DirectoryEventType ev):\n  108  \t\t\titem(f),\n  109  \t\t\tevent(ev)\n  ...\n  112  \n  113  \t\tconst File& item;          /// The directory or file that has been changed.\n  114: \t\tDirectoryEventType event;  /// The kind of event.\n  115  \t};\n  116  \t\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/Data/SQLite/Notifier.h:\n   49  {\n   50  public:\n   51: \ttypedef unsigned char EnabledEventType;\n   52  \t\t/// A type definition for events-enabled bitmap.\n   53  \n   ..\n   64  \n   65  \t// Event types.\n   66: \tstatic const EnabledEventType SQLITE_NOTIFY_UPDATE   = 1;\n   67: \tstatic const EnabledEventType SQLITE_NOTIFY_COMMIT   = 2;\n   68: \tstatic const EnabledEventType SQLITE_NOTIFY_ROLLBACK = 4;\n   69  \n   70  \tNotifier(const Session& session,\n   71: \t\tEnabledEventType enabled = SQLITE_NOTIFY_UPDATE | SQLITE_NOTIFY_COMMIT | SQLITE_NOTIFY_ROLLBACK);\n   72  \t\t\t/// Creates a Notifier and enables all callbacks.\n   73  \n   74  \tNotifier(const Session& session,\n   75  \t\tconst Any& value,\n   76: \t\tEnabledEventType enabled = SQLITE_NOTIFY_UPDATE | SQLITE_NOTIFY_COMMIT | SQLITE_NOTIFY_ROLLBACK);\n   77  \t\t\t/// Creates a Notifier, assigns the value to the internal storage and and enables all callbacks.\n   78  \n   ..\n  154  \tPoco::Dynamic::Var _value;\n  155  \tPoco::Int64        _row;\n  156: \tEnabledEventType   _enabledEvents;\n  157  \tPoco::Mutex        _mutex;\n  158  };\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/Document.h:\n  201  \n  202  \t// DocumentEvent\n  203: \tEvent* createEvent(const XMLString& eventType) const;\n  204  \n  205  \t// Node\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/DocumentEvent.h:\n   38  {\n   39  public:\n   40: \tvirtual Event* createEvent(const XMLString& eventType) const = 0;\n   41  \t\t/// Creates an event of the specified type.\n   42  \t\t///\n   43: \t\t/// The eventType parameter specifies the type of Event interface to be created.\n   44  \t\t/// If the Event interface specified is supported by the implementation this\n   45  \t\t/// method will return a new Event of the interface type requested. If the Event\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/Event.h:\n  100  \t\t/// used during any stage of event flow. \n  101  \n  102: \tvoid initEvent(const XMLString& eventType, bool canBubble, bool isCancelable);\n  103  \t\t/// The initEvent method is used to initialize the value of an \n  104  \t\t/// Event created through the DocumentEvent interface. This method\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/XML/XMLStreamParser.h:\n   73  \t///\n   74  \t///     XMLStreamParser p(ifs, argv[1]);\n   75: \t///     for (XMLStreamParser::EventType e: p)\n   76  \t///     {\n   77  \t///         switch (e)\n   ..\n   93  {\n   94  public:\n   95: \tenum EventType\n   96  \t\t/// Parsing events.\n   97  \t{\n   ..\n  130  \t\t// implementation that is just enough to the range-based for.\n  131  \t{\n  132: \t\ttypedef EventType value_type;\n  133  \n  134: \t\tIterator(XMLStreamParser* p = 0, EventType e = EV_EOF):\n  135  \t\t\t_parser(p),\n  136  \t\t\t_e(e)\n  ...\n  163  \tprivate:\n  164  \t\tXMLStreamParser* _parser;\n  165: \t\tEventType _e;\n  166  \t};\n  167  \n  ...\n  195  \t\t/// Destroys the XMLStreamParser.\n  196  \n  197: \tEventType next();\n  198  \t\t/// Call the next() function when we are ready to handle the next piece of XML.\n  199  \n  200: \tvoid nextExpect(EventType);\n  201  \t\t/// Get the next event and make sure that it's what's expected. If it\n  202  \t\t/// is not, then throw an appropriate parsing exception.\n  203  \n  204: \tvoid nextExpect(EventType, const std::string& name);\n  205: \tvoid nextExpect(EventType, const QName& qname);\n  206: \tvoid nextExpect(EventType, const std::string& ns, const std::string& name);\n  207  \n  208: \tEventType peek();\n  209: \tEventType event();\n  210  \t\t/// Return the event that was last returned by the call to next() or peek().\n  211  \n  ...\n  239  \tContent content() const;\n  240  \n  241: \tvoid nextExpect(EventType, const std::string& name, Content);\n  242: \tvoid nextExpect(EventType, const QName& qname, Content);\n  243: \tvoid nextExpect(EventType, const std::string& ns, const std::string& name, Content);\n  244  \n  245  \t// Helpers for parsing elements with simple content. The first two\n  ...\n  277  \n  278  \tvoid init();\n  279: \tEventType nextImpl(bool peek);\n  280: \tEventType nextBody();\n  281  \tvoid handleError();\n  282  \n  ...\n  296  \tbool _accumulateContent; // Whether we are accumulating character content.\n  297  \tenum { state_next, state_peek } _parserState;\n  298: \tEventType _currentEvent;\n  299: \tEventType _queue;\n  300  \tQName _qname;\n  301  \tstd::string _value;\n  ...\n  347  \n  348  \n  349: XML_API std::ostream& operator << (std::ostream&, XMLStreamParser::EventType);\n  350  \n  351  \n  ...\n  353  // inlines\n  354  //\n  355: inline XMLStreamParser::EventType XMLStreamParser::event()\n  356  \t// Return the even that was last returned by the call to next() or peek().\n  357  {\n  ...\n  414  \n  415  \n  416: inline XMLStreamParser::EventType XMLStreamParser::peek()\n  417  {\n  418  \tif (_parserState == state_peek)\n  ...\n  420  \telse\n  421  \t{\n  422: \t\tEventType e(nextImpl(true));\n  423  \t\t_parserState = state_peek; // Set it after the call to nextImpl().\n  424  \t\treturn e;\n  ...\n  485  \n  486  \n  487: inline void XMLStreamParser::nextExpect(EventType e, const QName& qn)\n  488  {\n  489  \tnextExpect(e, qn.namespaceURI(), qn.localName());\n  ...\n  491  \n  492  \n  493: inline void XMLStreamParser::nextExpect(EventType e, const std::string& n)\n  494  {\n  495  \tnextExpect(e, std::string(), n);\n  ...\n  497  \n  498  \n  499: inline void XMLStreamParser::nextExpect(EventType e, const QName& qn, Content c)\n  500  {\n  501  \tnextExpect(e, qn);\n  ...\n  505  \n  506  \n  507: inline void XMLStreamParser::nextExpect(EventType e, const std::string& n, Content c)\n  508  {\n  509  \tnextExpect(e, std::string(), n);\n  ...\n  513  \n  514  \n  515: inline void XMLStreamParser::nextExpect(EventType e, const std::string& ns, const std::string& n, Content c)\n  516  {\n  517  \tnextExpect(e, ns, n);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEventUtils.h:\n   17  ///     ofAddListener(addon.newIntEvent, this, &Class::method)\n   18  \n   19: template <class EventType,typename ArgumentsType, class ListenerClass>\n   20: void ofAddListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   21      event.remove(listener, listenerMethod, prio);\n   22      event.add(listener, listenerMethod, prio);\n   23  }\n   24  \n   25: template <class EventType,typename ArgumentsType, class ListenerClass>\n   26: void ofAddListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   27      event.remove(listener, listenerMethod, prio);\n   28      event.add(listener, listenerMethod, prio);\n   ..\n   41  }\n   42  \n   43: template <class EventType,typename ArgumentsType, class ListenerClass>\n   44: void ofAddListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   45      event.remove(listener, listenerMethod, prio);\n   46      event.add(listener, listenerMethod, prio);\n   47  }\n   48  \n   49: template <class EventType,typename ArgumentsType, class ListenerClass>\n   50: void ofAddListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   51      event.remove(listener, listenerMethod, prio);\n   52      event.add(listener, listenerMethod, prio);\n   ..\n   65  }\n   66  \n   67: template <class EventType,typename ArgumentsType>\n   68: void ofAddListener(EventType & event, void (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   69      event.remove(listenerFunction, prio);\n   70      event.add(listenerFunction, prio);\n   71  }\n   72  \n   73: template <class EventType,typename ArgumentsType>\n   74: void ofAddListener(EventType & event, void (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   75      event.remove(listenerFunction, prio);\n   76      event.add(listenerFunction, prio);\n   ..\n   87  }\n   88  \n   89: template <class EventType,typename ArgumentsType>\n   90: void ofAddListener(EventType & event, bool (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   91      event.remove(listenerFunction, prio);\n   92      event.add(listenerFunction, prio);\n   93  }\n   94  \n   95: template <class EventType,typename ArgumentsType>\n   96: void ofAddListener(EventType & event, bool (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   97      event.remove(*listenerFunction, prio);\n   98      event.add(*listenerFunction, prio);\n   ..\n  118  ///     ofAddListener(addon.newIntEvent, this, &Class::method)\n  119  \n  120: template <class EventType,typename ArgumentsType, class ListenerClass>\n  121: void ofRemoveListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  122      event.remove(listener, listenerMethod, prio);\n  123  }\n  124  \n  125: template <class EventType,typename ArgumentsType, class ListenerClass>\n  126: void ofRemoveListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  127      event.remove(listener, listenerMethod, prio);\n  128  }\n  ...\n  138  }\n  139  \n  140: template <class EventType,typename ArgumentsType, class ListenerClass>\n  141: void ofRemoveListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  142      event.remove(listener, listenerMethod, prio);\n  143  }\n  144  \n  145: template <class EventType,typename ArgumentsType, class ListenerClass>\n  146: void ofRemoveListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  147      event.remove(listener, listenerMethod, prio);\n  148  }\n  ...\n  158  }\n  159  \n  160: template <class EventType,typename ArgumentsType>\n  161: void ofRemoveListener(EventType & event, void (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  162      event.remove(listenerFunction, prio);\n  163  }\n  164  \n  165: template <class EventType,typename ArgumentsType>\n  166: void ofRemoveListener(EventType & event, void (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  167      event.remove(listenerFunction, prio);\n  168  }\n  ...\n  176  }\n  177  \n  178: template <class EventType,typename ArgumentsType>\n  179: void ofRemoveListener(EventType & event, bool (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  180      event.remove(listenerFunction, prio);\n  181  }\n  182  \n  183: template <class EventType,typename ArgumentsType>\n  184: void ofRemoveListener(EventType & event, bool (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  185      event.remove(listenerFunction, prio);\n  186  }\n  ...\n  205  /// @returns: true in case any listener attended the event\n  206  \n  207: template <class EventType,typename ArgumentsType, typename SenderType>\n  208: inline bool ofNotifyEvent(EventType & event, ArgumentsType & args, SenderType * sender){\n  209  \treturn event.notify(sender,args);\n  210  }\n  211  \n  212: template <class EventType,typename ArgumentsType>\n  213: inline bool ofNotifyEvent(EventType & event, ArgumentsType & args){\n  214  \treturn event.notify(args);\n  215  }\n  216  \n  217: template <class EventType, typename ArgumentsType, typename SenderType>\n  218: inline bool ofNotifyEvent(EventType & event, const ArgumentsType & args, SenderType * sender){\n  219  \treturn event.notify(sender,args);\n  220  }\n  221  \n  222: template <class EventType,typename ArgumentsType>\n  223: inline bool ofNotifyEvent(EventType & event, const ArgumentsType & args){\n  224  \treturn event.notify(args);\n  225  }\n\n135 matches across 17 files\n\n\nSearching 2312 files for \"class EventType\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/EventTarget.h:\n   51  \tvirtual ~EventTarget();\n   52  \n   53: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   54  \tvoid addEventListener(EventType& event,\n   55  \t\t\t\t\t\t  void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   ..\n   60  \t}\n   61  \n   62: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   63  \tvoid addEventListener(EventType& event,\n   64  \t\t\t\t\t\t  void (ListenerClass::*listenerMethod)(ArgumentsType&),\n   ..\n   69  \t}\n   70  \n   71: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   72  \tvoid addEventListener(EventType& event,\n   73  \t\t\t\t\t\t  bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   ..\n   78  \t}\n   79  \n   80: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   81  \tvoid addEventListener(EventType& event,\n   82  \t\t\t\t\t\t  bool (ListenerClass::*listenerMethod)(ArgumentsType&),\n   ..\n   87  \t}\n   88  \n   89: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   90  \tvoid removeEventListener(EventType& event,\n   91  \t\t\t\t\t\t\t void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n   ..\n   96  \t}\n   97  \n   98: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n   99  \tvoid removeEventListener(EventType& event,\n  100  \t\t\t\t\t\t\t void (ListenerClass::*listenerMethod)(ArgumentsType&),\n  ...\n  106  \n  107  \n  108: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n  109  \tvoid removeEventListener(EventType& event,\n  110  \t\t\t\t\t\t\t bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&),\n  ...\n  116  \n  117  \n  118: \ttemplate <class EventType, typename ArgumentsType, class ListenerClass>\n  119  \tvoid removeEventListener(EventType& event,\n  120  \t\t\t\t\t\t\t bool (ListenerClass::*listenerMethod)(ArgumentsType&),\n  ...\n  133  \t/// \\tparam EventType The Event type to dispatch.\n  134  \t/// \\returns true iff one of the responders called Event::preventDefault().\n  135: \ttemplate <class EventType>\n  136  \tbool dispatchEvent(EventType& event);\n  137  \n  ...\n  240  \n  241  template <class EventTargetType>\n  242: template <class EventType>\n  243  bool EventTarget<EventTargetType>::dispatchEvent(EventType& event)\n  244  {\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEventUtils.h:\n   17  ///     ofAddListener(addon.newIntEvent, this, &Class::method)\n   18  \n   19: template <class EventType,typename ArgumentsType, class ListenerClass>\n   20  void ofAddListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   21      event.remove(listener, listenerMethod, prio);\n   ..\n   23  }\n   24  \n   25: template <class EventType,typename ArgumentsType, class ListenerClass>\n   26  void ofAddListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   27      event.remove(listener, listenerMethod, prio);\n   ..\n   41  }\n   42  \n   43: template <class EventType,typename ArgumentsType, class ListenerClass>\n   44  void ofAddListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   45      event.remove(listener, listenerMethod, prio);\n   ..\n   47  }\n   48  \n   49: template <class EventType,typename ArgumentsType, class ListenerClass>\n   50  void ofAddListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   51      event.remove(listener, listenerMethod, prio);\n   ..\n   65  }\n   66  \n   67: template <class EventType,typename ArgumentsType>\n   68  void ofAddListener(EventType & event, void (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   69      event.remove(listenerFunction, prio);\n   ..\n   71  }\n   72  \n   73: template <class EventType,typename ArgumentsType>\n   74  void ofAddListener(EventType & event, void (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   75      event.remove(listenerFunction, prio);\n   ..\n   87  }\n   88  \n   89: template <class EventType,typename ArgumentsType>\n   90  void ofAddListener(EventType & event, bool (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   91      event.remove(listenerFunction, prio);\n   ..\n   93  }\n   94  \n   95: template <class EventType,typename ArgumentsType>\n   96  void ofAddListener(EventType & event, bool (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n   97      event.remove(*listenerFunction, prio);\n   ..\n  118  ///     ofAddListener(addon.newIntEvent, this, &Class::method)\n  119  \n  120: template <class EventType,typename ArgumentsType, class ListenerClass>\n  121  void ofRemoveListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  122      event.remove(listener, listenerMethod, prio);\n  123  }\n  124  \n  125: template <class EventType,typename ArgumentsType, class ListenerClass>\n  126  void ofRemoveListener(EventType & event, ListenerClass  * listener, void (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  127      event.remove(listener, listenerMethod, prio);\n  ...\n  138  }\n  139  \n  140: template <class EventType,typename ArgumentsType, class ListenerClass>\n  141  void ofRemoveListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  142      event.remove(listener, listenerMethod, prio);\n  143  }\n  144  \n  145: template <class EventType,typename ArgumentsType, class ListenerClass>\n  146  void ofRemoveListener(EventType & event, ListenerClass  * listener, bool (ListenerClass::*listenerMethod)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  147      event.remove(listener, listenerMethod, prio);\n  ...\n  158  }\n  159  \n  160: template <class EventType,typename ArgumentsType>\n  161  void ofRemoveListener(EventType & event, void (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  162      event.remove(listenerFunction, prio);\n  163  }\n  164  \n  165: template <class EventType,typename ArgumentsType>\n  166  void ofRemoveListener(EventType & event, void (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  167      event.remove(listenerFunction, prio);\n  ...\n  176  }\n  177  \n  178: template <class EventType,typename ArgumentsType>\n  179  void ofRemoveListener(EventType & event, bool (*listenerFunction)(const void*, ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  180      event.remove(listenerFunction, prio);\n  181  }\n  182  \n  183: template <class EventType,typename ArgumentsType>\n  184  void ofRemoveListener(EventType & event, bool (*listenerFunction)(ArgumentsType&), int prio=OF_EVENT_ORDER_AFTER_APP){\n  185      event.remove(listenerFunction, prio);\n  ...\n  205  /// @returns: true in case any listener attended the event\n  206  \n  207: template <class EventType,typename ArgumentsType, typename SenderType>\n  208  inline bool ofNotifyEvent(EventType & event, ArgumentsType & args, SenderType * sender){\n  209  \treturn event.notify(sender,args);\n  210  }\n  211  \n  212: template <class EventType,typename ArgumentsType>\n  213  inline bool ofNotifyEvent(EventType & event, ArgumentsType & args){\n  214  \treturn event.notify(args);\n  215  }\n  216  \n  217: template <class EventType, typename ArgumentsType, typename SenderType>\n  218  inline bool ofNotifyEvent(EventType & event, const ArgumentsType & args, SenderType * sender){\n  219  \treturn event.notify(sender,args);\n  220  }\n  221  \n  222: template <class EventType,typename ArgumentsType>\n  223  inline bool ofNotifyEvent(EventType & event, const ArgumentsType & args){\n  224  \treturn event.notify(args);\n\n30 matches across 2 files\n\n\nSearching 2312 files for \"ofEvents()\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.cpp:\n  300  Java_cc_openframeworks_OFAndroid_onDestroy( JNIEnv*  env, jclass  thiz ){\n  301  \tappSetup = false;\n  302: \tofEvents().notifyExit();\n  303  \tofExitCallback();\n  304  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxColorPicker/src/ofxColorPicker.cpp:\n   59      }\n   60      \n   61:     ofAddListener(ofEvents().update, this, &ofxColorPicker::update);\n   62:     ofAddListener(ofEvents().draw, this, &ofxColorPicker::draw);\n   63:     ofAddListener(ofEvents().exit, this, &ofxColorPicker::exit);\n   64      \n   65      bAddedListeners = true;\n   ..\n   72      }\n   73      \n   74:     ofRemoveListener(ofEvents().update, this, &ofxColorPicker::update);\n   75:     ofRemoveListener(ofEvents().draw, this, &ofxColorPicker::draw);\n   76:     ofRemoveListener(ofEvents().exit, this, &ofxColorPicker::exit);\n   77      \n   78      bAddedListeners = false;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/ofxDatGui.cpp:\n   46      mGuis.erase(std::remove(mGuis.begin(), mGuis.end(), this), mGuis.end());\n   47      if (mActiveGui == this) mActiveGui = mGuis.size() > 0 ? mGuis[0] : nullptr;\n   48:     ofRemoveListener(ofEvents().draw, this, &ofxDatGui::onDraw, OF_EVENT_ORDER_AFTER_APP + mIndex);\n   49:     ofRemoveListener(ofEvents().update, this, &ofxDatGui::onUpdate, OF_EVENT_ORDER_BEFORE_APP - mIndex);\n   50:     ofRemoveListener(ofEvents().windowResized, this, &ofxDatGui::onWindowResized, OF_EVENT_ORDER_BEFORE_APP);\n   51  }\n   52  \n   ..\n   75      mActiveGui = this;\n   76      mGuis.push_back(this);\n   77:     ofAddListener(ofEvents().windowResized, this, &ofxDatGui::onWindowResized, OF_EVENT_ORDER_BEFORE_APP);\n   78  }\n   79  \n   ..\n  187  {\n  188      mAutoDraw = autodraw;\n  189:     ofRemoveListener(ofEvents().draw, this, &ofxDatGui::onDraw, OF_EVENT_ORDER_AFTER_APP + mIndex);\n  190:     ofRemoveListener(ofEvents().update, this, &ofxDatGui::onUpdate, OF_EVENT_ORDER_BEFORE_APP - mIndex);\n  191      if (mAutoDraw){\n  192          mIndex = priority;\n  193:         ofAddListener(ofEvents().draw, this, &ofxDatGui::onDraw, OF_EVENT_ORDER_AFTER_APP + mIndex);\n  194:         ofAddListener(ofEvents().update, this, &ofxDatGui::onUpdate, OF_EVENT_ORDER_BEFORE_APP - mIndex);\n  195      }\n  196  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGui2dPad.h:\n   35              setTheme(ofxDatGuiComponent::getTheme());\n   36              setBounds(ofRectangle(0, 0, ofGetWidth(), ofGetHeight()), true);\n   37:             ofAddListener(ofEvents().windowResized, this, &ofxDatGui2dPad::onWindowResized);\n   38          }\n   39      \n   ..\n   45              setTheme(ofxDatGuiComponent::getTheme());\n   46              setBounds(bounds, false);\n   47:             ofAddListener(ofEvents().windowResized, this, &ofxDatGui2dPad::onWindowResized);\n   48          }\n   49      \n   50          ~ofxDatGui2dPad()\n   51          {\n   52:             ofRemoveListener(ofEvents().windowResized, this, &ofxDatGui2dPad::onWindowResized);\n   53          }\n   54      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/components/ofxDatGuiScrollView.h:\n   55              mNumVisible = nVisible;\n   56              setTheme(ofxDatGuiComponent::getTheme());\n   57:             ofAddListener(ofEvents().mouseScrolled, this, &ofxDatGuiScrollView::onMouseScrolled, OF_EVENT_ORDER_BEFORE_APP);\n   58          }\n   59      \n   ..\n   61          {\n   62              mTheme = nullptr;\n   63:             ofRemoveListener(ofEvents().mouseScrolled, this, &ofxDatGuiScrollView::onMouseScrolled, OF_EVENT_ORDER_BEFORE_APP);\n   64          }\n   65      \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/core/ofxDatGuiComponent.cpp:\n   45  {\n   46  //  cout << \"ofxDatGuiComponent \"<< mName << \" destroyed\" << endl;\n   47:     ofRemoveListener(ofEvents().keyPressed, this, &ofxDatGuiComponent::onKeyPressed);\n   48:     ofRemoveListener(ofEvents().windowResized, this, &ofxDatGuiComponent::onWindowResized);\n   49  }\n   50  \n   ..\n  218      mAnchor = anchor;\n  219      if (mAnchor != ofxDatGuiAnchor::NO_ANCHOR){\n  220:         ofAddListener(ofEvents().windowResized, this, &ofxDatGuiComponent::onWindowResized);\n  221      }   else{\n  222:         ofRemoveListener(ofEvents().windowResized, this, &ofxDatGuiComponent::onWindowResized);\n  223      }\n  224      onWindowResized();\n  ...\n  467  {\n  468      mFocused = true;\n  469:     ofAddListener(ofEvents().keyPressed, this, &ofxDatGuiComponent::onKeyPressed);\n  470  }\n  471  \n  ...\n  474      mFocused = false;\n  475      mMouseDown = false;\n  476:     ofRemoveListener(ofEvents().keyPressed, this, &ofxDatGuiComponent::onKeyPressed);\n  477  }\n  478  \n  ...\n  485      if ((e.key == OF_KEY_RETURN || e.key == OF_KEY_TAB)){\n  486          onFocusLost();\n  487:         ofRemoveListener(ofEvents().keyPressed, this, &ofxDatGuiComponent::onKeyPressed);\n  488      }\n  489  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxInputField.cpp:\n  147  \t}\n  148  \tlisteners.push(value.newListener(this,&ofxInputField::valueChanged));\n  149: \tlisteners.push(ofEvents().charEvent.newListener(this, &ofxInputField<Type>::charPressed, OF_EVENT_ORDER_BEFORE_APP));\n  150: \tlisteners.push(ofEvents().keyPressed.newListener(this, &ofxInputField<Type>::keyPressed, OF_EVENT_ORDER_BEFORE_APP));\n  151  \treturn this;\n  152  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/ofxGuiElement.cpp:\n   67  \tunregisterMouseEvents();\n   68  \tif(updateOnThemeChange){\n   69: \t\tofRemoveListener(ofEvents().update, this, &ofxGuiElement::watchTheme);\n   70  \t}\n   71  \n   ..\n  162  \t\t\tthemeFilename = filename;\n  163  \t\t\tthemeUpdated = std::filesystem::last_write_time(ofToDataPath(themeFilename));\n  164: \t\t\tofAddListener(ofEvents().update, this, &ofxGuiElement::watchTheme);\n  165  \t\t}\n  166  \t}else{\n  167  \t\tif(updateOnThemeChange){\n  168  \t\t\tupdateOnThemeChange = false;\n  169: \t\t\tofRemoveListener(ofEvents().update, this, &ofxGuiElement::watchTheme);\n  170  \t\t}\n  171  \t}\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiFpsPlotter.cpp:\n   25  \n   26  ofxGuiFpsPlotter::~ofxGuiFpsPlotter(){\n   27: \tofRemoveListener(ofEvents().update,this,&ofxGuiFpsPlotter::update);\n   28  }\n   29  \n   ..\n   36  \t}\n   37  \tsetDecimalPlace(0);\n   38: \tofAddListener(ofEvents().update,this,&ofxGuiFpsPlotter::update);\n   39  }\n   40  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/DOM/Document.cpp:\n   35  \tElement(\"document\", 0, 0, 1024, 768)\n   36  {\n   37: \tofAddListener(ofEvents().setup, this, &Document::setup);\n   38: \tofAddListener(ofEvents().update, this, &Document::update);\n   39: \tofAddListener(ofEvents().draw, this, &Document::draw, OF_EVENT_ORDER_AFTER_APP);\n   40: \tofAddListener(ofEvents().exit, this, &Document::exit);\n   41: \tofAddListener(ofEvents().windowResized, this, &Document::windowResized, std::numeric_limits<int>::lowest());\n   42  \n   43: \tofAddListener(ofEvents().fileDragEvent, this, &Document::fileDragEvent, std::numeric_limits<int>::lowest());\n   44  \n   45: \tofAddListener(ofEvents().keyPressed, this, &Document::onKeyEvent, std::numeric_limits<int>::lowest());\n   46: \tofAddListener(ofEvents().keyReleased, this, &Document::onKeyEvent, std::numeric_limits<int>::lowest());\n   47  }\n   48  \n   ..\n   50  Document::~Document()\n   51  {\n   52: \tofRemoveListener(ofEvents().setup, this, &Document::setup);\n   53: \tofRemoveListener(ofEvents().update, this, &Document::update);\n   54: \tofRemoveListener(ofEvents().draw, this, &Document::draw, OF_EVENT_ORDER_AFTER_APP);\n   55: \tofRemoveListener(ofEvents().exit, this, &Document::exit);\n   56: \tofRemoveListener(ofEvents().windowResized, this, &Document::windowResized, std::numeric_limits<int>::lowest());\n   57  \n   58: \tofRemoveListener(ofEvents().fileDragEvent, this, &Document::fileDragEvent, std::numeric_limits<int>::lowest());\n   59  \n   60: \tofRemoveListener(ofEvents().keyPressed, this, &Document::onKeyEvent, std::numeric_limits<int>::lowest());\n   61: \tofRemoveListener(ofEvents().keyReleased, this, &Document::onKeyEvent, std::numeric_limits<int>::lowest());\n   62  }\n   63  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/testLayout/src/ofApp.cpp:\n    6  \tofSetFrameRate(120);\n    7  \n    8: \tofAddListener(ofEvents().draw, this, &ofApp::drawMousePosition, OF_EVENT_ORDER_AFTER_APP+1);\n    9  \n   10  \ttestBool.set(\"bool\", true);\n   ..\n  104  \n  105  void ofApp::exit(){\n  106: \tofRemoveListener(ofEvents().draw, this, &ofApp::drawMousePosition, OF_EVENT_ORDER_AFTER_APP+1);\n  107  }\n  108  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineGLFW.cpp:\n   58  \n   59  \t\t// Override listeners\n   60: \t\tofAddListener(ofEvents().mousePressed, this, &EngineGLFW::onMousePressed);\n   61: \t\tofAddListener(ofEvents().mouseReleased, this, &EngineGLFW::onMouseReleased);\n   62: \t\tofAddListener(ofEvents().keyReleased, this, &EngineGLFW::onKeyReleased);\n   63: \t\tofAddListener(ofEvents().keyPressed, this, &EngineGLFW::onKeyPressed);\n   64  \n   65  \t\t// BaseEngine listeners\n   66: \t\tofAddListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   67: \t\tofAddListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   68: \t\tofAddListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   69  \n   70  \t\tisSetup = true;\n   ..\n   77  \n   78  \t\t// Override listeners\n   79: \t\tofRemoveListener(ofEvents().mousePressed, this, &EngineGLFW::onMousePressed);\n   80: \t\tofRemoveListener(ofEvents().mouseReleased, this, &EngineGLFW::onMouseReleased);\n   81: \t\tofRemoveListener(ofEvents().keyReleased, this, &EngineGLFW::onKeyReleased);\n   82: \t\tofRemoveListener(ofEvents().keyPressed, this, &EngineGLFW::onKeyPressed);\n   83  \n   84  \t\t// Base class listeners\n   85: \t\tofRemoveListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   86: \t\tofRemoveListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   87: \t\tofRemoveListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   88  \n   89  \t\tinvalidateDeviceObjects();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineOpenGLES.cpp:\n   42  \n   43  \t\t// Override listeners\n   44: \t\tofAddListener(ofEvents().keyReleased, this, &EngineOpenGLES::onKeyReleased);\n   45  \n   46  \t\t// BaseEngine listeners\n   47: \t\tofAddListener(ofEvents().keyPressed, (BaseEngine*)this, &BaseEngine::onKeyPressed);\n   48: \t\tofAddListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   49: \t\tofAddListener(ofEvents().mousePressed, (BaseEngine*)this, &BaseEngine::onMousePressed);\n   50: \t\tofAddListener(ofEvents().mouseReleased, (BaseEngine*)this, &BaseEngine::onMouseReleased);\n   51: \t\tofAddListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   52: \t\tofAddListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   53  \n   54  \t\tisSetup = true;\n   ..\n   61  \n   62  \t\t// Override listeners\n   63: \t\tofRemoveListener(ofEvents().keyReleased, this, &EngineOpenGLES::onKeyReleased);\n   64  \n   65  \t\t// BaseEngine listeners\n   66: \t\tofRemoveListener(ofEvents().keyPressed, (BaseEngine*)this, &BaseEngine::onKeyPressed);\n   67: \t\tofRemoveListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   68: \t\tofRemoveListener(ofEvents().mousePressed, (BaseEngine*)this, &BaseEngine::onMousePressed);\n   69: \t\tofRemoveListener(ofEvents().mouseReleased, (BaseEngine*)this, &BaseEngine::onMouseReleased);\n   70: \t\tofRemoveListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   71: \t\tofRemoveListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   72  \n   73  \t\tinvalidateDeviceObjects();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/src/EngineVk.cpp:\n   73  \n   74  \t\t// Override listeners\n   75: \t\tofAddListener(ofEvents().mousePressed, this, &EngineVk::onMousePressed);\n   76: \t\tofAddListener(ofEvents().keyReleased, this, &EngineVk::onKeyReleased);\n   77: \t\tofAddListener(ofEvents().keyPressed, this, &EngineVk::onKeyPressed);\n   78  \n   79  \t\t// BaseEngine listeners\n   80: \t\tofAddListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n   81: \t\tofAddListener(ofEvents().mouseReleased, (BaseEngine*)this, &BaseEngine::onMouseReleased);\n   82: \t\tofAddListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n   83: \t\tofAddListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n   84  \n   85  \t\tisSetup = true;\n   ..\n  113  \n  114  \t\t// Override listeners\n  115: \t\tofRemoveListener(ofEvents().mousePressed, this, &EngineVk::onMousePressed);\n  116: \t\tofRemoveListener(ofEvents().keyReleased, this, &EngineVk::onKeyReleased);\n  117: \t\tofRemoveListener(ofEvents().keyPressed, this, &EngineVk::onKeyPressed);\n  118  \n  119  \t\t// Base class listeners\n  120: \t\tofRemoveListener(ofEvents().mouseDragged, (BaseEngine*)this, &BaseEngine::onMouseDragged);\n  121: \t\tofRemoveListener(ofEvents().mouseReleased, (BaseEngine*)this, &BaseEngine::onMouseReleased);\n  122: \t\tofRemoveListener(ofEvents().mouseScrolled, (BaseEngine*)this, &BaseEngine::onMouseScrolled);\n  123: \t\tofRemoveListener(ofEvents().windowResized, (BaseEngine*)this, &BaseEngine::onWindowResized);\n  124  \n  125  \t\tinvalidateDeviceObjects();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxInfiniteCanvas/src/ofxInfiniteCanvas.cpp:\n  240      if(bMouseInputEnabled != e ){\n  241          if(e){\n  242:             ofAddListener(ofEvents().update, this, &ofxInfiniteCanvas::update, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  243          }else{\n  244:             ofRemoveListener(ofEvents().update, this, &ofxInfiniteCanvas::update, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  245          }\n  246          if (!bMouseOverride) {\n  ...\n  257      if (bMouseListenersEnabled != e) {\n  258          if (e) {\n  259:             ofAddListener(ofEvents().mouseDragged , this, &ofxInfiniteCanvas::mouseDragged, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  260:             ofAddListener(ofEvents().mousePressed, this, &ofxInfiniteCanvas::mousePressed, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  261:             ofAddListener(ofEvents().mouseReleased, this, &ofxInfiniteCanvas::mouseReleased, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  262:             ofAddListener(ofEvents().mouseScrolled, this, &ofxInfiniteCanvas::mouseScrolled, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  263          }else{\n  264:             ofRemoveListener(ofEvents().mouseDragged, this, &ofxInfiniteCanvas::mouseDragged, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  265:             ofRemoveListener(ofEvents().mousePressed, this, &ofxInfiniteCanvas::mousePressed, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  266:             ofRemoveListener(ofEvents().mouseReleased, this, &ofxInfiniteCanvas::mouseReleased, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  267:             ofRemoveListener(ofEvents().mouseScrolled, this, &ofxInfiniteCanvas::mouseScrolled, bMouseOverride?OF_EVENT_ORDER_BEFORE_APP:OF_EVENT_ORDER_AFTER_APP);\n  268          }\n  269          bMouseListenersEnabled = e;\n  ...\n  407          //            if (bNotifyMousePressed) {\n  408          //                lastMousePressed.set(screenToWorld((glm::vec3)lastMousePressed));\n  409:         //                ofNotifyEvent(ofEvents().mousePressed, lastMousePressed);\n  410          //                bNotifyMousePressed = false;\n  411          //            }\n  412          //            if (bNotifyMouseReleased) {\n  413          //                lastMouseReleased.set(screenToWorld((glm::vec3)lastMouseReleased));\n  414:         //                ofNotifyEvent(ofEvents().mouseReleased, lastMouseReleased);\n  415          //                bNotifyMouseReleased = false;\n  416          //            }\n  417          //            if (bNotifyMouseDragged) {\n  418          //                lastMouseDragged.set(screenToWorld((glm::vec3)lastMouseDragged));\n  419:         //                ofNotifyEvent(ofEvents().mouseDragged, lastMouseDragged);\n  420          //                bNotifyMouseDragged = false;\n  421          //            }\n  422          //            if (bNotifyMouseScrolled) {\n  423          //                lastMouseScrolled.set(screenToWorld((glm::vec3)lastMouseScrolled));\n  424:         //                ofNotifyEvent(ofEvents().mouseScrolled, lastMouseScrolled);\n  425          //                bNotifyMouseScrolled = false;\n  426          //            }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxThreadedImageLoader/src/ofxThreadedImageLoader.cpp:\n    3  ofxThreadedImageLoader::ofxThreadedImageLoader(){\n    4  \tnextID = 0;\n    5:     ofAddListener(ofEvents().update, this, &ofxThreadedImageLoader::update);\n    6  \tofAddListener(ofURLResponseEvent(),this,&ofxThreadedImageLoader::urlResponse);\n    7      \n    .\n   14  \timages_to_update.close();\n   15  \twaitForThread(true);\n   16:     ofRemoveListener(ofEvents().update, this, &ofxThreadedImageLoader::update);\n   17  \tofRemoveListener(ofURLResponseEvent(),this,&ofxThreadedImageLoader::urlResponse);\n   18  }\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/events/advancedEventsExample/src/eventsObject.h:\n   19  \n   20  \tvoid enable(){\n   21: \t    ofAddListener(ofEvents().update, this, &eventsObject::update);\n   22  \t}\n   23  \n   24  \tvoid disable(){\n   25: \t    ofRemoveListener(ofEvents().update, this, &eventsObject::update);\n   26  \t}\n   27  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dExample/src/ofxSimpleSlider.cpp:\n   38  \t\n   39  \tif(!bWasSetup){\n   40: \t\tofAddListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   41: \t\tofAddListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   42: \t\tofAddListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   43: \t\tofAddListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   44: \t\tofAddListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   45  \t\tbWasSetup = true;\n   46  \t}\n   ..\n   50  void ofxSimpleSlider::clear(){\n   51  \tif(bWasSetup){\n   52: \t\tofRemoveListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   53: \t\tofRemoveListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   54: \t\tofRemoveListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   55: \t\tofRemoveListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   56: \t\tofRemoveListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   57  \t}\n   58  \tbWasSetup = false;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/noise1dOctaveExample/src/ofxSimpleSlider.cpp:\n   38  \t\n   39  \tif(!bWasSetup){\n   40: \t\tofAddListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   41: \t\tofAddListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   42: \t\tofAddListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   43: \t\tofAddListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   44: \t\tofAddListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   45  \t\tbWasSetup = true;\n   46  \t}\n   ..\n   50  void ofxSimpleSlider::clear(){\n   51  \tif(bWasSetup){\n   52: \t\tofRemoveListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   53: \t\tofRemoveListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   54: \t\tofRemoveListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   55: \t\tofRemoveListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   56: \t\tofRemoveListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   57  \t}\n   58  \tbWasSetup = false;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/math/periodicSignalsExample/src/ofxSimpleSlider.cpp:\n   38  \t\n   39  \tif(!bWasSetup){\n   40: \t\tofAddListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   41: \t\tofAddListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   42: \t\tofAddListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   43: \t\tofAddListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   44: \t\tofAddListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   45  \t\tbWasSetup = true;\n   46  \t}\n   ..\n   50  void ofxSimpleSlider::clear(){\n   51  \tif(bWasSetup){\n   52: \t\tofRemoveListener(ofEvents().draw, this, &ofxSimpleSlider::draw);\n   53: \t\tofRemoveListener(ofEvents().mouseMoved, this, &ofxSimpleSlider::mouseMoved);\n   54: \t\tofRemoveListener(ofEvents().mousePressed, this, &ofxSimpleSlider::mousePressed);\n   55: \t\tofRemoveListener(ofEvents().mouseReleased, this, &ofxSimpleSlider::mouseReleased);\n   56: \t\tofRemoveListener(ofEvents().mouseDragged, this, &ofxSimpleSlider::mouseDragged);\n   57  \t}\n   58  \tbWasSetup = false;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/3d/ofEasyCam.cpp:\n   52  void ofEasyCam::begin(const ofRectangle & _viewport){\n   53  \tif(!bEventsSet){\n   54: \t\tsetEvents(ofEvents());\n   55  \t}\n   56  \tviewport = _viewport;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofAppRunner.cpp:\n  284  //--------------------------------------\n  285  // core events instance & arguments\n  286: ofCoreEvents & ofEvents(){\n  287  \tauto window = mainLoop()->getCurrentWindow();\n  288  \tif(window){\n  ...\n  290  \t}else{\n  291  \t\tif(!exiting()){\n  292: \t\t\tofLogError(\"ofEvents\") << \"Trying to call ofEvents() before a window has been setup\";\n  293  \t\t\tofLogError(\"ofEvents\") << \"We'll return a void events instance to avoid crashes but somethings might not work\";\n  294  \t\t\tofLogError(\"ofEvents\") << \"Set a breakpoint in \" << __FILE__ << \" line \" << __LINE__ << \" to check where is the wrong call\";\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofAppRunner.h:\n  107  void \t\tofSetVerticalSync(bool bSync);\n  108  \n  109: ofCoreEvents & ofEvents();\n  110  void ofSetCurrentRenderer(std::shared_ptr<ofBaseRenderer> renderer,bool setDefaults=false);\n  111  std::shared_ptr<ofBaseRenderer> & ofGetCurrentRenderer();\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEvents.cpp:\n  615  //------------------------------------------\n  616  bool ofSendMessage(ofMessage msg){\n  617: \treturn ofNotifyEvent(ofEvents().messageEvent, msg);\n  618  }\n  619  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEvents.h:\n  432  bool ofSendMessage(std::string messageString);\n  433  \n  434: ofCoreEvents & ofEvents();\n  435  \n  436  template<class ListenerClass>\n  437  void ofRegisterMouseEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  438: \tofAddListener(ofEvents().mouseDragged,listener,&ListenerClass::mouseDragged,prio);\n  439: \tofAddListener(ofEvents().mouseMoved,listener,&ListenerClass::mouseMoved,prio);\n  440: \tofAddListener(ofEvents().mousePressed,listener,&ListenerClass::mousePressed,prio);\n  441: \tofAddListener(ofEvents().mouseReleased,listener,&ListenerClass::mouseReleased,prio);\n  442: \tofAddListener(ofEvents().mouseScrolled,listener,&ListenerClass::mouseScrolled,prio);\n  443: \tofAddListener(ofEvents().mouseEntered,listener,&ListenerClass::mouseEntered,prio);\n  444: \tofAddListener(ofEvents().mouseExited,listener,&ListenerClass::mouseExited,prio);\n  445  }\n  446  \n  447  template<class ListenerClass>\n  448  void ofRegisterKeyEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  449: \tofAddListener(ofEvents().keyPressed, listener, &ListenerClass::keyPressed,prio);\n  450: \tofAddListener(ofEvents().keyReleased, listener, &ListenerClass::keyReleased,prio);\n  451  }\n  452  \n  453  template<class ListenerClass>\n  454  void ofRegisterTouchEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  455: \tofAddListener(ofEvents().touchDoubleTap, listener, &ListenerClass::touchDoubleTap,prio);\n  456: \tofAddListener(ofEvents().touchDown, listener, &ListenerClass::touchDown,prio);\n  457: \tofAddListener(ofEvents().touchMoved, listener, &ListenerClass::touchMoved,prio);\n  458: \tofAddListener(ofEvents().touchUp, listener, &ListenerClass::touchUp,prio);\n  459: \tofAddListener(ofEvents().touchCancelled, listener, &ListenerClass::touchCancelled,prio);\n  460  }\n  461  \n  462  template<class ListenerClass>\n  463  void ofRegisterGetMessages(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  464: \tofAddListener(ofEvents().messageEvent, listener, &ListenerClass::gotMessage,prio);\n  465  }\n  466  \n  467  template<class ListenerClass>\n  468  void ofRegisterDragEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  469: \tofAddListener(ofEvents().fileDragEvent, listener, &ListenerClass::dragEvent,prio);\n  470  }\n  471  \n  472  template<class ListenerClass>\n  473  void ofUnregisterMouseEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  474: \tofRemoveListener(ofEvents().mouseDragged,listener,&ListenerClass::mouseDragged,prio);\n  475: \tofRemoveListener(ofEvents().mouseMoved,listener,&ListenerClass::mouseMoved,prio);\n  476: \tofRemoveListener(ofEvents().mousePressed,listener,&ListenerClass::mousePressed,prio);\n  477: \tofRemoveListener(ofEvents().mouseReleased,listener,&ListenerClass::mouseReleased,prio);\n  478: \tofRemoveListener(ofEvents().mouseScrolled,listener,&ListenerClass::mouseScrolled,prio);\n  479: \tofRemoveListener(ofEvents().mouseEntered,listener,&ListenerClass::mouseEntered,prio);\n  480: \tofRemoveListener(ofEvents().mouseExited,listener,&ListenerClass::mouseExited,prio);\n  481  }\n  482  \n  483  template<class ListenerClass>\n  484  void ofUnregisterKeyEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  485: \tofRemoveListener(ofEvents().keyPressed, listener, &ListenerClass::keyPressed,prio);\n  486: \tofRemoveListener(ofEvents().keyReleased, listener, &ListenerClass::keyReleased,prio);\n  487  }\n  488  \n  489  template<class ListenerClass>\n  490  void ofUnregisterTouchEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  491: \tofRemoveListener(ofEvents().touchDoubleTap, listener, &ListenerClass::touchDoubleTap,prio);\n  492: \tofRemoveListener(ofEvents().touchDown, listener, &ListenerClass::touchDown,prio);\n  493: \tofRemoveListener(ofEvents().touchMoved, listener, &ListenerClass::touchMoved,prio);\n  494: \tofRemoveListener(ofEvents().touchUp, listener, &ListenerClass::touchUp,prio);\n  495: \tofRemoveListener(ofEvents().touchCancelled, listener, &ListenerClass::touchCancelled,prio);\n  496  }\n  497  \n  498  template<class ListenerClass>\n  499  void ofUnregisterGetMessages(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  500: \tofRemoveListener(ofEvents().messageEvent, listener, &ListenerClass::gotMessage,prio);\n  501  }\n  502  \n  503  template<class ListenerClass>\n  504  void ofUnregisterDragEvents(ListenerClass * listener, int prio=OF_EVENT_ORDER_AFTER_APP){\n  505: \tofRemoveListener(ofEvents().fileDragEvent, listener, &ListenerClass::dragEvent,prio);\n  506  }\n  507  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/sound/ofOpenALSoundPlayer.cpp:\n  649  void ofOpenALSoundPlayer::unload(){\n  650  \tstop();\n  651: \tofRemoveListener(ofEvents().update,this,&ofOpenALSoundPlayer::update);\n  652  \n  653  \t// Only lock the thread where necessary.\n  ...\n  854  \tif(sources.empty()) return;\n  855  \tif(bMultiPlay){\n  856: \t\tofAddListener(ofEvents().update,this,&ofOpenALSoundPlayer::update);\n  857  \t}else{\n  858: \t\tofRemoveListener(ofEvents().update,this,&ofOpenALSoundPlayer::update);\n  859  \t}\n  860  }\n  ...\n  901  \n  902  \tif(bMultiPlay){\n  903: \t\tofAddListener(ofEvents().update,this,&ofOpenALSoundPlayer::update);\n  904  \t}\n  905  \tif(isStreaming){\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/utils/ofURLFileLoader.cpp:\n  107  void ofURLFileLoaderImpl::start() {\n  108  \t if (!isThreadRunning()){\n  109: \t\tofAddListener(ofEvents().update,this,&ofURLFileLoaderImpl::update);\n  110  \t\tstartThread();\n  111  \t}\n\n185 matches across 27 files\n\n\nSearching 2312 files for \"window->events()\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.cpp:\n  347  \twindow->renderer()->startRender();\n  348  \tif(bSetupScreen) window->renderer()->setupScreen();\n  349: \twindow->events().notifySetup();\n  350  \twindow->renderer()->finishRender();\n  351  \tappSetup = true;\n  ...\n  358      sWindowHeight = h;\n  359      ofLogNotice(\"ofAppAndroidWindow\") << \"resize \" << w << \"x\" << h;\n  360:     window->events().notifyWindowResized(w,h);\n  361  }\n  362  \n  ...\n  366  {\n  367  \texit(0);\n  368: \t//window->events().notifyExit();\n  369  }\n  370  \n  ...\n  385  \t\t\tswitch(events.front().type){\n  386  \t\t\tcase ofTouchEventArgs::down:\n  387: \t\t\t\twindow->events().notifyMousePressed(events.front().x,events.front().y,0);\n  388: \t\t\t\tofNotifyEvent(window->events().touchDown,events.front());\n  389  \t\t\t\tbreak;\n  390  \t\t\tcase ofTouchEventArgs::up:\n  391: \t\t\t\twindow->events().notifyMouseReleased(events.front().x,events.front().y,0);\n  392: \t\t\t\tofNotifyEvent(window->events().touchUp,events.front());\n  393  \t\t\t\tbreak;\n  394  \t\t\tcase ofTouchEventArgs::move:\n  395: \t\t\t\twindow->events().notifyMouseMoved(events.front().x,events.front().y);\n  396: \t\t\t\twindow->events().notifyMouseDragged(events.front().x,events.front().y,0);\n  397: \t\t\t\tofNotifyEvent(window->events().touchMoved,events.front());\n  398  \t\t\t\tbreak;\n  399  \t\t\tcase ofTouchEventArgs::doubleTap:\n  400: \t\t\t\tofNotifyEvent(window->events().touchDoubleTap,events.front());\n  401  \t\t\t\tbreak;\n  402  \t\t\tcase ofTouchEventArgs::cancel:\n  403: \t\t\t\tofNotifyEvent(window->events().touchCancelled,events.front());\n  404  \t\t\t\tbreak;\n  405  \t\t\t}\n  ...\n  410  \n  411  \twindow->renderer()->startRender();\n  412: \twindow->events().notifyUpdate();\n  413  \tif(bSetupScreen) window->renderer()->setupScreen();\n  414: \twindow->events().notifyDraw();\n  415  \twindow->renderer()->finishRender();\n  416  \n  ...\n  429  \ttouch.type = ofTouchEventArgs::down;\n  430  \tif(threadedTouchEvents){\n  431: \t\twindow->events().notifyMousePressed(x,y,0);\n  432: \t\tofNotifyEvent(window->events().touchDown,touch);\n  433  \t}else{\n  434  \t\tmtx.lock();\n  ...\n  450  \ttouch.type = ofTouchEventArgs::up;\n  451  \tif(threadedTouchEvents){\n  452: \t\twindow->events().notifyMouseReleased(x,y,0);\n  453: \t\tofNotifyEvent(window->events().touchUp,touch);\n  454  \t}else{\n  455  \t\tmtx.lock();\n  ...\n  468  \ttouch.type = ofTouchEventArgs::cancel;\n  469  \tif(threadedTouchEvents){\n  470: \t\tofNotifyEvent(window->events().touchCancelled,touch);\n  471  \t}else{\n  472  \t\tmtx.lock();\n  ...\n  488  \ttouch.type = ofTouchEventArgs::move;\n  489  \tif(threadedTouchEvents){\n  490: \t\twindow->events().notifyMouseMoved(x,y);\n  491: \t\twindow->events().notifyMouseDragged(x,y,0);\n  492: \t\tofNotifyEvent(window->events().touchMoved,touch);\n  493  \t}else{\n  494  \t\tmtx.lock();\n  ...\n  511  \ttouch.type = ofTouchEventArgs::doubleTap;\n  512  \tif(threadedTouchEvents){\n  513: \t\twindow->events().notifyMousePressed(x,y,0);\n  514: \t\tofNotifyEvent(window->events().touchDoubleTap,touch);\n  515  \t}else{\n  516  \t\tmtx.lock();\n  ...\n  552      key.scancode = keyCode;\n  553      key.codepoint = unicode;\n  554:     return window->events().notifyKeyEvent(key);\n  555  }\n  556  \n  ...\n  563      key.scancode = keyCode;\n  564      key.codepoint = unicode;\n  565:     return window->events().notifyKeyEvent(key);\n  566  }\n  567  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/examples/windowing/multiWindowOneAppExample/src/main.cpp:\n   21  \tshared_ptr<ofApp> mainApp(new ofApp);\n   22  \tmainApp->setupGui();\n   23: \tofAddListener(guiWindow->events().draw,mainApp.get(),&ofApp::drawGui);\n   24  \n   25  \tofRunApp(mainWindow, mainApp);\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofAppRunner.cpp:\n  287  \tauto window = mainLoop()->getCurrentWindow();\n  288  \tif(window){\n  289: \t\treturn window->events();\n  290  \t}else{\n  291  \t\tif(!exiting()){\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofMainLoop.cpp:\n   70  \twindowsApps[window] = app;\n   71  \tif(app){\n   72: \t\tofAddListener(window->events().setup,app.get(),&ofBaseApp::setup,OF_EVENT_ORDER_APP);\n   73: \t\tofAddListener(window->events().update,app.get(),&ofBaseApp::update,OF_EVENT_ORDER_APP);\n   74: \t\tofAddListener(window->events().draw,app.get(),&ofBaseApp::draw,OF_EVENT_ORDER_APP);\n   75: \t\tofAddListener(window->events().exit,app.get(),&ofBaseApp::exit,OF_EVENT_ORDER_APP);\n   76: \t\tofAddListener(window->events().keyPressed,app.get(),&ofBaseApp::keyPressed,OF_EVENT_ORDER_APP);\n   77: \t\tofAddListener(window->events().keyReleased,app.get(),&ofBaseApp::keyReleased,OF_EVENT_ORDER_APP);\n   78: \t\tofAddListener(window->events().mouseMoved,app.get(),&ofBaseApp::mouseMoved,OF_EVENT_ORDER_APP);\n   79: \t\tofAddListener(window->events().mouseDragged,app.get(),&ofBaseApp::mouseDragged,OF_EVENT_ORDER_APP);\n   80: \t\tofAddListener(window->events().mousePressed,app.get(),&ofBaseApp::mousePressed,OF_EVENT_ORDER_APP);\n   81: \t\tofAddListener(window->events().mouseReleased,app.get(),&ofBaseApp::mouseReleased,OF_EVENT_ORDER_APP);\n   82: \t\tofAddListener(window->events().mouseScrolled,app.get(),&ofBaseApp::mouseScrolled,OF_EVENT_ORDER_APP);\n   83: \t\tofAddListener(window->events().mouseEntered,app.get(),&ofBaseApp::mouseEntered,OF_EVENT_ORDER_APP);\n   84: \t\tofAddListener(window->events().mouseExited,app.get(),&ofBaseApp::mouseExited,OF_EVENT_ORDER_APP);\n   85: \t\tofAddListener(window->events().windowResized,app.get(),&ofBaseApp::windowResized,OF_EVENT_ORDER_APP);\n   86: \t\tofAddListener(window->events().messageEvent,app.get(),&ofBaseApp::messageReceived,OF_EVENT_ORDER_APP);\n   87: \t\tofAddListener(window->events().fileDragEvent,app.get(),&ofBaseApp::dragged,OF_EVENT_ORDER_APP);\n   88: \t\tofAddListener(window->events().touchCancelled,app.get(),&ofBaseApp::touchCancelled,OF_EVENT_ORDER_APP);\n   89: \t\tofAddListener(window->events().touchDoubleTap,app.get(),&ofBaseApp::touchDoubleTap,OF_EVENT_ORDER_APP);\n   90: \t\tofAddListener(window->events().touchDown,app.get(),&ofBaseApp::touchDown,OF_EVENT_ORDER_APP);\n   91: \t\tofAddListener(window->events().touchMoved,app.get(),&ofBaseApp::touchMoved,OF_EVENT_ORDER_APP);\n   92: \t\tofAddListener(window->events().touchUp,app.get(),&ofBaseApp::touchUp,OF_EVENT_ORDER_APP);\n   93  #ifdef TARGET_ANDROID\n   94  \t\tauto androidApp = dynamic_cast<ofxAndroidApp*>(app.get());\n   ..\n  110  \twindow->makeCurrent();\n  111  \tif(!windowLoop){\n  112: \t\twindow->events().notifySetup();\n  113  \t}\n  114  }\n  ...\n  171  \n  172  \t\tofEventArgs args;\n  173: \t\tofNotifyEvent(window->events().exit, args, this);\n  174  \n  175: \t\tofRemoveListener(window->events().setup,app.get(),&ofBaseApp::setup,OF_EVENT_ORDER_APP);\n  176: \t\tofRemoveListener(window->events().update,app.get(),&ofBaseApp::update,OF_EVENT_ORDER_APP);\n  177: \t\tofRemoveListener(window->events().draw,app.get(),&ofBaseApp::draw,OF_EVENT_ORDER_APP);\n  178: \t\tofRemoveListener(window->events().exit,app.get(),&ofBaseApp::exit,OF_EVENT_ORDER_APP);\n  179: \t\tofRemoveListener(window->events().keyPressed,app.get(),&ofBaseApp::keyPressed,OF_EVENT_ORDER_APP);\n  180: \t\tofRemoveListener(window->events().keyReleased,app.get(),&ofBaseApp::keyReleased,OF_EVENT_ORDER_APP);\n  181: \t\tofRemoveListener(window->events().mouseMoved,app.get(),&ofBaseApp::mouseMoved,OF_EVENT_ORDER_APP);\n  182: \t\tofRemoveListener(window->events().mouseDragged,app.get(),&ofBaseApp::mouseDragged,OF_EVENT_ORDER_APP);\n  183: \t\tofRemoveListener(window->events().mousePressed,app.get(),&ofBaseApp::mousePressed,OF_EVENT_ORDER_APP);\n  184: \t\tofRemoveListener(window->events().mouseReleased,app.get(),&ofBaseApp::mouseReleased,OF_EVENT_ORDER_APP);\n  185: \t\tofRemoveListener(window->events().mouseScrolled,app.get(),&ofBaseApp::mouseScrolled,OF_EVENT_ORDER_APP);\n  186: \t\tofRemoveListener(window->events().mouseEntered,app.get(),&ofBaseApp::mouseEntered,OF_EVENT_ORDER_APP);\n  187: \t\tofRemoveListener(window->events().mouseExited,app.get(),&ofBaseApp::mouseExited,OF_EVENT_ORDER_APP);\n  188: \t\tofRemoveListener(window->events().windowResized,app.get(),&ofBaseApp::windowResized,OF_EVENT_ORDER_APP);\n  189: \t\tofRemoveListener(window->events().messageEvent,app.get(),&ofBaseApp::messageReceived,OF_EVENT_ORDER_APP);\n  190: \t\tofRemoveListener(window->events().fileDragEvent,app.get(),&ofBaseApp::dragged,OF_EVENT_ORDER_APP);\n  191: \t\tofRemoveListener(window->events().touchCancelled,app.get(),&ofBaseApp::touchCancelled,OF_EVENT_ORDER_APP);\n  192: \t\tofRemoveListener(window->events().touchDoubleTap,app.get(),&ofBaseApp::touchDoubleTap,OF_EVENT_ORDER_APP);\n  193: \t\tofRemoveListener(window->events().touchDown,app.get(),&ofBaseApp::touchDown,OF_EVENT_ORDER_APP);\n  194: \t\tofRemoveListener(window->events().touchMoved,app.get(),&ofBaseApp::touchMoved,OF_EVENT_ORDER_APP);\n  195: \t\tofRemoveListener(window->events().touchUp,app.get(),&ofBaseApp::touchUp,OF_EVENT_ORDER_APP);\n  196  #ifdef TARGET_ANDROID\n  197  \t\tauto androidApp = dynamic_cast<ofxAndroidApp*>(app.get());\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/app/ofMainLoop.h:\n   29  \t\twindowsApps[window] = std::shared_ptr<ofBaseApp>();\n   30  \t\tcurrentWindow = window;\n   31: \t\tofAddListener(window->events().keyPressed,this,&ofMainLoop::keyPressed);\n   32  \t}\n   33  \n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/events/ofEvents.cpp:\n   13  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   14  \tif(window){\n   15: \t\twindow->events().setFrameRate(targetRate);\n   16  \t}else{\n   17  \t\tofLogWarning(\"ofEvents\") << \"Trying to set framerate before mainloop is ready\";\n   ..\n   23  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   24  \tif(window){\n   25: \t\treturn window->events().getFrameRate();\n   26  \t}else{\n   27  \t\treturn 0.f;\n   ..\n   33  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   34  \tif(window){\n   35: \t\treturn window->events().getTargetFrameRate();\n   36  \t}else{\n   37  \t\treturn 0.f;\n   ..\n   43  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   44  \tif(window){\n   45: \t\treturn window->events().getLastFrameTime();\n   46  \t}else{\n   47  \t\treturn 0.f;\n   ..\n   53  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   54  \tif(window){\n   55: \t\treturn window->events().getFrameNum();\n   56  \t}else{\n   57  \t\treturn 0;\n   ..\n   63  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   64  \tif(window){\n   65: \t\treturn window->events().getMousePressed(button);\n   66  \t}else{\n   67  \t\treturn false;\n   ..\n   73  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   74  \tif(window){\n   75: \t\treturn window->events().getKeyPressed(key);\n   76  \t}else{\n   77  \t\treturn false;\n   ..\n   83  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   84  \tif(window){\n   85: \t\treturn window->events().getMouseX();\n   86  \t}else{\n   87  \t\treturn 0;\n   ..\n   93  \tauto window = ofGetMainLoop()->getCurrentWindow();\n   94  \tif(window){\n   95: \t\treturn window->events().getMouseY();\n   96  \t}else{\n   97  \t\treturn 0;\n   ..\n  103  \tauto window = ofGetMainLoop()->getCurrentWindow();\n  104  \tif(window){\n  105: \t\treturn window->events().getPreviousMouseX();\n  106  \t}else{\n  107  \t\treturn 0;\n  ...\n  113  \tauto window = ofGetMainLoop()->getCurrentWindow();\n  114  \tif(window){\n  115: \t\treturn window->events().getPreviousMouseY();\n  116  \t}else{\n  117  \t\treturn 0;\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/utils/ofUtils.cpp:\n  298  \t\treturn;\n  299  \t}\n  300: \twindow->events().setTimeModeSystem();\n  301  \tof::priv::getClock().setTimeModeSystem();\n  302  }\n  ...\n  314  \t\treturn;\n  315  \t}\n  316: \twindow->events().setTimeModeFixedRate(stepNanos);\n  317  \tof::priv::getClock().setTimeModeFixedRate(stepNanos, *mainLoop);\n  318  }\n  ...\n  330  \t\treturn;\n  331  \t}\n  332: \twindow->events().setTimeModeFiltered(alpha);\n  333  \tof::priv::getClock().setTimeModeSystem();\n  334  }\n\n87 matches across 7 files\n\n\nSearching 2312 files for \"ofEvents().notifyExit();\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.cpp:\n  300  Java_cc_openframeworks_OFAndroid_onDestroy( JNIEnv*  env, jclass  thiz ){\n  301  \tappSetup = false;\n  302: \tofEvents().notifyExit();\n  303  \tofExitCallback();\n  304  }\n\n1 match in 1 file\n\n\nSearching 2312 files for \"ofEvents().notify\"\n\n/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.cpp:\n  300  Java_cc_openframeworks_OFAndroid_onDestroy( JNIEnv*  env, jclass  thiz ){\n  301  \tappSetup = false;\n  302: \tofEvents().notifyExit();\n  303  \tofExitCallback();\n  304  }\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 118110,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.cpp",
			"settings":
			{
				"buffer_size": 16494,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.h",
			"settings":
			{
				"buffer_size": 1598,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppGlutWindow.cpp",
			"settings":
			{
				"buffer_size": 25246,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppGlutWindow.h",
			"settings":
			{
				"buffer_size": 2393,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppBaseWindow.h",
			"settings":
			{
				"buffer_size": 3659,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/events/ofEvents.cpp",
			"settings":
			{
				"buffer_size": 16891,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppRunner.cpp",
			"settings":
			{
				"buffer_size": 14039,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/examples/math/periodicSignalsExample/src/ofxSimpleSlider.cpp",
			"settings":
			{
				"buffer_size": 5360,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/app/ofMainLoop.cpp",
			"settings":
			{
				"buffer_size": 10938,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ext/openFrameworks/libs/openFrameworks/events/ofEventUtils.h",
			"settings":
			{
				"buffer_size": 10025,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 750.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ruby",
				"Set Syntax: Ruby"
			],
			[
				"rub",
				"Set Syntax: Ruby"
			],
			[
				"synt rub",
				"Set Syntax: Ruby"
			],
			[
				"auto",
				"Toggle AutoSave: current file only"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"gig",
				"Git GUI Clients: Gitg"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"yaml",
				"Set Syntax: YAML"
			],
			[
				"krake",
				"Git GUI Clients: GitKraken"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"gitg",
				"Git GUI Clients: Gitg"
			],
			[
				"g",
				"Git GUI Clients: Gitg"
			],
			[
				"view as",
				"SublimeHighlight: view as HTML"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"convert to html",
				"SublimeHighlight: convert to HTML"
			],
			[
				"convert",
				"SublimeHighlight: convert to RTF"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"packge remove",
				"Package Control: Remove Package"
			],
			[
				"list ",
				"Package Control: List Packages"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"enable ",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"add repo",
				"Package Control: Add Repository"
			],
			[
				"packgae",
				"Package Control: List Packages"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"gitgui",
				"Git GUI Clients: Gitg"
			],
			[
				"makefil",
				"Set Syntax: Makefile"
			],
			[
				"ging",
				"Git GUI Clients: Gitg"
			],
			[
				"yam",
				"Set Syntax: YAML"
			],
			[
				"pacage",
				"Package Control: Enable Package"
			],
			[
				"amke",
				"Set Syntax: Makefile"
			],
			[
				"makefile",
				"Set Syntax: Makefile"
			],
			[
				"c++",
				"Set Syntax: Objective-C++"
			],
			[
				"objec",
				"Set Syntax: Objective-C"
			],
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"makef",
				"Set Syntax: Makefile"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"irb",
				"SublimeREPL: Ruby IRB (deprecated)"
			],
			[
				"ruby ",
				"SublimeREPL: Ruby"
			],
			[
				"python",
				"SublimeREPL: Python"
			],
			[
				"r oc",
				"SublimeREPL: Octave"
			],
			[
				"repl o",
				"SublimeREPL: Octave"
			],
			[
				"octav",
				"SublimeREPL: Octave"
			],
			[
				"repl ruby",
				"SublimeREPL: Ruby"
			],
			[
				"repl ru",
				"SublimeREPL: Ruby"
			],
			[
				"repl",
				"SublimeREPL: Octave"
			],
			[
				"repl rub",
				"SublimeREPL: Ruby"
			],
			[
				"repl j",
				"SublimeREPL: Clojure"
			],
			[
				"mal",
				"Set Syntax: MATLAB"
			],
			[
				"matl",
				"Set Syntax: MATLAB"
			],
			[
				"keyb",
				"Preferences: Key Bindings - User"
			],
			[
				"mat",
				"Set Syntax: MATLAB"
			],
			[
				"package en",
				"Package Control: Upgrade Package"
			],
			[
				"package dis",
				"Package Control: Disable Package"
			],
			[
				"matlab",
				"Set Syntax: MATLAB"
			],
			[
				"repl oca",
				"SublimeREPL: Octave"
			],
			[
				"repl octa",
				"SublimeREPL: Octave"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"text",
				"Set Syntax: Plain Text"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"todo",
				"Show TODOs: Project and open files"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"pla",
				"Set Syntax: Plain Text"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"tod",
				"Show TODOs: Project and open files"
			],
			[
				"to",
				"Show TODOs: Project and open files"
			],
			[
				"",
				"About"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"log",
				"Git: Log Current File"
			],
			[
				"st",
				"Git: Status"
			],
			[
				"stat",
				"Git: Status"
			],
			[
				"pre",
				"Markdown Preview: preview in Browser"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pr",
				"Markdown Preview: preview in Browser"
			],
			[
				"previe",
				"Markdown Preview: preview in Browser"
			],
			[
				"snipp",
				"Snippet: if … end"
			],
			[
				"snip",
				"Snippet: YAML.load(file)"
			],
			[
				"prefer",
				"Preferences: Settings - User"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"vie",
				"Markdown Preview: preview in Browser"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"reve",
				"File: Revert"
			],
			[
				"markdown",
				"Markdown Preview: preview in Sublime Text"
			],
			[
				"view",
				"Markdown Preview: preview in Browser"
			],
			[
				"prev",
				"Markdown Preview: preview in Browser"
			],
			[
				"smark",
				"Set Syntax: Markdown"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"bro",
				"Preferences: Browse Packages"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"fet",
				"Git: Fetch"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"syntax te",
				"Set Syntax: Textile"
			],
			[
				"lo",
				"Git: Log All"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"oto",
				"Show TODOs: Open files only"
			],
			[
				"show",
				"Show TODOs: Project and open files"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"pcaka",
				"Package Control: Install Package"
			],
			[
				"pcak",
				"Package Control: Discover Packages"
			],
			[
				"anno",
				"Git: Toggle Annotations"
			]
		],
		"width": 1062.0
	},
	"console":
	{
		"height": 259.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/ravenskrag/Desktop/gem_structure",
		"/home/ravenskrag/Desktop/gem_structure/lib"
	],
	"file_history":
	[
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxPoco/libs/poco/include/Poco/DOM/EventDispatcher.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/serialization/RubyOF/text.rb",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/meta.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/serialization/RubyOF/font.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/monkey_patches/Chipmunk/BB.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/monkey_patches/Chipmunk/Vec2.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/bin/data/data.yml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/live_coding/code/body_main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/live_coding/code/body_init.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/sketch/resuming_fiber.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/livecoding/test_job.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/livecoding/livecoding_job.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/livecoding/livecoding_core.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/livecoding/livecoding_init.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/entities/text.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/live_coding/code/test.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/live_coding/code_loader.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/live_coding/code/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/entities/entity.rb",
		"/home/ravenskrag/.profile",
		"/home/ravenskrag/.bash_profile",
		"/home/ravenskrag/.bashrc",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/sketch/lib/repl.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecoding/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/livecoding/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/app_factory.h",
		"/home/ravenskrag/Desktop/gem_structure/Rakefile",
		"/home/ravenskrag/Desktop/gem_structure/rake/oF_core.rake",
		"/home/ravenskrag/Desktop/gem_structure/rake/oF_deps.rake",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/bin/data/settings.xml",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxImGui/example-demo/bin/imgui.ini",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/image.cpp",
		"/home/ravenskrag/Desktop/gem_structure/build_system.sublime-workspace",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiValuePlotter.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/src/ofxGuiExtended.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/exampleAdvancedGui/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofTessellator.h",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworks/graphics/ofTessellator.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxBaseGui.cpp",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGui/src/ofxInputField.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/rake/clean_and_clobber.rb",
		"/home/ravenskrag/Desktop/gem_structure/rake/extension_builder.rb",
		"/home/ravenskrag/Desktop/gem_structure/rake/extension.rake",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/testApp/Makefile.static_lib",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/window/extconf.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/c_extension/app_factory.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/c_extension/app.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/c_extension/app.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/c_extension/constants/data_path.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/c_extension/extconf_variables.yaml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/c_extension/extconf.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/testApp/oF_build_variables.yaml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/Makefile.static_lib",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/Makefile",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/addons.make",
		"/home/ravenskrag/Desktop/gem_structure/rake/helper_functions.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/testApp/addons.yaml",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/c_extension/callbacks.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/boilerplate/config/build_variables.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/boilerplate/ext/window/constants/data_path.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/window/constants/data_path.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/testApp/Makefile",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/config.make",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/testApp/addons.make",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/addons.make",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/src/app.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/src/app.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/src/app_factory.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/Makefile",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/addons_app/testApp/config.make",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/Makefile",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/config.make",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/addons.make",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/src/main.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/callbacks/extconf.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/Makefile.static_lib",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/addons_app/testApp/Makefile.static_lib",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/src/ofApp.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/src/ofApp.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/new/projectApp/src/main.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/launcher.h",
		"/home/ravenskrag/Desktop/gem_structure/lib_diff.txt",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/lib/dump.txt",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/rubyOF.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/config.make",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/README.txt",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/callbacks/callbacks.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/callbacks/callbacks.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/addons.make",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxDatGui/src/ofxDatGui.h",
		"/home/ravenskrag/Desktop/gem_structure/.gitignore",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/obj/linux64/Release/.compiler_flags",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/obj/linux64/Debug/.compiler_flags",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/apps/devApps/VboExample/makefile",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworksCompiled/project/makefileCommon/compile.core.mk",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxInfiniteCanvas/addon_config.mk",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworksCompiled/project/makefileCommon/config.addons.mk",
		"/home/ravenskrag/Desktop/gem_structure/ext/oF_apps/testApp/Makefile",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/openFrameworksCompiled/project/makefileCommon/config.project.mk",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxAssimpModelLoader/addon_config.mk",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/obj/linux64/Debug/ofxGui/src/ofxBaseGui.d",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/color.rb",
		"/home/ravenskrag/Desktop/gem_structure/lib/rubyOF/freezable.rb",
		"/home/ravenskrag/Desktop/gem_structure/build/project_generator.rb",
		"/home/ravenskrag/Desktop/gem_structure/build/extension_loader.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/addons/ofxGuiExtended/exampleAdvancedGui/src/main.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/round_tripping/lib/window.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/round_tripping/ext/callbacks/callbacks.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/round_tripping/ext/window/app.cpp",
		"/home/ravenskrag/Desktop/gem_structure/ext/rubyOF/launcher.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/boilerplate/ext/window/app_factory.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/window/app_factory.cpp",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/boilerplate/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/ext/openFrameworks/libs/tess2/include/tesselator.h",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/ext/window/app.cpp",
		"/home/ravenskrag/Desktop/gem_structure/build/window_guard.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/database/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/example/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/hunspell/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/round_tripping/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/youtube/lib/main.rb",
		"/home/ravenskrag/Desktop/gem_structure/bin/projects/hunspell/lib/window.rb"
	],
	"find":
	{
		"height": 49.0
	},
	"find_in_files":
	{
		"height": 264.0,
		"where_history":
		[
			"*.cpp,*.h",
			"",
			"*.h",
			"*.cpp,*.h",
			"*.rb",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"commit_verts",
			"special_key",
			"special",
			"instance->events().notify",
			"event",
			"pollevents",
			"event",
			"ofevent",
			"ofEvents().notify",
			"ofEvents().notifyExit();",
			"window->events()",
			"ofEvents()",
			"class EventType",
			"EventType",
			"ofAddListener",
			"addevent",
			"keyPressed",
			"fbo.new",
			"OF_KEY",
			"OF_KEY_BACKSPACE",
			"@storage[:fonts]",
			"load",
			"private :load",
			"def load",
			"load",
			"def load",
			"private :load",
			"private",
			"klass",
			"RubyOF::ResourceManager",
			"ranges",
			"=> ",
			"flag_or_obj",
			"flag",
			"TrueTypeFontSettings",
			"alphabet",
			"ranges",
			".exception",
			".e",
			"FBO.new"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/rubyOF/resource_manager.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1214,
						"regions":
						{
						},
						"selection":
						[
							[
								412,
								413
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1142,
										1145
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										286,
										289
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "bin/projects/example/ext/window/app.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8025,
						"regions":
						{
						},
						"selection":
						[
							[
								5806,
								5806
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5839,
										5840
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4944,
										4945
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5715.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 242,
						"regions":
						{
						},
						"selection":
						[
							[
								242,
								242
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Ruby/Ruby.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"git_gutter_is_enabled": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 303,
						"regions":
						{
						},
						"selection":
						[
							[
								303,
								303
							]
						],
						"settings":
						{
							"auto_name": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/rubyOF/rectangle.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2226,
						"regions":
						{
						},
						"selection":
						[
							[
								387,
								387
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										384,
										387
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										305,
										308
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/rubyOF/true_type_font.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6022,
						"regions":
						{
						},
						"selection":
						[
							[
								2655,
								2655
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3069,
										3072
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										2658,
										2661
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2880.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "bin/projects/youtube/lib/monkey_patches/Chipmunk/Shape/Rect.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14514,
						"regions":
						{
						},
						"selection":
						[
							[
								410,
								410
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										30,
										35
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "bin/projects/youtube/lib/monkey_patches/Chipmunk/Shape/Poly.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1641,
						"regions":
						{
						},
						"selection":
						[
							[
								784,
								784
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										883,
										886
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										779,
										781
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "ext/rubyOF/TrueTypeFont.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6950,
						"regions":
						{
						},
						"selection":
						[
							[
								3649,
								3649
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3755,
										3756
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										3641,
										3642
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "ext/rubyOF/TrueTypeFont.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 125,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/rubyOF/color.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 243,
						"regions":
						{
						},
						"selection":
						[
							[
								242,
								242
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										239,
										242
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										6
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "bin/main.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1815,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "build/window_guard.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 922,
						"regions":
						{
						},
						"selection":
						[
							[
								811,
								811
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										918,
										921
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										199,
										204
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "bin/projects/example/lib/window.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11726,
						"regions":
						{
						},
						"selection":
						[
							[
								8518,
								8518
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8517,
										8518
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										8516,
										8517
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9200.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "lib/rubyOF.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2506,
						"regions":
						{
						},
						"selection":
						[
							[
								960,
								960
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										983,
										984
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										810,
										811
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 672.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 17,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "---",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 564,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"git_gutter_is_enabled": false,
							"rainbowth.lispy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "ext/openFrameworks/libs/openFrameworks/events/ofEvents.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14222,
						"regions":
						{
						},
						"selection":
						[
							[
								3015,
								3015
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3016,
										3017
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1008,
										1009
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2208.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "lib/rubyOF/button_event_codes.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2340,
						"regions":
						{
						},
						"selection":
						[
							[
								793,
								793
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/User/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 20,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 118110,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										241,
										249
									],
									[
										506,
										514
									],
									[
										758,
										766
									],
									[
										1023,
										1031
									],
									[
										1329,
										1337
									],
									[
										1737,
										1745
									],
									[
										2212,
										2220
									],
									[
										2538,
										2546
									],
									[
										2937,
										2945
									],
									[
										3152,
										3160
									],
									[
										3530,
										3538
									],
									[
										3729,
										3737
									],
									[
										4043,
										4051
									],
									[
										4181,
										4189
									],
									[
										4319,
										4327
									],
									[
										4726,
										4734
									],
									[
										4945,
										4953
									],
									[
										5205,
										5213
									],
									[
										5353,
										5361
									],
									[
										5499,
										5507
									],
									[
										5812,
										5820
									],
									[
										6194,
										6207
									],
									[
										6451,
										6464
									],
									[
										6535,
										6548
									],
									[
										6900,
										6913
									],
									[
										6999,
										7012
									],
									[
										7303,
										7316
									],
									[
										7398,
										7411
									],
									[
										7643,
										7656
									],
									[
										7719,
										7732
									],
									[
										7791,
										7804
									],
									[
										8069,
										8082
									],
									[
										8271,
										8284
									],
									[
										8379,
										8392
									],
									[
										8772,
										8785
									],
									[
										9013,
										9026
									],
									[
										9360,
										9373
									],
									[
										9710,
										9723
									],
									[
										9973,
										9986
									],
									[
										10307,
										10320
									],
									[
										10592,
										10605
									],
									[
										10657,
										10670
									],
									[
										10730,
										10743
									],
									[
										10966,
										10979
									],
									[
										11200,
										11213
									],
									[
										11271,
										11284
									],
									[
										11373,
										11386
									],
									[
										11629,
										11642
									],
									[
										11866,
										11879
									],
									[
										12100,
										12113
									],
									[
										12321,
										12334
									],
									[
										12609,
										12622
									],
									[
										12855,
										12868
									],
									[
										12920,
										12933
									],
									[
										12987,
										13000
									],
									[
										13076,
										13089
									],
									[
										13139,
										13152
									],
									[
										13264,
										13277
									],
									[
										13389,
										13402
									],
									[
										13500,
										13513
									],
									[
										13828,
										13841
									],
									[
										13889,
										13902
									],
									[
										14116,
										14129
									],
									[
										14184,
										14197
									],
									[
										14503,
										14516
									],
									[
										14704,
										14717
									],
									[
										14905,
										14918
									],
									[
										15106,
										15119
									],
									[
										15378,
										15391
									],
									[
										15658,
										15671
									],
									[
										15742,
										15755
									],
									[
										15828,
										15841
									],
									[
										15910,
										15923
									],
									[
										16031,
										16044
									],
									[
										16128,
										16141
									],
									[
										16227,
										16240
									],
									[
										16497,
										16510
									],
									[
										16624,
										16637
									],
									[
										16717,
										16730
									],
									[
										16814,
										16827
									],
									[
										16911,
										16924
									],
									[
										17010,
										17023
									],
									[
										17109,
										17122
									],
									[
										17373,
										17386
									],
									[
										17455,
										17468
									],
									[
										17535,
										17548
									],
									[
										17654,
										17667
									],
									[
										17751,
										17764
									],
									[
										17850,
										17863
									],
									[
										17949,
										17962
									],
									[
										18265,
										18278
									],
									[
										18674,
										18687
									],
									[
										18841,
										18854
									],
									[
										19007,
										19020
									],
									[
										19175,
										19188
									],
									[
										19678,
										19691
									],
									[
										19849,
										19862
									],
									[
										20257,
										20270
									],
									[
										20633,
										20646
									],
									[
										20714,
										20727
									],
									[
										21052,
										21065
									],
									[
										21319,
										21332
									],
									[
										21402,
										21415
									],
									[
										21653,
										21666
									],
									[
										21937,
										21950
									],
									[
										22085,
										22098
									],
									[
										22312,
										22325
									],
									[
										22443,
										22456
									],
									[
										22719,
										22732
									],
									[
										23296,
										23309
									],
									[
										23830,
										23843
									],
									[
										23901,
										23914
									],
									[
										23984,
										23997
									],
									[
										24071,
										24084
									],
									[
										24160,
										24173
									],
									[
										24436,
										24449
									],
									[
										24507,
										24520
									],
									[
										24590,
										24603
									],
									[
										24677,
										24690
									],
									[
										24766,
										24779
									],
									[
										25044,
										25057
									],
									[
										25115,
										25128
									],
									[
										25198,
										25211
									],
									[
										25285,
										25298
									],
									[
										25374,
										25387
									],
									[
										25689,
										25702
									],
									[
										25967,
										25980
									],
									[
										26062,
										26075
									],
									[
										26159,
										26172
									],
									[
										26252,
										26265
									],
									[
										26345,
										26358
									],
									[
										26450,
										26463
									],
									[
										26557,
										26570
									],
									[
										26662,
										26675
									],
									[
										26771,
										26784
									],
									[
										26880,
										26893
									],
									[
										26991,
										27004
									],
									[
										27102,
										27115
									],
									[
										27211,
										27224
									],
									[
										27318,
										27331
									],
									[
										27429,
										27442
									],
									[
										27541,
										27554
									],
									[
										27646,
										27659
									],
									[
										27759,
										27772
									],
									[
										27872,
										27885
									],
									[
										27975,
										27988
									],
									[
										28080,
										28093
									],
									[
										28302,
										28315
									],
									[
										28413,
										28426
									],
									[
										28532,
										28545
									],
									[
										28647,
										28660
									],
									[
										28777,
										28790
									],
									[
										28880,
										28893
									],
									[
										28985,
										28998
									],
									[
										29094,
										29107
									],
									[
										29203,
										29216
									],
									[
										29306,
										29319
									],
									[
										29667,
										29680
									],
									[
										29997,
										30010
									],
									[
										30088,
										30101
									],
									[
										30175,
										30188
									],
									[
										30266,
										30279
									],
									[
										30359,
										30372
									],
									[
										30452,
										30465
									],
									[
										30543,
										30556
									],
									[
										30780,
										30793
									],
									[
										30869,
										30882
									],
									[
										31110,
										31123
									],
									[
										31207,
										31220
									],
									[
										31294,
										31307
									],
									[
										31383,
										31396
									],
									[
										31466,
										31479
									],
									[
										31713,
										31726
									],
									[
										31953,
										31966
									],
									[
										32254,
										32267
									],
									[
										32407,
										32420
									],
									[
										32786,
										32799
									],
									[
										33112,
										33125
									],
									[
										33439,
										33452
									],
									[
										33795,
										33808
									],
									[
										34174,
										34187
									],
									[
										34500,
										34513
									],
									[
										34827,
										34840
									],
									[
										35162,
										35175
									],
									[
										35464,
										35477
									],
									[
										35706,
										35719
									],
									[
										35949,
										35962
									],
									[
										36228,
										36241
									],
									[
										36530,
										36543
									],
									[
										36774,
										36787
									],
									[
										37019,
										37032
									],
									[
										37320,
										37333
									],
									[
										37625,
										37638
									],
									[
										37800,
										37813
									],
									[
										37975,
										37988
									],
									[
										38150,
										38163
									],
									[
										38305,
										38318
									],
									[
										38540,
										38553
									],
									[
										38688,
										38701
									],
									[
										38850,
										38863
									],
									[
										39012,
										39025
									],
									[
										39157,
										39170
									],
									[
										39297,
										39310
									],
									[
										39556,
										39569
									],
									[
										39854,
										39867
									],
									[
										40108,
										40121
									],
									[
										40201,
										40214
									],
									[
										40374,
										40387
									],
									[
										40467,
										40480
									],
									[
										40633,
										40646
									],
									[
										40729,
										40742
									],
									[
										40898,
										40911
									],
									[
										40994,
										41007
									],
									[
										41263,
										41276
									],
									[
										41356,
										41369
									],
									[
										41666,
										41679
									],
									[
										41759,
										41772
									],
									[
										41975,
										41988
									],
									[
										42068,
										42081
									],
									[
										42380,
										42393
									],
									[
										42470,
										42483
									],
									[
										42653,
										42666
									],
									[
										42743,
										42756
									],
									[
										42926,
										42939
									],
									[
										43016,
										43029
									],
									[
										43199,
										43212
									],
									[
										43289,
										43302
									],
									[
										43520,
										43533
									],
									[
										43609,
										43622
									],
									[
										43892,
										43905
									],
									[
										44102,
										44115
									],
									[
										44487,
										44500
									],
									[
										44744,
										44757
									],
									[
										45005,
										45018
									],
									[
										45292,
										45305
									],
									[
										45645,
										45654
									],
									[
										45746,
										45755
									],
									[
										45864,
										45873
									],
									[
										46220,
										46229
									],
									[
										46635,
										46644
									],
									[
										46884,
										46893
									],
									[
										47243,
										47252
									],
									[
										47614,
										47623
									],
									[
										47953,
										47962
									],
									[
										48218,
										48227
									],
									[
										48444,
										48453
									],
									[
										48640,
										48649
									],
									[
										48840,
										48849
									],
									[
										49088,
										49097
									],
									[
										49346,
										49355
									],
									[
										49609,
										49618
									],
									[
										49753,
										49762
									],
									[
										50092,
										50101
									],
									[
										50193,
										50202
									],
									[
										50298,
										50307
									],
									[
										50400,
										50409
									],
									[
										50505,
										50514
									],
									[
										50608,
										50617
									],
									[
										50888,
										50897
									],
									[
										50974,
										50983
									],
									[
										51163,
										51172
									],
									[
										51249,
										51258
									],
									[
										51425,
										51434
									],
									[
										51511,
										51520
									],
									[
										51700,
										51709
									],
									[
										51786,
										51795
									],
									[
										51962,
										51971
									],
									[
										52051,
										52060
									],
									[
										52240,
										52249
									],
									[
										52329,
										52338
									],
									[
										52503,
										52512
									],
									[
										52592,
										52601
									],
									[
										52779,
										52788
									],
									[
										52868,
										52877
									],
									[
										53082,
										53091
									],
									[
										53228,
										53237
									],
									[
										53266,
										53275
									],
									[
										53484,
										53493
									],
									[
										53759,
										53768
									],
									[
										54008,
										54017
									],
									[
										54192,
										54201
									],
									[
										54381,
										54390
									],
									[
										54526,
										54535
									],
									[
										54593,
										54602
									],
									[
										54773,
										54782
									],
									[
										54968,
										54977
									],
									[
										55198,
										55207
									],
									[
										55390,
										55399
									],
									[
										55654,
										55663
									],
									[
										55796,
										55805
									],
									[
										55967,
										55976
									],
									[
										56210,
										56219
									],
									[
										56353,
										56362
									],
									[
										56419,
										56428
									],
									[
										56485,
										56494
									],
									[
										56588,
										56597
									],
									[
										56831,
										56840
									],
									[
										57126,
										57135
									],
									[
										57389,
										57398
									],
									[
										57625,
										57634
									],
									[
										57730,
										57739
									],
									[
										58188,
										58197
									],
									[
										58603,
										58612
									],
									[
										58711,
										58720
									],
									[
										58864,
										58873
									],
									[
										58936,
										58945
									],
									[
										59064,
										59073
									],
									[
										59162,
										59171
									],
									[
										59301,
										59310
									],
									[
										59490,
										59499
									],
									[
										59551,
										59560
									],
									[
										59607,
										59616
									],
									[
										59683,
										59692
									],
									[
										59709,
										59718
									],
									[
										59893,
										59902
									],
									[
										59963,
										59972
									],
									[
										60028,
										60037
									],
									[
										60223,
										60232
									],
									[
										60262,
										60271
									],
									[
										60471,
										60480
									],
									[
										60504,
										60513
									],
									[
										60668,
										60677
									],
									[
										60761,
										60770
									],
									[
										60941,
										60950
									],
									[
										61062,
										61071
									],
									[
										61255,
										61264
									],
									[
										61421,
										61430
									],
									[
										61575,
										61584
									],
									[
										61721,
										61730
									],
									[
										61886,
										61895
									],
									[
										62197,
										62206
									],
									[
										62278,
										62287
									],
									[
										62579,
										62588
									],
									[
										62660,
										62669
									],
									[
										62954,
										62963
									],
									[
										63035,
										63044
									],
									[
										63336,
										63345
									],
									[
										63417,
										63426
									],
									[
										63711,
										63720
									],
									[
										63771,
										63780
									],
									[
										64016,
										64025
									],
									[
										64076,
										64085
									],
									[
										64314,
										64323
									],
									[
										64374,
										64383
									],
									[
										64619,
										64628
									],
									[
										64679,
										64688
									],
									[
										64980,
										64989
									],
									[
										65064,
										65073
									],
									[
										65311,
										65320
									],
									[
										65395,
										65404
									],
									[
										65644,
										65653
									],
									[
										65728,
										65737
									],
									[
										65975,
										65984
									],
									[
										66059,
										66068
									],
									[
										66308,
										66317
									],
									[
										66371,
										66380
									],
									[
										66570,
										66579
									],
									[
										66633,
										66642
									],
									[
										66834,
										66843
									],
									[
										66897,
										66906
									],
									[
										67096,
										67105
									],
									[
										67159,
										67168
									],
									[
										67417,
										67426
									],
									[
										67505,
										67514
									],
									[
										67650,
										67659
									],
									[
										67717,
										67726
									],
									[
										67834,
										67843
									],
									[
										67923,
										67932
									],
									[
										68074,
										68083
									],
									[
										68141,
										68150
									],
									[
										68469,
										68484
									],
									[
										68704,
										68719
									],
									[
										68926,
										68941
									],
									[
										69161,
										69176
									],
									[
										69383,
										69398
									],
									[
										69621,
										69636
									],
									[
										69844,
										69859
									],
									[
										70080,
										70095
									],
									[
										70429,
										70444
									],
									[
										70571,
										70586
									],
									[
										70868,
										70883
									],
									[
										71202,
										71217
									],
									[
										71523,
										71538
									],
									[
										71857,
										71872
									],
									[
										72178,
										72193
									],
									[
										72443,
										72458
									],
									[
										72695,
										72710
									],
									[
										72960,
										72975
									],
									[
										73274,
										73289
									],
									[
										73605,
										73620
									],
									[
										73929,
										73944
									],
									[
										74260,
										74275
									],
									[
										74584,
										74599
									],
									[
										74846,
										74861
									],
									[
										75101,
										75116
									],
									[
										75363,
										75378
									],
									[
										75675,
										75690
									],
									[
										75908,
										75923
									],
									[
										76092,
										76107
									],
									[
										76332,
										76347
									],
									[
										76775,
										76785
									],
									[
										76990,
										77000
									],
									[
										77066,
										77076
									],
									[
										77138,
										77148
									],
									[
										77291,
										77301
									],
									[
										77370,
										77380
									],
									[
										77445,
										77455
									],
									[
										77834,
										77844
									],
									[
										77941,
										77951
									],
									[
										78053,
										78063
									],
									[
										78254,
										78264
									],
									[
										78436,
										78446
									],
									[
										78543,
										78553
									],
									[
										78717,
										78727
									],
									[
										78825,
										78835
									],
									[
										79218,
										79228
									],
									[
										79459,
										79469
									],
									[
										79641,
										79651
									],
									[
										79988,
										79998
									],
									[
										80212,
										80222
									],
									[
										80560,
										80570
									],
									[
										80653,
										80663
									],
									[
										80860,
										80870
									],
									[
										80984,
										80994
									],
									[
										81166,
										81176
									],
									[
										81342,
										81352
									],
									[
										81557,
										81567
									],
									[
										81851,
										81861
									],
									[
										81977,
										81987
									],
									[
										82306,
										82316
									],
									[
										82532,
										82542
									],
									[
										82712,
										82722
									],
									[
										82982,
										82992
									],
									[
										83116,
										83126
									],
									[
										83363,
										83373
									],
									[
										83428,
										83438
									],
									[
										83495,
										83505
									],
									[
										83584,
										83594
									],
									[
										83647,
										83657
									],
									[
										83772,
										83782
									],
									[
										83897,
										83907
									],
									[
										84008,
										84018
									],
									[
										84184,
										84194
									],
									[
										84252,
										84262
									],
									[
										84322,
										84332
									],
									[
										84414,
										84424
									],
									[
										84480,
										84490
									],
									[
										84608,
										84618
									],
									[
										84736,
										84746
									],
									[
										84850,
										84860
									],
									[
										85123,
										85133
									],
									[
										85312,
										85322
									],
									[
										85565,
										85575
									],
									[
										85649,
										85659
									],
									[
										85735,
										85745
									],
									[
										85817,
										85827
									],
									[
										85938,
										85948
									],
									[
										86035,
										86045
									],
									[
										86134,
										86144
									],
									[
										86314,
										86324
									],
									[
										86401,
										86411
									],
									[
										86490,
										86500
									],
									[
										86575,
										86585
									],
									[
										86699,
										86709
									],
									[
										86799,
										86809
									],
									[
										86901,
										86911
									],
									[
										87182,
										87192
									],
									[
										87309,
										87319
									],
									[
										87402,
										87412
									],
									[
										87499,
										87509
									],
									[
										87596,
										87606
									],
									[
										87695,
										87705
									],
									[
										87794,
										87804
									],
									[
										87974,
										87984
									],
									[
										88104,
										88114
									],
									[
										88200,
										88210
									],
									[
										88300,
										88310
									],
									[
										88400,
										88410
									],
									[
										88502,
										88512
									],
									[
										88604,
										88614
									],
									[
										88879,
										88889
									],
									[
										88961,
										88971
									],
									[
										89041,
										89051
									],
									[
										89160,
										89170
									],
									[
										89257,
										89267
									],
									[
										89356,
										89366
									],
									[
										89455,
										89465
									],
									[
										89635,
										89645
									],
									[
										89720,
										89730
									],
									[
										89803,
										89813
									],
									[
										89925,
										89935
									],
									[
										90025,
										90035
									],
									[
										90127,
										90137
									],
									[
										90229,
										90239
									],
									[
										90556,
										90566
									],
									[
										90735,
										90745
									],
									[
										91020,
										91030
									],
									[
										91187,
										91197
									],
									[
										91353,
										91363
									],
									[
										91521,
										91531
									],
									[
										91714,
										91724
									],
									[
										91883,
										91893
									],
									[
										92052,
										92062
									],
									[
										92223,
										92233
									],
									[
										92626,
										92636
									],
									[
										92968,
										92978
									],
									[
										93310,
										93320
									],
									[
										93652,
										93662
									],
									[
										94015,
										94025
									],
									[
										94270,
										94280
									],
									[
										94602,
										94612
									],
									[
										94722,
										94732
									],
									[
										94958,
										94968
									],
									[
										95029,
										95039
									],
									[
										95112,
										95122
									],
									[
										95199,
										95209
									],
									[
										95288,
										95298
									],
									[
										95482,
										95492
									],
									[
										95556,
										95566
									],
									[
										95642,
										95652
									],
									[
										95732,
										95742
									],
									[
										95824,
										95834
									],
									[
										96100,
										96110
									],
									[
										96171,
										96181
									],
									[
										96254,
										96264
									],
									[
										96341,
										96351
									],
									[
										96430,
										96440
									],
									[
										96624,
										96634
									],
									[
										96698,
										96708
									],
									[
										96784,
										96794
									],
									[
										96874,
										96884
									],
									[
										96966,
										96976
									],
									[
										97244,
										97254
									],
									[
										97315,
										97325
									],
									[
										97398,
										97408
									],
									[
										97485,
										97495
									],
									[
										97574,
										97584
									],
									[
										97768,
										97778
									],
									[
										97842,
										97852
									],
									[
										97928,
										97938
									],
									[
										98018,
										98028
									],
									[
										98110,
										98120
									],
									[
										98413,
										98423
									],
									[
										98679,
										98689
									],
									[
										98863,
										98873
									],
									[
										99337,
										99347
									],
									[
										99736,
										99746
									],
									[
										99966,
										99976
									],
									[
										100141,
										100151
									],
									[
										100232,
										100242
									],
									[
										100319,
										100329
									],
									[
										100410,
										100420
									],
									[
										100503,
										100513
									],
									[
										100596,
										100606
									],
									[
										100687,
										100697
									],
									[
										100924,
										100934
									],
									[
										101013,
										101023
									],
									[
										101254,
										101264
									],
									[
										101351,
										101361
									],
									[
										101438,
										101448
									],
									[
										101527,
										101537
									],
									[
										101610,
										101620
									],
									[
										101857,
										101867
									],
									[
										102097,
										102107
									],
									[
										102343,
										102353
									],
									[
										102437,
										102447
									],
									[
										102527,
										102537
									],
									[
										102621,
										102631
									],
									[
										102717,
										102727
									],
									[
										102813,
										102823
									],
									[
										102907,
										102917
									],
									[
										103149,
										103159
									],
									[
										103241,
										103251
									],
									[
										103487,
										103497
									],
									[
										103587,
										103597
									],
									[
										103677,
										103687
									],
									[
										103769,
										103779
									],
									[
										103855,
										103865
									],
									[
										104107,
										104117
									],
									[
										104352,
										104362
									],
									[
										104632,
										104642
									],
									[
										104832,
										104842
									],
									[
										104927,
										104937
									],
									[
										105061,
										105071
									],
									[
										105356,
										105366
									],
									[
										105735,
										105751
									],
									[
										105959,
										105975
									],
									[
										106061,
										106077
									],
									[
										106204,
										106220
									],
									[
										106303,
										106319
									],
									[
										106413,
										106429
									],
									[
										106513,
										106529
									],
									[
										106623,
										106639
									],
									[
										106704,
										106720
									],
									[
										106803,
										106819
									],
									[
										106935,
										106951
									],
									[
										107068,
										107084
									],
									[
										107212,
										107228
									],
									[
										107313,
										107329
									],
									[
										107489,
										107505
									],
									[
										107556,
										107572
									],
									[
										107718,
										107734
									],
									[
										107786,
										107802
									],
									[
										107964,
										107980
									],
									[
										108133,
										108149
									],
									[
										108182,
										108198
									],
									[
										108249,
										108265
									],
									[
										108419,
										108435
									],
									[
										108486,
										108502
									],
									[
										108657,
										108673
									],
									[
										108807,
										108823
									],
									[
										109079,
										109095
									],
									[
										109370,
										109386
									],
									[
										109602,
										109618
									],
									[
										109697,
										109713
									],
									[
										109794,
										109810
									],
									[
										109887,
										109903
									],
									[
										109980,
										109996
									],
									[
										110085,
										110101
									],
									[
										110192,
										110208
									],
									[
										110297,
										110313
									],
									[
										110406,
										110422
									],
									[
										110515,
										110531
									],
									[
										110626,
										110642
									],
									[
										110737,
										110753
									],
									[
										110846,
										110862
									],
									[
										110953,
										110969
									],
									[
										111064,
										111080
									],
									[
										111176,
										111192
									],
									[
										111281,
										111297
									],
									[
										111394,
										111410
									],
									[
										111507,
										111523
									],
									[
										111610,
										111626
									],
									[
										111715,
										111731
									],
									[
										111959,
										111975
									],
									[
										112074,
										112090
									],
									[
										112144,
										112160
									],
									[
										112242,
										112258
									],
									[
										112342,
										112358
									],
									[
										112438,
										112454
									],
									[
										112534,
										112550
									],
									[
										112642,
										112658
									],
									[
										112752,
										112768
									],
									[
										112860,
										112876
									],
									[
										112972,
										112988
									],
									[
										113084,
										113100
									],
									[
										113198,
										113214
									],
									[
										113312,
										113328
									],
									[
										113424,
										113440
									],
									[
										113534,
										113550
									],
									[
										113648,
										113664
									],
									[
										113763,
										113779
									],
									[
										113871,
										113887
									],
									[
										113987,
										114003
									],
									[
										114103,
										114119
									],
									[
										114209,
										114225
									],
									[
										114317,
										114333
									],
									[
										114704,
										114720
									],
									[
										114969,
										114985
									],
									[
										115217,
										115233
									],
									[
										115387,
										115403
									],
									[
										115563,
										115579
									],
									[
										115737,
										115753
									],
									[
										115904,
										115920
									],
									[
										116085,
										116101
									],
									[
										116261,
										116277
									],
									[
										116426,
										116442
									],
									[
										116591,
										116607
									],
									[
										116764,
										116780
									],
									[
										116969,
										116985
									],
									[
										117107,
										117123
									],
									[
										117280,
										117296
									],
									[
										117685,
										117709
									],
									[
										118031,
										118048
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								118091,
								118091
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										115782,
										115783
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"line_numbers": false,
							"output_tag": 8,
							"rainbowth.lispy": false,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 55100.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16494,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10917.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "ext/openFrameworks/addons/ofxAndroid/src/ofAppAndroidWindow.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1598,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 363.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppGlutWindow.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25246,
						"regions":
						{
						},
						"selection":
						[
							[
								22683,
								22683
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 16408.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppGlutWindow.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2393,
						"regions":
						{
						},
						"selection":
						[
							[
								1828,
								1828
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1850,
										1851
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1828,
										1829
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1227.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppBaseWindow.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3659,
						"regions":
						{
						},
						"selection":
						[
							[
								490,
								490
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2860,
										2861
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										425,
										426
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "ext/openFrameworks/libs/openFrameworks/events/ofEvents.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16891,
						"regions":
						{
						},
						"selection":
						[
							[
								617,
								617
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										633,
										634
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										616,
										617
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "ext/openFrameworks/libs/openFrameworks/app/ofAppRunner.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14039,
						"regions":
						{
						},
						"selection":
						[
							[
								7541,
								7541
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7560,
										7561
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										7530,
										7531
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8849.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "ext/openFrameworks/examples/math/periodicSignalsExample/src/ofxSimpleSlider.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5360,
						"regions":
						{
						},
						"selection":
						[
							[
								1014,
								1014
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1345,
										1346
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										940,
										941
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "ext/openFrameworks/libs/openFrameworks/app/ofMainLoop.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10938,
						"regions":
						{
						},
						"selection":
						[
							[
								1948,
								1948
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2000,
										2001
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1930,
										1931
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2353.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "ext/openFrameworks/libs/openFrameworks/events/ofEventUtils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10025,
						"regions":
						{
						},
						"selection":
						[
							[
								1117,
								1117
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"rainbowth.lispy": false,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 49.0
	},
	"input":
	{
		"height": 67.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 323.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 96.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "qbs debug",
	"project": "notes_resourceManager.sublime-project",
	"replace":
	{
		"height": 90.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"resource",
				"lib/rubyOF/resource_manager.rb"
			],
			[
				"rectan",
				"lib/rubyOF/rectangle.rb"
			],
			[
				"basewin",
				"ext/openFrameworks/libs/openFrameworks/app/ofAppBaseWindow.h"
			],
			[
				"openframeworks window",
				"ext/openFrameworks/libs/openFrameworks/app/ofAppGlutWindow.cpp"
			],
			[
				"poly",
				"bin/projects/youtube/lib/monkey_patches/Chipmunk/Shape/Poly.rb"
			],
			[
				"rect",
				"bin/projects/youtube/lib/monkey_patches/Chipmunk/Shape/Rect.rb"
			],
			[
				"font ",
				"bin/projects/youtube/lib/serialization/RubyOF/font.rb"
			],
			[
				"tty",
				"ext/rubyOF/TrueTypeFont.h"
			],
			[
				"trty",
				"ext/rubyOF/TrueTypeFont.cpp"
			],
			[
				"color",
				"lib/rubyOF/color.rb"
			],
			[
				"truetyp.r",
				"lib/rubyOF/true_type_font.rb"
			],
			[
				"window ",
				"build/window_guard.rb"
			],
			[
				"text",
				"lib/entities/text.rb"
			],
			[
				"entit",
				"lib/entities/entity.rb"
			],
			[
				"space",
				"lib/space.rb"
			],
			[
				"win",
				"lib/window.rb"
			],
			[
				"conf",
				"ext/addons_app/testApp/config.make"
			],
			[
				"appfac",
				"ext/rubyOF/app_factory.h"
			],
			[
				"rake",
				"Rakefile"
			],
			[
				"appf",
				"ext/rubyOF/app_factory.h"
			],
			[
				".gitmo",
				".gitmodules"
			],
			[
				"setting",
				"bin/projects/youtube/bin/data/settings.xml"
			],
			[
				"settings.xml",
				"bin/projects/youtube/bin/data/settings.xml"
			],
			[
				"extimage",
				"ext/rubyOF/image.cpp"
			],
			[
				"build",
				"build/build.rb"
			],
			[
				"addons/ofxinputfield",
				"ext/openFrameworks/addons/ofxGui/src/ofxInputField.cpp"
			],
			[
				"ofxinputfi",
				"ext/openFrameworks/addons/ofxGui/src/ofxInputField.cpp"
			],
			[
				"ofxguivalupl",
				"ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiValuePlotter.cpp"
			],
			[
				"ofxguiextended",
				"ext/openFrameworks/addons/ofxGuiExtended/src/ofxGuiExtended.h"
			],
			[
				"ofxguiextedadvancedguiofapp",
				"ext/openFrameworks/addons/ofxGuiExtended/exampleAdvancedGui/src/ofApp.cpp"
			],
			[
				"ofapp",
				"ext/oF_apps/testApp/src/ofApp.cpp"
			],
			[
				"oftess",
				"ext/openFrameworks/libs/openFrameworks/graphics/ofTessellator.cpp"
			],
			[
				"ofxbasegu",
				"ext/openFrameworks/addons/ofxGui/src/ofxBaseGui.cpp"
			],
			[
				"buildvar",
				"bin/projects/boilerplate/config/build_variables.rb"
			],
			[
				"extload",
				"build/extension_loader.rb"
			],
			[
				"build_vari",
				"bin/projects/boilerplate/config/build_variables.rb"
			],
			[
				"libmain",
				"bin/projects/boilerplate/lib/main.rb"
			],
			[
				"main.rb",
				"bin/main.rb"
			],
			[
				"appfa",
				"ext/rubyOF/app_factory.h"
			],
			[
				"extc",
				"ext/rubyOF/extconf.rb"
			],
			[
				"helper",
				"rake/helper_functions.rb"
			],
			[
				"staticlib",
				"ext/oF_apps/testApp/Makefile.static_lib"
			],
			[
				".git",
				".gitignore"
			],
			[
				"appfact",
				"ext/rubyOF/app_factory.h"
			],
			[
				"youtubeextconf",
				"bin/projects/youtube/ext/window/extconf.rb"
			],
			[
				"varia.yaml",
				"ext/oF_apps/testApp/oF_build_variables.yaml"
			],
			[
				"datapath.h",
				"bin/projects/boilerplate/ext/window/constants/data_path.h"
			],
			[
				"extconf",
				"ext/rubyOF/extconf.rb"
			],
			[
				"comm",
				"common.rb"
			],
			[
				"extconb.",
				"ext/rubyOF/extconf_variables.yaml"
			],
			[
				"ofcore",
				"rake/oF_core.rake"
			],
			[
				"ofdep",
				"rake/oF_deps.rake"
			],
			[
				"rakefi",
				"Rakefile"
			],
			[
				"static",
				"ext/oF_apps/testApp/Makefile.static_lib"
			],
			[
				"extconfc.",
				"ext/rubyOF/extconf_common.rb"
			],
			[
				"config.make",
				"ext/oF_apps/testApp/config.make"
			],
			[
				"extenbu",
				"rake/extension_builder.rb"
			],
			[
				"window",
				"lib/rubyOF/window.rb"
			],
			[
				"ofxdatgui.h",
				"ext/openFrameworks/addons/ofxDatGui/src/ofxDatGui.h"
			],
			[
				"youtubeaddons.make",
				"bin/projects/youtube/ext/addons_app/testApp/addons.make"
			],
			[
				"com",
				"common.rb"
			],
			[
				"addonconfig",
				"ext/openFrameworks/addons/ofxAssimpModelLoader/addon_config.mk"
			],
			[
				"compileproject",
				"ext/openFrameworks/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk"
			],
			[
				"addons",
				"ext/oF_apps/testApp/addons.make"
			],
			[
				"addonconf",
				"ext/openFrameworks/addons/ofxInfiniteCanvas/addon_config.mk"
			],
			[
				"config.addons",
				"ext/openFrameworks/libs/openFrameworksCompiled/project/makefileCommon/config.addons.mk"
			],
			[
				"freeza",
				"lib/rubyOF/freezable.rb"
			],
			[
				"free",
				"lib/rubyOF/freezable.rb"
			],
			[
				"color.rb",
				"lib/rubyOF/color.rb"
			],
			[
				"testappmake",
				"ext/oF_apps/testApp/Makefile"
			],
			[
				"build.rb",
				"build/build.rb"
			],
			[
				"valueplotter",
				"ext/openFrameworks/addons/ofxGuiExtended/src/controls/ofxGuiValuePlotter.cpp"
			],
			[
				"testappaddons",
				"ext/oF_apps/testApp/addons.make"
			],
			[
				"ofxguiextend",
				"ext/openFrameworks/addons/ofxGuiExtended/src/ofxGuiExtended.h"
			],
			[
				"advancedguiapp",
				"ext/openFrameworks/addons/ofxGuiExtended/exampleAdvancedGui/src/ofApp.cpp"
			],
			[
				"advancedguimain",
				"ext/openFrameworks/addons/ofxGuiExtended/exampleAdvancedGui/src/main.cpp"
			],
			[
				"rubyof.cpp",
				"ext/rubyOF/rubyOF.cpp"
			],
			[
				"launch",
				"ext/rubyOF/launcher.cpp"
			],
			[
				"window.rb",
				"lib/rubyOF/window.rb"
			],
			[
				"main",
				"bin/projects/boilerplate/lib/main.rb"
			],
			[
				"apph",
				"ext/rubyOF/app_factory.h"
			],
			[
				"launcher",
				"ext/rubyOF/launcher.cpp"
			],
			[
				"project/round",
				"bin/projects/round_tripping/lib/window.rb"
			],
			[
				"projects/example/win",
				"bin/projects/example/lib/window.rb"
			],
			[
				"extconfcommon",
				"ext/rubyOF/extconf_common.rb"
			],
			[
				"ofbuildvar",
				"ext/oF_apps/testApp/oF_build_variables.yaml"
			],
			[
				"youtubeextcon",
				"bin/projects/youtube/ext/window/extconf_variables.yaml"
			],
			[
				"extextconfvara",
				"ext/rubyOF/extconf_variables.yaml"
			],
			[
				"commo",
				"common.rb"
			],
			[
				"buildvaria",
				"bin/projects/boilerplate/config/build_variables.rb"
			],
			[
				"windog",
				"build/window_guard.rb"
			],
			[
				"youtubeappfacto",
				"bin/projects/youtube/ext/window/app_factory.cpp"
			],
			[
				"youtubeapp.cpp",
				"bin/projects/youtube/ext/window/app.cpp"
			],
			[
				"rakefile",
				"Rakefile"
			],
			[
				"graphics",
				"rubyOF/Graphics.cpp"
			],
			[
				"grah",
				"lib/rubyOF/graphics.rb"
			],
			[
				"graph",
				"lib/rubyOF/graphics.rb"
			],
			[
				"pdfim",
				"ofxPDFium/src/ofxPDFium.cpp"
			],
			[
				"ofh",
				"example/src/ofApp.h"
			],
			[
				"ofxgui",
				"addons/ofxGui/src/ofxGui.h"
			],
			[
				"pocorulescompile",
				"of_v0.9.3_libs/custom/poco/poco-1.7.4-all/build/rules/compile"
			],
			[
				"custompocolinux",
				"of_v0.9.3_libs/custom/poco/poco-1.7.4-all/build/config/Linux"
			],
			[
				"custompocomakefile",
				"of_v0.9.3_libs/custom/poco/poco-1.7.4-all/Makefile"
			],
			[
				"compileprojectmk",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk"
			],
			[
				"configproject",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/config.project.mk"
			],
			[
				"configsharedmk",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/config.shared.mk"
			],
			[
				"comple",
				"of_v0.9.3_linux64_release/scripts/linux/compileOF.sh"
			],
			[
				"configlinux6",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/linux64/config.linux64.default.mk"
			],
			[
				"compiledmakefilecommcompile",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/makefileCommon/compile.core.mk"
			],
			[
				"openframeworksmakefile",
				"of_v0.9.3_linux64_release/libs/openFrameworksCompiled/project/Makefile"
			],
			[
				"install",
				"of_v0.9.3_linux64_release/INSTALL.md"
			],
			[
				"releasecompile",
				"of_v0.9.3_linux64_release/addons/obj/linux64/Release/.compiler_flags"
			],
			[
				"compilerflags",
				"of_v0.9.3_linux64_release/addons/obj/linux64/Debug/.compiler_flags"
			],
			[
				"sketchstatic",
				"RubyCPP/Oni/ext/oni/cpp/mySketch/Makefile.static_lib"
			],
			[
				"sketchaddons",
				"RubyCPP/Oni/ext/oni/cpp/mySketch/addons.make"
			],
			[
				"ofbuildvaria",
				"RubyCPP/Oni/ext/oni/cpp/mySketch/oF_build_variables.yaml"
			],
			[
				"of_testadd",
				"~/Experiments/RubyCPP/Oni/ext/oni/cpp/oF_Test/mySketch/addons.make"
			],
			[
				"ofbuild",
				"RubyCPP/Oni/oF_build_variables.yaml"
			],
			[
				"variables",
				"RubyCPP/Oni/ext/oni/of_build_variables.yaml"
			],
			[
				".gi",
				"RubyCPP/.gitignore"
			],
			[
				"extvar",
				"RubyCPP/Oni/ext/oni/extconf_variables.rb"
			],
			[
				"make",
				"RubyCPP/Oni/ext/oni/Makefile"
			],
			[
				"ext",
				"Oni/ext/oni/extconf.rb"
			],
			[
				".",
				".gitignore"
			],
			[
				"event.h",
				"poco-1.7.4-all/Foundation/include/Poco/Event.h"
			],
			[
				"event",
				"poco-1.7.4-all/Foundation/src/Event.cpp"
			],
			[
				"thread",
				"poco-1.7.4-all/Foundation/src/Thread.cpp"
			],
			[
				"test",
				"Oni/lib/test.rb"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Experiments/oF_Test/oF_Test.sublime-project"
			],
			[
				"th",
				"/home/ravenskrag/Documents/Sublime/ThoughtTrace.sublime-project"
			],
			[
				"ete",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"e",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"et",
				"/home/ravenskrag/Documents/Projects/Eternity.sublime-project"
			],
			[
				"gamn",
				"/home/ravenskrag/Documents/Projects/GameDesignNotes.sublime-project"
			],
			[
				"oni",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"on",
				"/home/ravenskrag/Documents/Projects/Oni.sublime-project"
			],
			[
				"321",
				"/home/ravenskrag/Documents/Projects/CS321_Project.sublime-project"
			],
			[
				"go",
				"/home/ravenskrag/Documents/Projects/Gosu.sublime-project"
			],
			[
				"42",
				"/home/ravenskrag/Documents/Projects/CS425_OgreProject.sublime-project"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 488.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wrap",
				"wrap"
			],
			[
				"keyboard",
				"keyboard_cb"
			],
			[
				"key",
				"keys"
			],
			[
				"setupopeng",
				"ofSetupOpenGL"
			],
			[
				"ofsetupop",
				"ofSetupOpenGL"
			]
		],
		"width": 492.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 513.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
